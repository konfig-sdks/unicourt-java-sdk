/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AreaOfLaw;
import com.konfigthis.client.model.AreaOfLawResponse;
import com.konfigthis.client.model.AttorneyRepresentationType;
import com.konfigthis.client.model.AttorneyRepresentationTypeResponse;
import com.konfigthis.client.model.AttorneyType;
import com.konfigthis.client.model.AttorneyTypeResponse;
import com.konfigthis.client.model.CaseClass;
import com.konfigthis.client.model.CaseClassResponse;
import com.konfigthis.client.model.CaseRelationshipType;
import com.konfigthis.client.model.CaseRelationshipTypeResponse;
import com.konfigthis.client.model.CaseStatus;
import com.konfigthis.client.model.CaseStatusGroup;
import com.konfigthis.client.model.CaseStatusGroupResponse;
import com.konfigthis.client.model.CaseStatusResponse;
import com.konfigthis.client.model.CaseType;
import com.konfigthis.client.model.CaseTypeGroup;
import com.konfigthis.client.model.CaseTypeGroupResponse;
import com.konfigthis.client.model.CaseTypeResponse;
import com.konfigthis.client.model.CauseOfAction;
import com.konfigthis.client.model.CauseOfActionAdditionalData;
import com.konfigthis.client.model.CauseOfActionAdditionalDataResponse;
import com.konfigthis.client.model.CauseOfActionGroup;
import com.konfigthis.client.model.CauseOfActionGroupResponse;
import com.konfigthis.client.model.CauseOfActionResponse;
import com.konfigthis.client.model.Charge;
import com.konfigthis.client.model.ChargeAdditionalData;
import com.konfigthis.client.model.ChargeAdditionalDataResponse;
import com.konfigthis.client.model.ChargeDegree;
import com.konfigthis.client.model.ChargeDegreeResponse;
import com.konfigthis.client.model.ChargeGroup;
import com.konfigthis.client.model.ChargeGroupResponse;
import com.konfigthis.client.model.ChargeResponse;
import com.konfigthis.client.model.ChargeSeverity;
import com.konfigthis.client.model.ChargeSeverityResponse;
import com.konfigthis.client.model.Court;
import com.konfigthis.client.model.CourtLocation;
import com.konfigthis.client.model.CourtLocationResponse;
import com.konfigthis.client.model.CourtResponse;
import com.konfigthis.client.model.CourtServiceStatus;
import com.konfigthis.client.model.CourtServiceStatusResponse;
import com.konfigthis.client.model.CourtSystem;
import com.konfigthis.client.model.CourtSystemResponse;
import com.konfigthis.client.model.CourtType;
import com.konfigthis.client.model.CourtTypeResponse;
import com.konfigthis.client.model.JudgeType;
import com.konfigthis.client.model.JudgeTypeResponse;
import com.konfigthis.client.model.JurisdictionGeo;
import com.konfigthis.client.model.JurisdictionGeoResponse;
import com.konfigthis.client.model.PartyRole;
import com.konfigthis.client.model.PartyRoleGroup;
import com.konfigthis.client.model.PartyRoleGroupResponse;
import com.konfigthis.client.model.PartyRoleResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CourtStandardsApiApi
 */
@Disabled
public class CourtStandardsApiApiTest {

    private static CourtStandardsApiApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CourtStandardsApiApi(apiClient);
    }

    /**
     * Associated Court for given Jurisdiction Geo.
     *
     * Returns Associated Court for given Jurisdiction Geo. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void associatedCourtForJurisdictionGeoTest() throws ApiException {
        String jurisdictionGeoId = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtResponse response = api.associatedCourtForJurisdictionGeo(jurisdictionGeoId)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Charge Additional Data Object.
     *
     * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeAdditionalDataQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAdditionalChargeInfoTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        ChargeAdditionalDataResponse response = api.getAdditionalChargeInfo()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Appeal Court Objects for given courtId.
     *
     * Retrieve the appeals courts associated with the specified court. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAppealCourtsForCourtTest() throws ApiException {
        String courtId = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtResponse response = api.getAppealCourtsForCourt(courtId)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * AreaOfLaw Object for the given AreaOfLaw Id.
     *
     * Retrieve the specified area of law. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAreaOfLawTest() throws ApiException {
        String areaOfLawId = null;
        AreaOfLaw response = api.getAreaOfLaw(areaOfLawId)
                .execute();
        // TODO: test validations
    }

    /**
     * Attorney Representation Type Object.
     *
     * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above. ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --&gt; AttorneyRepresentationTypeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttorneyRepTypeTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        AttorneyRepresentationTypeResponse response = api.getAttorneyRepType()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Attorney Representation Type Object for the given attorneyRepresentationTypeId.
     *
     * Retrieve the specified attorney representation type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttorneyRepType_0Test() throws ApiException {
        String attorneyRepresentationTypeId = null;
        AttorneyRepresentationType response = api.getAttorneyRepType_0(attorneyRepresentationTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Attorney Type Object for given Attorney Type Id.
     *
     * Retrieve a specified attorney type object. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttorneyTypeObjectTest() throws ApiException {
        String attorneyTypeId = null;
        AttorneyType response = api.getAttorneyTypeObject(attorneyTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Attorney Type Object.
     *
     * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --&gt; AttorneyTypeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttorneyTypeUsingKeywordExpressionTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        AttorneyTypeResponse response = api.getAttorneyTypeUsingKeywordExpression()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Class Object for the given Case Class Id.
     *
     * Retrieve the specified case class. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseClassByIdTest() throws ApiException {
        String caseClassId = null;
        CaseClass response = api.getCaseClassById(caseClassId)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Class Object.
     *
     * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseClassQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseClassByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CaseClassResponse response = api.getCaseClassByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Relationship Type Object for the given caseRelationshipTypeId.
     *
     * Retrieve the specified case relationship type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseRelationshipTypeByIdTest() throws ApiException {
        String caseRelationshipTypeId = null;
        CaseRelationshipType response = api.getCaseRelationshipTypeById(caseRelationshipTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Relationship Type Object.
     *
     * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseRelationshipTypeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseRelationshipTypesTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CaseRelationshipTypeResponse response = api.getCaseRelationshipTypes()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the caseStatus information for the given caseStatusId.
     *
     * Retrieve the specified case status. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseStatusByIdTest() throws ApiException {
        String caseStatusId = null;
        CaseStatus response = api.getCaseStatusById(caseStatusId)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Status Object.
     *
     * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --&gt; CaseStatusQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseStatusByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CaseStatusResponse response = api.getCaseStatusByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Returns the caseStatusGroup information for the given caseStatusGroupId.
     *
     * Retrieve the specified case status group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseStatusGroupTest() throws ApiException {
        String caseStatusGroupId = null;
        CaseStatusGroup response = api.getCaseStatusGroup(caseStatusGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Status Group Object.
     *
     * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseStatusGroupQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseStatusGroupUsingKeywordExpressionTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CaseStatusGroupResponse response = api.getCaseStatusGroupUsingKeywordExpression()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * CaseType Object for given Case Type Id.
     *
     * Retrieve the specified case type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseTypeTest() throws ApiException {
        String caseTypeId = null;
        CaseType response = api.getCaseType(caseTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * CaseType Group for the given CaseType Group Id.
     *
     * Retrieve the specified case type group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseTypeGroupTest() throws ApiException {
        String caseTypeGroupId = null;
        CaseTypeGroup response = api.getCaseTypeGroup(caseTypeGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Case Type Object.
     *
     * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseTypeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseTypesByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CaseTypeResponse response = api.getCaseTypesByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * CauseOfAction Object for the given causeOfActionId.
     *
     * Retrieve the specified cause of action. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCauseOfActionTest() throws ApiException {
        String causeOfActionId = null;
        CauseOfAction response = api.getCauseOfAction(causeOfActionId)
                .execute();
        // TODO: test validations
    }

    /**
     * CauseOfActionAdditionaData Object.
     *
     * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CauseOfActionAdditionalDataQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCauseOfActionAdditionalDataTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CauseOfActionAdditionalDataResponse response = api.getCauseOfActionAdditionalData()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
     *
     * Retrieve the specified cause of action additional data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCauseOfActionAdditionalData_0Test() throws ApiException {
        String causeOfActionAdditionalDataId = null;
        CauseOfActionAdditionalData response = api.getCauseOfActionAdditionalData_0(causeOfActionAdditionalDataId)
                .execute();
        // TODO: test validations
    }

    /**
     * CauseOfAction Object.
     *
     * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CauseOfActionQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCauseOfActionByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CauseOfActionResponse response = api.getCauseOfActionByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * CauseOfActionGroup Object.
     *
     * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CauseOfActionGroupQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCauseOfActionGroupTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CauseOfActionGroupResponse response = api.getCauseOfActionGroup()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * CauseOfActionGroup Object for the given causeOfActionGroupId.
     *
     * Retrieve the specified cause of action group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCauseOfActionGroup_0Test() throws ApiException {
        String causeOfActionGroupId = null;
        CauseOfActionGroup response = api.getCauseOfActionGroup_0(causeOfActionGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Charge Additional Data Object for the given chargeAdditionalDataId.
     *
     * Retrieve the specified charge additional data. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeAdditionalDataTest() throws ApiException {
        String chargeAdditionalDataId = null;
        ChargeAdditionalData response = api.getChargeAdditionalData(chargeAdditionalDataId)
                .execute();
        // TODO: test validations
    }

    /**
     * Charge Object for the given chargeId.
     *
     * Retrieve the specified charge. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeByIdTest() throws ApiException {
        String chargeId = null;
        Charge response = api.getChargeById(chargeId)
                .execute();
        // TODO: test validations
    }

    /**
     * ChargeDegree Object for the given chargeDegreeId.
     *
     * Retrieve the specified charge degree. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeDegreeByIdTest() throws ApiException {
        String chargeDegreeId = null;
        ChargeDegree response = api.getChargeDegreeById(chargeDegreeId)
                .execute();
        // TODO: test validations
    }

    /**
     * ChargeDegree Object.
     *
     * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeDegreeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeDegreeUsingKeywordExpressionTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        ChargeDegreeResponse response = api.getChargeDegreeUsingKeywordExpression()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Charge Group Object for the given chargeGroupId.
     *
     * Retrieve the specified charge group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeGroupTest() throws ApiException {
        String chargeGroupId = null;
        ChargeGroup response = api.getChargeGroup(chargeGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Charge Group Object.
     *
     * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeGroupQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeGroupsByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        ChargeGroupResponse response = api.getChargeGroupsByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * ChargeSeverity Object for the given chargeSeverityId.
     *
     * Retrieve the specified charge severity. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeSeverityTest() throws ApiException {
        String chargeSeverityId = null;
        ChargeSeverity response = api.getChargeSeverity(chargeSeverityId)
                .execute();
        // TODO: test validations
    }

    /**
     * ChargeSeverity Object.
     *
     * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeSeverityQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargeSeverityByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        ChargeSeverityResponse response = api.getChargeSeverityByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Charge Object.
     *
     * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getChargesUsingKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        ChargeResponse response = api.getChargesUsingKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Courthouse Object.
     *
     * Retrieve the specified court location or court locations.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtLocationQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtLocationTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtLocationResponse response = api.getCourtLocation()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Courthouse Object for given Court Location Id.
     *
     * Contains the Court Location Object. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtLocationObjectTest() throws ApiException {
        String courtLocationId = null;
        CourtLocation response = api.getCourtLocationObject(courtLocationId)
                .execute();
        // TODO: test validations
    }

    /**
     * Associated Court Location for given courtId.
     *
     * Retrieve the court locations associated with the specified court. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtLocationsTest() throws ApiException {
        String courtId = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtLocationResponse response = api.getCourtLocations(courtId)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Court Object for given courtId.
     *
     * Retrieve information about a specified court. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtObjectTest() throws ApiException {
        String courtId = null;
        Court response = api.getCourtObject(courtId)
                .execute();
        // TODO: test validations
    }

    /**
     * Court Service Status Object.
     *
     * Retrieve the status of one or more courts using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtServiceStatusQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtServiceStatusTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtServiceStatusResponse response = api.getCourtServiceStatus()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Court Service Status Object for the given courtServiceStatusId.
     *
     * Retrieve the court status of the specified court. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtServiceStatusByIdTest() throws ApiException {
        String courtServiceStatusId = null;
        CourtServiceStatus response = api.getCourtServiceStatusById(courtServiceStatusId)
                .execute();
        // TODO: test validations
    }

    /**
     * Court System Object for given courtSystemId.
     *
     * Retrieve the specified court system. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtSystemTest() throws ApiException {
        String courtSystemId = null;
        CourtSystem response = api.getCourtSystem(courtSystemId)
                .execute();
        // TODO: test validations
    }

    /**
     * Court Type Object for given courtTypeId.
     *
     * Retrieve the information concerning the specific court type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtTypeObjectTest() throws ApiException {
        String courtTypeId = null;
        CourtType response = api.getCourtTypeObject(courtTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Court Type Objects.
     *
     * Retrieve court types recognized by UniCourt.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtTypeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtTypesTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtTypeResponse response = api.getCourtTypes()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Court Objects.
     *
     * Retrieve information about a specified court or courts.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtsTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtResponse response = api.getCourts()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Associated Court for given Court Location.
     *
     * Retrieve the courts associated with the specified court location. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCourtsByLocationTest() throws ApiException {
        String courtLocationId = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtResponse response = api.getCourtsByLocation(courtLocationId)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Judge Type Object.
     *
     * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; JudgeTypeQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJudgeTypeObjectTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        JudgeTypeResponse response = api.getJudgeTypeObject()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Judge Type Object for the given judgeTypeId.
     *
     * Retrieve the specified judge type. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJudgeTypeObjectByIdTest() throws ApiException {
        String judgeTypeId = null;
        JudgeType response = api.getJudgeTypeObjectById(judgeTypeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Jurisdiction Geo Object for given Jurisdiction Geo Id.
     *
     * Retrieve the specified jurisdiction geography. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJurisdictionGeoTest() throws ApiException {
        String jurisdictionGeoId = null;
        JurisdictionGeo response = api.getJurisdictionGeo(jurisdictionGeoId)
                .execute();
        // TODO: test validations
    }

    /**
     * Jurisdiction Geo Object.
     *
     * Retrieve one or more jurisdiction geographies using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; JurisdictionGeoQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJurisdictionGeoForCourtTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        JurisdictionGeoResponse response = api.getJurisdictionGeoForCourt()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Jurisdiction Geo Objects for given courtId.
     *
     * Retrieve the jurisdiction geography object for the specified court. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJurisdictionGeoObjectsForCourtTest() throws ApiException {
        String courtId = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        JurisdictionGeoResponse response = api.getJurisdictionGeoObjectsForCourt(courtId)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Party Role Object.
     *
     * Retrieve the specified party role. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartyRoleTest() throws ApiException {
        String partyRoleId = null;
        PartyRole response = api.getPartyRole(partyRoleId)
                .execute();
        // TODO: test validations
    }

    /**
     * Party Role Group Object.
     *
     * Retrieve the specified party role group. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartyRoleGroupTest() throws ApiException {
        String partyRoleGroupId = null;
        PartyRoleGroup response = api.getPartyRoleGroup(partyRoleGroupId)
                .execute();
        // TODO: test validations
    }

    /**
     * Party Role Group Object.
     *
     * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; PartyRoleGroupQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartyRoleGroupsTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        PartyRoleGroupResponse response = api.getPartyRoleGroups()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Party Role Object.
     *
     * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; PartyRoleQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartyRolesByKeywordTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        PartyRoleResponse response = api.getPartyRolesByKeyword()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * AreaOfLaw Object.
     *
     * The keyword expression targeting the desired area of law.   ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; AreaOfLawQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAreaOfLawTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        AreaOfLawResponse response = api.listAreaOfLaw()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * CaseTypeGroup Object.
     *
     * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseTypeGroupQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCaseTypeGroupsTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CaseTypeGroupResponse response = api.listCaseTypeGroups()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

    /**
     * Court System Objects.
     *
     * Retrieve information about the specified court system or court systems.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtSystemQueryObject 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listCourtSystemsTest() throws ApiException {
        String q = null;
        Integer pageNumber = null;
        String sort = null;
        String order = null;
        CourtSystemResponse response = api.listCourtSystems()
                .q(q)
                .pageNumber(pageNumber)
                .sort(sort)
                .order(order)
                .execute();
        // TODO: test validations
    }

}
