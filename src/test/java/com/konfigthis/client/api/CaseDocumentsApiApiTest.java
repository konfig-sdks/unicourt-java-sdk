/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.CaseDocument;
import com.konfigthis.client.model.CaseDocumentOrderCallback;
import com.konfigthis.client.model.CaseDocumentOrderCallbackListResponse;
import com.konfigthis.client.model.CaseDocumentOrderPacerOptions;
import com.konfigthis.client.model.CaseDocumentOrderRequest;
import com.konfigthis.client.model.CaseDocuments;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CaseDocumentsApiApi
 */
@Disabled
public class CaseDocumentsApiApiTest {

    private static CaseDocumentsApiApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CaseDocumentsApiApi(apiClient);
    }

    /**
     * Add Case Document Order for requested Document Ids.
     *
     * Add Case Document Order for requested Document Ids.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDocumentOrderTest() throws ApiException {
        String caseDocumentId = null;
        Boolean isPreviewOnly = null;
        CaseDocumentOrderPacerOptions pacerOptions = null;
        CaseDocumentOrderCallback response = api.addDocumentOrder(caseDocumentId, isPreviewOnly)
                .pacerOptions(pacerOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Case Document Order Callback for a requested Case Document Order Callback Id.
     *
     * Get Case Document Order Callback for a requested Case Document Order Callback Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCallbackByIdTest() throws ApiException {
        String caseDocumentOrderCallbackId = null;
        CaseDocumentOrderCallback response = api.getCallbackById(caseDocumentOrderCallbackId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets details for a requested Document ID.
     *
     * Gets details for a requested Document ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentDetailsByDocumentIdTest() throws ApiException {
        String caseDocumentId = null;
        CaseDocument response = api.getDocumentDetailsByDocumentId(caseDocumentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Documents for a requested Case ID.
     *
     * Gets Documents for a requested Case ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocumentsForCaseTest() throws ApiException {
        String caseId = null;
        Boolean inLibrary = null;
        OffsetDateTime afterFirstFetchDate = null;
        OffsetDateTime libraryDate = null;
        OffsetDateTime firstFetchDate = null;
        String sortBy = null;
        Integer pageNumber = null;
        CaseDocuments response = api.getDocumentsForCase(caseId)
                .inLibrary(inLibrary)
                .afterFirstFetchDate(afterFirstFetchDate)
                .libraryDate(libraryDate)
                .firstFetchDate(firstFetchDate)
                .sortBy(sortBy)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets downloadable URL for a requested Document ID.
     *
     * Gets downloadable URL for a requested Document ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDownloadableUrlForDocumentTest() throws ApiException {
        String caseDocumentId = null;
        Boolean isPreviewDocument = null;
        Object response = api.getDownloadableUrlForDocument(caseDocumentId)
                .isPreviewDocument(isPreviewDocument)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Case Document Order Callback list for a requested Date.
     *
     * Get Case Document Order Callback list for a requested Date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDocumentOrderCallbacksTest() throws ApiException {
        OffsetDateTime date = null;
        String status = null;
        Integer pageNumber = null;
        CaseDocumentOrderCallbackListResponse response = api.listDocumentOrderCallbacks()
                .date(date)
                .status(status)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

}
