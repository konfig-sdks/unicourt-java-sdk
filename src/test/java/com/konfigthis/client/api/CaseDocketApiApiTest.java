/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Attorney;
import com.konfigthis.client.model.Attorneys;
import com.konfigthis.client.model.DocketEntries;
import com.konfigthis.client.model.DocketEntryPrimaryDocuments;
import com.konfigthis.client.model.DocketEntrySecondaryDocuments;
import com.konfigthis.client.model.Hearings;
import com.konfigthis.client.model.Judge;
import com.konfigthis.client.model.Judges;
import com.konfigthis.client.model.ModelCase;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Parties;
import com.konfigthis.client.model.Party;
import com.konfigthis.client.model.PartyAttorneyAssociations;
import com.konfigthis.client.model.RelatedCases;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CaseDocketApiApi
 */
@Disabled
public class CaseDocketApiApiTest {

    private static CaseDocketApiApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CaseDocketApiApi(apiClient);
    }

    /**
     * Gets Associated Attorney details for a requested Party ID.
     *
     * Retrieve the attorneys in the case with the specified partyId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociatedAttorneyDetailsTest() throws ApiException {
        String partyId = null;
        Integer pageNumber = null;
        PartyAttorneyAssociations response = api.getAssociatedAttorneyDetails(partyId)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Associated Party details for a requested Attorney ID.
     *
     * Retrieve the parties represented by the attorney with the specified attorneyId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAssociatedPartiesTest() throws ApiException {
        String attorneyId = null;
        Integer pageNumber = null;
        PartyAttorneyAssociations response = api.getAssociatedParties(attorneyId)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets details for a requested Attorney ID.
     *
     * Retrieve the attorney with the specified attorneyId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttorneyDetailsTest() throws ApiException {
        String attorneyId = null;
        Attorney response = api.getAttorneyDetails(attorneyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Attorneys for a requested Case ID.
     *
     * Retrieve the attorneys in the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttorneysByCaseIdTest() throws ApiException {
        String caseId = null;
        Boolean isVisible = null;
        Integer pageNumber = null;
        Attorneys response = api.getAttorneysByCaseId(caseId)
                .isVisible(isVisible)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets case information for a requested Case ID.
     *
     * Retrieve the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCaseInfoTest() throws ApiException {
        String caseId = null;
        ModelCase response = api.getCaseInfo(caseId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Parties for a requested Case ID.
     *
     * Retrieve the parties involved in the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCasePartiesTest() throws ApiException {
        String caseId = null;
        Boolean isVisible = null;
        Integer pageNumber = null;
        String partyRoleId = null;
        String partyRoleGroupId = null;
        String attorneyRepresentationTypeId = null;
        String partyClassificationType = null;
        Parties response = api.getCaseParties(caseId)
                .isVisible(isVisible)
                .pageNumber(pageNumber)
                .partyRoleId(partyRoleId)
                .partyRoleGroupId(partyRoleGroupId)
                .attorneyRepresentationTypeId(attorneyRepresentationTypeId)
                .partyClassificationType(partyClassificationType)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Docket Entries for a requested Case ID.
     *
     * Retrieve the docket entries in the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDocketEntriesTest() throws ApiException {
        String caseId = null;
        Integer docketNumber = null;
        String sortBy = null;
        Integer pageNumber = null;
        DocketEntries response = api.getDocketEntries(caseId)
                .docketNumber(docketNumber)
                .sortBy(sortBy)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Hearings for a requested Case ID.
     *
     * Gets Hearings for a requested Case ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getHearingsForCaseTest() throws ApiException {
        String caseId = null;
        String sortBy = null;
        Integer pageNumber = null;
        Hearings response = api.getHearingsForCase(caseId)
                .sortBy(sortBy)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets details for a requested Judge ID.
     *
     * Retrieve the judge with the specified judgeId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJudgeDetailsTest() throws ApiException {
        String judgeId = null;
        Judge response = api.getJudgeDetails(judgeId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Judges for a requested Case ID.
     *
     * Retrieve the judges involved in the specified case.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJudgesForCaseTest() throws ApiException {
        String caseId = null;
        Boolean isVisible = null;
        Integer pageNumber = null;
        Judges response = api.getJudgesForCase(caseId)
                .isVisible(isVisible)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets details for a requested Party ID.
     *
     * Retrieve the party with the specified partyId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartyDetailsTest() throws ApiException {
        String partyId = null;
        Party response = api.getPartyDetails(partyId)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Primary Documents of Docket Entries.
     *
     * Retrieve the primary documents in the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPrimaryDocumentsTest() throws ApiException {
        String caseId = null;
        Integer docketNumber = null;
        Boolean inLibrary = null;
        OffsetDateTime afterFirstFetchDate = null;
        OffsetDateTime libraryDate = null;
        Integer pageNumber = null;
        DocketEntryPrimaryDocuments response = api.getPrimaryDocuments(caseId, docketNumber)
                .inLibrary(inLibrary)
                .afterFirstFetchDate(afterFirstFetchDate)
                .libraryDate(libraryDate)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Related Cases for a requested Case ID.
     *
     * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRelatedCasesTest() throws ApiException {
        String caseId = null;
        Integer pageNumber = null;
        RelatedCases response = api.getRelatedCases(caseId)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

    /**
     * Gets Secondary Documents of Docket Entries.
     *
     * Retrieve the secondary documents in the case with the specified caseId value.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSecondaryDocumentsForDocketEntriesTest() throws ApiException {
        String caseId = null;
        Integer docketNumber = null;
        Boolean inLibrary = null;
        OffsetDateTime afterFirstFetchDate = null;
        OffsetDateTime libraryDate = null;
        Integer pageNumber = null;
        DocketEntrySecondaryDocuments response = api.getSecondaryDocumentsForDocketEntries(caseId, docketNumber)
                .inLibrary(inLibrary)
                .afterFirstFetchDate(afterFirstFetchDate)
                .libraryDate(libraryDate)
                .pageNumber(pageNumber)
                .execute();
        // TODO: test validations
    }

}
