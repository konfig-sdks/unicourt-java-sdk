/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PACERSearchReceipt
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PACERSearchReceipt {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_BILLABLE_PAGES = "billablePages";
  @SerializedName(SERIALIZED_NAME_BILLABLE_PAGES)
  private Integer billablePages;

  public static final String SERIALIZED_NAME_CLIENT_CODE = "clientCode";
  @SerializedName(SERIALIZED_NAME_CLIENT_CODE)
  private String clientCode;

  public static final String SERIALIZED_NAME_CSO_ID = "csoId";
  @SerializedName(SERIALIZED_NAME_CSO_ID)
  private Integer csoId;

  public static final String SERIALIZED_NAME_FIRM_ID = "firmId";
  @SerializedName(SERIALIZED_NAME_FIRM_ID)
  private String firmId;

  public static final String SERIALIZED_NAME_LOGIN_ID = "loginId";
  @SerializedName(SERIALIZED_NAME_LOGIN_ID)
  private String loginId;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "PACERSearchReceipt";

  public static final String SERIALIZED_NAME_REPORT_ID = "reportId";
  @SerializedName(SERIALIZED_NAME_REPORT_ID)
  private String reportId;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private String search;

  public static final String SERIALIZED_NAME_SEARCH_FEE = "searchFee";
  @SerializedName(SERIALIZED_NAME_SEARCH_FEE)
  private String searchFee;

  public static final String SERIALIZED_NAME_TRANSACTION_DATE = "transactionDate";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_DATE)
  private OffsetDateTime transactionDate;

  public PACERSearchReceipt() {
  }

  public PACERSearchReceipt description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the search made.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Multi-district Litigation Party Search", required = true, value = "Description of the search made.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public PACERSearchReceipt billablePages(Integer billablePages) {
    
    
    
    
    this.billablePages = billablePages;
    return this;
  }

   /**
   * No of pages that was billed for the given PACER search.
   * @return billablePages
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "No of pages that was billed for the given PACER search.")

  public Integer getBillablePages() {
    return billablePages;
  }


  public void setBillablePages(Integer billablePages) {
    
    
    
    this.billablePages = billablePages;
  }


  public PACERSearchReceipt clientCode(String clientCode) {
    
    
    
    
    this.clientCode = clientCode;
    return this;
  }

   /**
   * client code added if any was set.
   * @return clientCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "964758", required = true, value = "client code added if any was set.")

  public String getClientCode() {
    return clientCode;
  }


  public void setClientCode(String clientCode) {
    
    
    
    this.clientCode = clientCode;
  }


  public PACERSearchReceipt csoId(Integer csoId) {
    
    
    
    
    this.csoId = csoId;
    return this;
  }

   /**
   * PACER Account ID.
   * @return csoId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4696152", required = true, value = "PACER Account ID.")

  public Integer getCsoId() {
    return csoId;
  }


  public void setCsoId(Integer csoId) {
    
    
    
    this.csoId = csoId;
  }


  public PACERSearchReceipt firmId(String firmId) {
    
    
    
    
    this.firmId = firmId;
    return this;
  }

   /**
   * Firm ID.
   * @return firmId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "964758", required = true, value = "Firm ID.")

  public String getFirmId() {
    return firmId;
  }


  public void setFirmId(String firmId) {
    
    
    
    this.firmId = firmId;
  }


  public PACERSearchReceipt loginId(String loginId) {
    
    
    
    
    this.loginId = loginId;
    return this;
  }

   /**
   * ID which is used for PACER login.
   * @return loginId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "johnSmith", required = true, value = "ID which is used for PACER login.")

  public String getLoginId() {
    return loginId;
  }


  public void setLoginId(String loginId) {
    
    
    
    this.loginId = loginId;
  }


  public PACERSearchReceipt _object(String _object) {
    
    
    if (_object != null && _object.length() < 18) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 18.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PACERSearchReceipt", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 18) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 18.");
    }
    this._object = _object;
  }


  public PACERSearchReceipt reportId(String reportId) {
    
    
    
    
    this.reportId = reportId;
    return this;
  }

   /**
   * Report ID for the search made.
   * @return reportId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "32d75b38-76c4-4f85-a1be-df742c578bec", required = true, value = "Report ID for the search made.")

  public String getReportId() {
    return reportId;
  }


  public void setReportId(String reportId) {
    
    
    
    this.reportId = reportId;
  }


  public PACERSearchReceipt search(String search) {
    
    
    
    
    this.search = search;
    return this;
  }

   /**
   * Details of the search made for this request.
   * @return search
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "All Courts; Name Smith, William; Jurisdiction MDL; Page: 1", required = true, value = "Details of the search made for this request.")

  public String getSearch() {
    return search;
  }


  public void setSearch(String search) {
    
    
    
    this.search = search;
  }


  public PACERSearchReceipt searchFee(String searchFee) {
    
    
    if (searchFee != null && searchFee.length() < 3) {
      throw new IllegalArgumentException("Invalid value for searchFee. Length must be greater than or equal to 3.");
    }
    
    this.searchFee = searchFee;
    return this;
  }

   /**
   * PACER Search Fee.
   * @return searchFee
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = ".10", required = true, value = "PACER Search Fee.")

  public String getSearchFee() {
    return searchFee;
  }


  public void setSearchFee(String searchFee) {
    
    
    if (searchFee != null && searchFee.length() < 3) {
      throw new IllegalArgumentException("Invalid value for searchFee. Length must be greater than or equal to 3.");
    }
    this.searchFee = searchFee;
  }


  public PACERSearchReceipt transactionDate(OffsetDateTime transactionDate) {
    
    
    if (transactionDate != null && transactionDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for transactionDate. Length must be greater than or equal to 25.");
    }
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * Date when the transaction was made at the pacer court site.
   * @return transactionDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-09-05T02:33:21Z", required = true, value = "Date when the transaction was made at the pacer court site.")

  public OffsetDateTime getTransactionDate() {
    return transactionDate;
  }


  public void setTransactionDate(OffsetDateTime transactionDate) {
    
    
    if (transactionDate != null && transactionDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for transactionDate. Length must be greater than or equal to 25.");
    }
    this.transactionDate = transactionDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PACERSearchReceipt instance itself
   */
  public PACERSearchReceipt putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PACERSearchReceipt paCERSearchReceipt = (PACERSearchReceipt) o;
    return Objects.equals(this.description, paCERSearchReceipt.description) &&
        Objects.equals(this.billablePages, paCERSearchReceipt.billablePages) &&
        Objects.equals(this.clientCode, paCERSearchReceipt.clientCode) &&
        Objects.equals(this.csoId, paCERSearchReceipt.csoId) &&
        Objects.equals(this.firmId, paCERSearchReceipt.firmId) &&
        Objects.equals(this.loginId, paCERSearchReceipt.loginId) &&
        Objects.equals(this._object, paCERSearchReceipt._object) &&
        Objects.equals(this.reportId, paCERSearchReceipt.reportId) &&
        Objects.equals(this.search, paCERSearchReceipt.search) &&
        Objects.equals(this.searchFee, paCERSearchReceipt.searchFee) &&
        Objects.equals(this.transactionDate, paCERSearchReceipt.transactionDate)&&
        Objects.equals(this.additionalProperties, paCERSearchReceipt.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, billablePages, clientCode, csoId, firmId, loginId, _object, reportId, search, searchFee, transactionDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PACERSearchReceipt {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    billablePages: ").append(toIndentedString(billablePages)).append("\n");
    sb.append("    clientCode: ").append(toIndentedString(clientCode)).append("\n");
    sb.append("    csoId: ").append(toIndentedString(csoId)).append("\n");
    sb.append("    firmId: ").append(toIndentedString(firmId)).append("\n");
    sb.append("    loginId: ").append(toIndentedString(loginId)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    reportId: ").append(toIndentedString(reportId)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    searchFee: ").append(toIndentedString(searchFee)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("billablePages");
    openapiFields.add("clientCode");
    openapiFields.add("csoId");
    openapiFields.add("firmId");
    openapiFields.add("loginId");
    openapiFields.add("object");
    openapiFields.add("reportId");
    openapiFields.add("search");
    openapiFields.add("searchFee");
    openapiFields.add("transactionDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("billablePages");
    openapiRequiredFields.add("clientCode");
    openapiRequiredFields.add("csoId");
    openapiRequiredFields.add("firmId");
    openapiRequiredFields.add("loginId");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("reportId");
    openapiRequiredFields.add("search");
    openapiRequiredFields.add("searchFee");
    openapiRequiredFields.add("transactionDate");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PACERSearchReceipt
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PACERSearchReceipt.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PACERSearchReceipt is not found in the empty JSON string", PACERSearchReceipt.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PACERSearchReceipt.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("clientCode").isJsonNull() && !jsonObj.get("clientCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCode").toString()));
      }
      if (!jsonObj.get("firmId").isJsonNull() && !jsonObj.get("firmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmId").toString()));
      }
      if (!jsonObj.get("loginId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginId").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("reportId").isJsonNull() && !jsonObj.get("reportId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportId").toString()));
      }
      if (!jsonObj.get("search").isJsonNull() && !jsonObj.get("search").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search").toString()));
      }
      if (!jsonObj.get("searchFee").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchFee` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchFee").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PACERSearchReceipt.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PACERSearchReceipt' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PACERSearchReceipt> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PACERSearchReceipt.class));

       return (TypeAdapter<T>) new TypeAdapter<PACERSearchReceipt>() {
           @Override
           public void write(JsonWriter out, PACERSearchReceipt value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PACERSearchReceipt read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PACERSearchReceipt instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PACERSearchReceipt given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PACERSearchReceipt
  * @throws IOException if the JSON string is invalid with respect to PACERSearchReceipt
  */
  public static PACERSearchReceipt fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PACERSearchReceipt.class);
  }

 /**
  * Convert an instance of PACERSearchReceipt to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

