/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NormJudgePublicDataBio
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NormJudgePublicDataBio {
  public static final String SERIALIZED_NAME_BIRTH_CITY = "birthCity";
  @SerializedName(SERIALIZED_NAME_BIRTH_CITY)
  private String birthCity;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "birthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private OffsetDateTime birthDate;

  public static final String SERIALIZED_NAME_BIRTH_STATE = "birthState";
  @SerializedName(SERIALIZED_NAME_BIRTH_STATE)
  private String birthState;

  public static final String SERIALIZED_NAME_DEATH_CITY = "deathCity";
  @SerializedName(SERIALIZED_NAME_DEATH_CITY)
  private String deathCity;

  public static final String SERIALIZED_NAME_DEATH_DATE = "deathDate";
  @SerializedName(SERIALIZED_NAME_DEATH_DATE)
  private OffsetDateTime deathDate;

  public static final String SERIALIZED_NAME_DEATH_STATE = "deathState";
  @SerializedName(SERIALIZED_NAME_DEATH_STATE)
  private String deathState;

  public static final String SERIALIZED_NAME_ETHNICITY = "ethnicity";
  @SerializedName(SERIALIZED_NAME_ETHNICITY)
  private String ethnicity;

  public static final String SERIALIZED_NAME_POLITICAL_AFFILIATION = "politicalAffiliation";
  @SerializedName(SERIALIZED_NAME_POLITICAL_AFFILIATION)
  private String politicalAffiliation;

  public NormJudgePublicDataBio() {
  }

  public NormJudgePublicDataBio birthCity(String birthCity) {
    
    
    
    
    this.birthCity = birthCity;
    return this;
  }

   /**
   * The Birth City of the Judge.
   * @return birthCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Birth City of the Judge.")

  public String getBirthCity() {
    return birthCity;
  }


  public void setBirthCity(String birthCity) {
    
    
    
    this.birthCity = birthCity;
  }


  public NormJudgePublicDataBio birthDate(OffsetDateTime birthDate) {
    
    
    
    
    this.birthDate = birthDate;
    return this;
  }

   /**
   * The Date of Birth of the Judge.
   * @return birthDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Date of Birth of the Judge.")

  public OffsetDateTime getBirthDate() {
    return birthDate;
  }


  public void setBirthDate(OffsetDateTime birthDate) {
    
    
    
    this.birthDate = birthDate;
  }


  public NormJudgePublicDataBio birthState(String birthState) {
    
    
    
    
    this.birthState = birthState;
    return this;
  }

   /**
   * The Birth State of the Judge.
   * @return birthState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Birth State of the Judge.")

  public String getBirthState() {
    return birthState;
  }


  public void setBirthState(String birthState) {
    
    
    
    this.birthState = birthState;
  }


  public NormJudgePublicDataBio deathCity(String deathCity) {
    
    
    
    
    this.deathCity = deathCity;
    return this;
  }

   /**
   * The Death City of the Judge.
   * @return deathCity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Death City of the Judge.")

  public String getDeathCity() {
    return deathCity;
  }


  public void setDeathCity(String deathCity) {
    
    
    
    this.deathCity = deathCity;
  }


  public NormJudgePublicDataBio deathDate(OffsetDateTime deathDate) {
    
    
    
    
    this.deathDate = deathDate;
    return this;
  }

   /**
   * The Date of the Death of the Judge.
   * @return deathDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Date of the Death of the Judge.")

  public OffsetDateTime getDeathDate() {
    return deathDate;
  }


  public void setDeathDate(OffsetDateTime deathDate) {
    
    
    
    this.deathDate = deathDate;
  }


  public NormJudgePublicDataBio deathState(String deathState) {
    
    
    
    
    this.deathState = deathState;
    return this;
  }

   /**
   * The Death State of the Judge.
   * @return deathState
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Death State of the Judge.")

  public String getDeathState() {
    return deathState;
  }


  public void setDeathState(String deathState) {
    
    
    
    this.deathState = deathState;
  }


  public NormJudgePublicDataBio ethnicity(String ethnicity) {
    
    
    
    
    this.ethnicity = ethnicity;
    return this;
  }

   /**
   * Ethnic Group of the Judge.
   * @return ethnicity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Ethnic Group of the Judge.")

  public String getEthnicity() {
    return ethnicity;
  }


  public void setEthnicity(String ethnicity) {
    
    
    
    this.ethnicity = ethnicity;
  }


  public NormJudgePublicDataBio politicalAffiliation(String politicalAffiliation) {
    
    
    
    
    this.politicalAffiliation = politicalAffiliation;
    return this;
  }

   /**
   * The Political Affiliation of the Judge.
   * @return politicalAffiliation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The Political Affiliation of the Judge.")

  public String getPoliticalAffiliation() {
    return politicalAffiliation;
  }


  public void setPoliticalAffiliation(String politicalAffiliation) {
    
    
    
    this.politicalAffiliation = politicalAffiliation;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NormJudgePublicDataBio instance itself
   */
  public NormJudgePublicDataBio putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NormJudgePublicDataBio normJudgePublicDataBio = (NormJudgePublicDataBio) o;
    return Objects.equals(this.birthCity, normJudgePublicDataBio.birthCity) &&
        Objects.equals(this.birthDate, normJudgePublicDataBio.birthDate) &&
        Objects.equals(this.birthState, normJudgePublicDataBio.birthState) &&
        Objects.equals(this.deathCity, normJudgePublicDataBio.deathCity) &&
        Objects.equals(this.deathDate, normJudgePublicDataBio.deathDate) &&
        Objects.equals(this.deathState, normJudgePublicDataBio.deathState) &&
        Objects.equals(this.ethnicity, normJudgePublicDataBio.ethnicity) &&
        Objects.equals(this.politicalAffiliation, normJudgePublicDataBio.politicalAffiliation)&&
        Objects.equals(this.additionalProperties, normJudgePublicDataBio.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(birthCity, birthDate, birthState, deathCity, deathDate, deathState, ethnicity, politicalAffiliation, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormJudgePublicDataBio {\n");
    sb.append("    birthCity: ").append(toIndentedString(birthCity)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthState: ").append(toIndentedString(birthState)).append("\n");
    sb.append("    deathCity: ").append(toIndentedString(deathCity)).append("\n");
    sb.append("    deathDate: ").append(toIndentedString(deathDate)).append("\n");
    sb.append("    deathState: ").append(toIndentedString(deathState)).append("\n");
    sb.append("    ethnicity: ").append(toIndentedString(ethnicity)).append("\n");
    sb.append("    politicalAffiliation: ").append(toIndentedString(politicalAffiliation)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("birthCity");
    openapiFields.add("birthDate");
    openapiFields.add("birthState");
    openapiFields.add("deathCity");
    openapiFields.add("deathDate");
    openapiFields.add("deathState");
    openapiFields.add("ethnicity");
    openapiFields.add("politicalAffiliation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("birthCity");
    openapiRequiredFields.add("birthDate");
    openapiRequiredFields.add("birthState");
    openapiRequiredFields.add("deathCity");
    openapiRequiredFields.add("deathDate");
    openapiRequiredFields.add("deathState");
    openapiRequiredFields.add("ethnicity");
    openapiRequiredFields.add("politicalAffiliation");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NormJudgePublicDataBio
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NormJudgePublicDataBio.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NormJudgePublicDataBio is not found in the empty JSON string", NormJudgePublicDataBio.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NormJudgePublicDataBio.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("birthCity").isJsonNull() && !jsonObj.get("birthCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthCity").toString()));
      }
      if (!jsonObj.get("birthState").isJsonNull() && !jsonObj.get("birthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `birthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("birthState").toString()));
      }
      if (!jsonObj.get("deathCity").isJsonNull() && !jsonObj.get("deathCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deathCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deathCity").toString()));
      }
      if (!jsonObj.get("deathState").isJsonNull() && !jsonObj.get("deathState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deathState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deathState").toString()));
      }
      if (!jsonObj.get("ethnicity").isJsonNull() && !jsonObj.get("ethnicity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ethnicity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ethnicity").toString()));
      }
      if (!jsonObj.get("politicalAffiliation").isJsonNull() && !jsonObj.get("politicalAffiliation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `politicalAffiliation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("politicalAffiliation").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NormJudgePublicDataBio.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NormJudgePublicDataBio' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NormJudgePublicDataBio> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NormJudgePublicDataBio.class));

       return (TypeAdapter<T>) new TypeAdapter<NormJudgePublicDataBio>() {
           @Override
           public void write(JsonWriter out, NormJudgePublicDataBio value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NormJudgePublicDataBio read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NormJudgePublicDataBio instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NormJudgePublicDataBio given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NormJudgePublicDataBio
  * @throws IOException if the JSON string is invalid with respect to NormJudgePublicDataBio
  */
  public static NormJudgePublicDataBio fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NormJudgePublicDataBio.class);
  }

 /**
  * Convert an instance of NormJudgePublicDataBio to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

