/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CaseStatus
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CaseStatus {
  public static final String SERIALIZED_NAME_CASE_CLASS_ARRAY = "caseClassArray";
  @SerializedName(SERIALIZED_NAME_CASE_CLASS_ARRAY)
  private List<String> caseClassArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_CASE_STATUS_GROUP = "caseStatusGroup";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS_GROUP)
  private String caseStatusGroup;

  public static final String SERIALIZED_NAME_CASE_STATUS_GROUP_ID = "caseStatusGroupId";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS_GROUP_ID)
  private String caseStatusGroupId;

  public static final String SERIALIZED_NAME_CASE_STATUS_ID = "caseStatusId";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS_ID)
  private String caseStatusId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "CaseStatus";

  public CaseStatus() {
  }

  public CaseStatus caseClassArray(List<String> caseClassArray) {
    
    
    
    
    this.caseClassArray = caseClassArray;
    return this;
  }

  public CaseStatus addCaseClassArrayItem(String caseClassArrayItem) {
    this.caseClassArray.add(caseClassArrayItem);
    return this;
  }

   /**
   * Get caseClassArray
   * @return caseClassArray
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Civil\",\"Criminal\"]", required = true, value = "")

  public List<String> getCaseClassArray() {
    return caseClassArray;
  }


  public void setCaseClassArray(List<String> caseClassArray) {
    
    
    
    this.caseClassArray = caseClassArray;
  }


  public CaseStatus caseStatusGroup(String caseStatusGroup) {
    
    
    if (caseStatusGroup != null && caseStatusGroup.length() < 1) {
      throw new IllegalArgumentException("Invalid value for caseStatusGroup. Length must be greater than or equal to 1.");
    }
    
    this.caseStatusGroup = caseStatusGroup;
    return this;
  }

   /**
   * Get caseStatusGroup
   * @return caseStatusGroup
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Closed", required = true, value = "")

  public String getCaseStatusGroup() {
    return caseStatusGroup;
  }


  public void setCaseStatusGroup(String caseStatusGroup) {
    
    
    if (caseStatusGroup != null && caseStatusGroup.length() < 1) {
      throw new IllegalArgumentException("Invalid value for caseStatusGroup. Length must be greater than or equal to 1.");
    }
    this.caseStatusGroup = caseStatusGroup;
  }


  public CaseStatus caseStatusGroupId(String caseStatusGroupId) {
    
    
    if (caseStatusGroupId != null && caseStatusGroupId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseStatusGroupId. Length must be greater than or equal to 18.");
    }
    
    this.caseStatusGroupId = caseStatusGroupId;
    return this;
  }

   /**
   * Get caseStatusGroupId
   * @return caseStatusGroupId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CSSG6ERqyFdydo52WK", required = true, value = "")

  public String getCaseStatusGroupId() {
    return caseStatusGroupId;
  }


  public void setCaseStatusGroupId(String caseStatusGroupId) {
    
    
    if (caseStatusGroupId != null && caseStatusGroupId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseStatusGroupId. Length must be greater than or equal to 18.");
    }
    this.caseStatusGroupId = caseStatusGroupId;
  }


  public CaseStatus caseStatusId(String caseStatusId) {
    
    
    if (caseStatusId != null && caseStatusId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseStatusId. Length must be greater than or equal to 18.");
    }
    
    this.caseStatusId = caseStatusId;
    return this;
  }

   /**
   * Get caseStatusId
   * @return caseStatusId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CSSTBtqf3R2LYFt4j4", required = true, value = "")

  public String getCaseStatusId() {
    return caseStatusId;
  }


  public void setCaseStatusId(String caseStatusId) {
    
    
    if (caseStatusId != null && caseStatusId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseStatusId. Length must be greater than or equal to 18.");
    }
    this.caseStatusId = caseStatusId;
  }


  public CaseStatus createdDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-11-25T10:17:38Z", required = true, value = "The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    this.createdDate = createdDate;
  }


  public CaseStatus name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Dismissed", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public CaseStatus _object(String _object) {
    
    
    if (_object != null && _object.length() < 10) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 10.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CaseStatus", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 10) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 10.");
    }
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CaseStatus instance itself
   */
  public CaseStatus putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaseStatus caseStatus = (CaseStatus) o;
    return Objects.equals(this.caseClassArray, caseStatus.caseClassArray) &&
        Objects.equals(this.caseStatusGroup, caseStatus.caseStatusGroup) &&
        Objects.equals(this.caseStatusGroupId, caseStatus.caseStatusGroupId) &&
        Objects.equals(this.caseStatusId, caseStatus.caseStatusId) &&
        Objects.equals(this.createdDate, caseStatus.createdDate) &&
        Objects.equals(this.name, caseStatus.name) &&
        Objects.equals(this._object, caseStatus._object)&&
        Objects.equals(this.additionalProperties, caseStatus.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseClassArray, caseStatusGroup, caseStatusGroupId, caseStatusId, createdDate, name, _object, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaseStatus {\n");
    sb.append("    caseClassArray: ").append(toIndentedString(caseClassArray)).append("\n");
    sb.append("    caseStatusGroup: ").append(toIndentedString(caseStatusGroup)).append("\n");
    sb.append("    caseStatusGroupId: ").append(toIndentedString(caseStatusGroupId)).append("\n");
    sb.append("    caseStatusId: ").append(toIndentedString(caseStatusId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseClassArray");
    openapiFields.add("caseStatusGroup");
    openapiFields.add("caseStatusGroupId");
    openapiFields.add("caseStatusId");
    openapiFields.add("createdDate");
    openapiFields.add("name");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseClassArray");
    openapiRequiredFields.add("caseStatusGroup");
    openapiRequiredFields.add("caseStatusGroupId");
    openapiRequiredFields.add("caseStatusId");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CaseStatus
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CaseStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaseStatus is not found in the empty JSON string", CaseStatus.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CaseStatus.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("caseClassArray") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("caseClassArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseClassArray` to be an array in the JSON string but got `%s`", jsonObj.get("caseClassArray").toString()));
      }
      if (!jsonObj.get("caseStatusGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseStatusGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseStatusGroup").toString()));
      }
      if (!jsonObj.get("caseStatusGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseStatusGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseStatusGroupId").toString()));
      }
      if (!jsonObj.get("caseStatusId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseStatusId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseStatusId").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaseStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaseStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaseStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaseStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<CaseStatus>() {
           @Override
           public void write(JsonWriter out, CaseStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CaseStatus read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CaseStatus instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CaseStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CaseStatus
  * @throws IOException if the JSON string is invalid with respect to CaseStatus
  */
  public static CaseStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaseStatus.class);
  }

 /**
  * Convert an instance of CaseStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

