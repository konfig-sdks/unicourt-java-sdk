/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BarSourceData;
import com.konfigthis.client.model.Contact;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * This contains the Attorney details that is obtained from the State Bar where the attorney is registered.
 */
@ApiModel(description = "This contains the Attorney details that is obtained from the State Bar where the attorney is registered.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BarRecord {
  public static final String SERIALIZED_NAME_ADMITTED_DATE = "admittedDate";
  @SerializedName(SERIALIZED_NAME_ADMITTED_DATE)
  private OffsetDateTime admittedDate;

  public static final String SERIALIZED_NAME_BAR_NUMBER = "barNumber";
  @SerializedName(SERIALIZED_NAME_BAR_NUMBER)
  private String barNumber;

  public static final String SERIALIZED_NAME_BAR_SOURCE_DATA = "barSourceData";
  @SerializedName(SERIALIZED_NAME_BAR_SOURCE_DATA)
  private BarSourceData barSourceData;

  public static final String SERIALIZED_NAME_BAR_SOURCE_TYPE = "barSourceType";
  @SerializedName(SERIALIZED_NAME_BAR_SOURCE_TYPE)
  private String barSourceType;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private OffsetDateTime firstFetchDate;

  public static final String SERIALIZED_NAME_INACTIVATION_DATE = "inactivationDate";
  @SerializedName(SERIALIZED_NAME_INACTIVATION_DATE)
  private OffsetDateTime inactivationDate;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES = "lastFetchDateWithUpdates";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES)
  private OffsetDateTime lastFetchDateWithUpdates;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "BarRecord";

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    NOT_CLASSIFIED("Not Classified"),
    
    UNKNOWN("Unknown");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public BarRecord() {
  }

  public BarRecord admittedDate(OffsetDateTime admittedDate) {
    
    
    
    
    this.admittedDate = admittedDate;
    return this;
  }

   /**
   * The admittedDate is the date when an attorney was admitted to the bar of a given state.
   * @return admittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The admittedDate is the date when an attorney was admitted to the bar of a given state.")

  public OffsetDateTime getAdmittedDate() {
    return admittedDate;
  }


  public void setAdmittedDate(OffsetDateTime admittedDate) {
    
    
    
    this.admittedDate = admittedDate;
  }


  public BarRecord barNumber(String barNumber) {
    
    
    
    
    this.barNumber = barNumber;
    return this;
  }

   /**
   * Get barNumber
   * @return barNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getBarNumber() {
    return barNumber;
  }


  public void setBarNumber(String barNumber) {
    
    
    
    this.barNumber = barNumber;
  }


  public BarRecord barSourceData(BarSourceData barSourceData) {
    
    
    
    
    this.barSourceData = barSourceData;
    return this;
  }

   /**
   * Get barSourceData
   * @return barSourceData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public BarSourceData getBarSourceData() {
    return barSourceData;
  }


  public void setBarSourceData(BarSourceData barSourceData) {
    
    
    
    this.barSourceData = barSourceData;
  }


  public BarRecord barSourceType(String barSourceType) {
    
    
    
    
    this.barSourceType = barSourceType;
    return this;
  }

   /**
   * Get barSourceType
   * @return barSourceType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getBarSourceType() {
    return barSourceType;
  }


  public void setBarSourceType(String barSourceType) {
    
    
    
    this.barSourceType = barSourceType;
  }


  public BarRecord contact(Contact contact) {
    
    
    
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    
    
    
    this.contact = contact;
  }


  public BarRecord firstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * Get firstFetchDate
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    
    this.firstFetchDate = firstFetchDate;
  }


  public BarRecord inactivationDate(OffsetDateTime inactivationDate) {
    
    
    
    
    this.inactivationDate = inactivationDate;
    return this;
  }

   /**
   * Get inactivationDate
   * @return inactivationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getInactivationDate() {
    return inactivationDate;
  }


  public void setInactivationDate(OffsetDateTime inactivationDate) {
    
    
    
    this.inactivationDate = inactivationDate;
  }


  public BarRecord lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * Get lastFetchDate
   * @return lastFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    
    this.lastFetchDate = lastFetchDate;
  }


  public BarRecord lastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
    return this;
  }

   /**
   * Last Fetch Date of the Attorney Update.
   * @return lastFetchDateWithUpdates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last Fetch Date of the Attorney Update.")

  public OffsetDateTime getLastFetchDateWithUpdates() {
    return lastFetchDateWithUpdates;
  }


  public void setLastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
  }


  public BarRecord _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "BarRecord", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public BarRecord stateCode(String stateCode) {
    
    
    
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * Get stateCode
   * @return stateCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    
    
    
    this.stateCode = stateCode;
  }


  public BarRecord status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BarRecord instance itself
   */
  public BarRecord putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BarRecord barRecord = (BarRecord) o;
    return Objects.equals(this.admittedDate, barRecord.admittedDate) &&
        Objects.equals(this.barNumber, barRecord.barNumber) &&
        Objects.equals(this.barSourceData, barRecord.barSourceData) &&
        Objects.equals(this.barSourceType, barRecord.barSourceType) &&
        Objects.equals(this.contact, barRecord.contact) &&
        Objects.equals(this.firstFetchDate, barRecord.firstFetchDate) &&
        Objects.equals(this.inactivationDate, barRecord.inactivationDate) &&
        Objects.equals(this.lastFetchDate, barRecord.lastFetchDate) &&
        Objects.equals(this.lastFetchDateWithUpdates, barRecord.lastFetchDateWithUpdates) &&
        Objects.equals(this._object, barRecord._object) &&
        Objects.equals(this.stateCode, barRecord.stateCode) &&
        Objects.equals(this.status, barRecord.status)&&
        Objects.equals(this.additionalProperties, barRecord.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admittedDate, barNumber, barSourceData, barSourceType, contact, firstFetchDate, inactivationDate, lastFetchDate, lastFetchDateWithUpdates, _object, stateCode, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BarRecord {\n");
    sb.append("    admittedDate: ").append(toIndentedString(admittedDate)).append("\n");
    sb.append("    barNumber: ").append(toIndentedString(barNumber)).append("\n");
    sb.append("    barSourceData: ").append(toIndentedString(barSourceData)).append("\n");
    sb.append("    barSourceType: ").append(toIndentedString(barSourceType)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    inactivationDate: ").append(toIndentedString(inactivationDate)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    lastFetchDateWithUpdates: ").append(toIndentedString(lastFetchDateWithUpdates)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admittedDate");
    openapiFields.add("barNumber");
    openapiFields.add("barSourceData");
    openapiFields.add("barSourceType");
    openapiFields.add("contact");
    openapiFields.add("firstFetchDate");
    openapiFields.add("inactivationDate");
    openapiFields.add("lastFetchDate");
    openapiFields.add("lastFetchDateWithUpdates");
    openapiFields.add("object");
    openapiFields.add("stateCode");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("admittedDate");
    openapiRequiredFields.add("barNumber");
    openapiRequiredFields.add("barSourceData");
    openapiRequiredFields.add("barSourceType");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("inactivationDate");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("lastFetchDateWithUpdates");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("stateCode");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BarRecord
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BarRecord.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BarRecord is not found in the empty JSON string", BarRecord.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BarRecord.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("barNumber").isJsonNull() && !jsonObj.get("barNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barNumber").toString()));
      }
      // validate the required field `barSourceData`
      BarSourceData.validateJsonObject(jsonObj.getAsJsonObject("barSourceData"));
      if (!jsonObj.get("barSourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `barSourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("barSourceType").toString()));
      }
      // validate the required field `contact`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BarRecord.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BarRecord' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BarRecord> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BarRecord.class));

       return (TypeAdapter<T>) new TypeAdapter<BarRecord>() {
           @Override
           public void write(JsonWriter out, BarRecord value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BarRecord read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BarRecord instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BarRecord given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BarRecord
  * @throws IOException if the JSON string is invalid with respect to BarRecord
  */
  public static BarRecord fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BarRecord.class);
  }

 /**
  * Convert an instance of BarRecord to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

