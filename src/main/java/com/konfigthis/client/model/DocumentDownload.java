/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DocumentDownload
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DocumentDownload {
  public static final String SERIALIZED_NAME_CASE_DOCUMENT_DOWNLOAD_A_P_I = "caseDocumentDownloadAPI";
  @SerializedName(SERIALIZED_NAME_CASE_DOCUMENT_DOWNLOAD_A_P_I)
  private URI caseDocumentDownloadAPI;

  public static final String SERIALIZED_NAME_CASE_DOCUMENT_ID = "caseDocumentId";
  @SerializedName(SERIALIZED_NAME_CASE_DOCUMENT_ID)
  private String caseDocumentId;

  public static final String SERIALIZED_NAME_EXPIRY_DATE = "expiryDate";
  @SerializedName(SERIALIZED_NAME_EXPIRY_DATE)
  private String expiryDate;

  public static final String SERIALIZED_NAME_FILE_URL = "fileUrl";
  @SerializedName(SERIALIZED_NAME_FILE_URL)
  private String fileUrl;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "DocumentDownload";

  public DocumentDownload() {
  }

  public DocumentDownload caseDocumentDownloadAPI(URI caseDocumentDownloadAPI) {
    
    
    if (caseDocumentDownloadAPI != null && caseDocumentDownloadAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for caseDocumentDownloadAPI. Length must be greater than or equal to 1.");
    }
    
    this.caseDocumentDownloadAPI = caseDocumentDownloadAPI;
    return this;
  }

   /**
   * API call to download the document again if the above fileUrl is expired.
   * @return caseDocumentDownloadAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/caseDocumentDownload/CDOCdgc9b0531de2a0", required = true, value = "API call to download the document again if the above fileUrl is expired.")

  public URI getCaseDocumentDownloadAPI() {
    return caseDocumentDownloadAPI;
  }


  public void setCaseDocumentDownloadAPI(URI caseDocumentDownloadAPI) {
    
    
    if (caseDocumentDownloadAPI != null && caseDocumentDownloadAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for caseDocumentDownloadAPI. Length must be greater than or equal to 1.");
    }
    this.caseDocumentDownloadAPI = caseDocumentDownloadAPI;
  }


  public DocumentDownload caseDocumentId(String caseDocumentId) {
    
    
    if (caseDocumentId != null && caseDocumentId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
    }
    
    this.caseDocumentId = caseDocumentId;
    return this;
  }

   /**
   * Requested Document ID.
   * @return caseDocumentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CDOCdgc9b0531de2a0", required = true, value = "Requested Document ID.")

  public String getCaseDocumentId() {
    return caseDocumentId;
  }


  public void setCaseDocumentId(String caseDocumentId) {
    
    
    if (caseDocumentId != null && caseDocumentId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
    }
    this.caseDocumentId = caseDocumentId;
  }


  public DocumentDownload expiryDate(String expiryDate) {
    
    
    if (expiryDate != null && expiryDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for expiryDate. Length must be greater than or equal to 25.");
    }
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Expiry date-time for the fileUrl provided in this object.
   * @return expiryDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2022-07-08T09:41:39.000Z", required = true, value = "Expiry date-time for the fileUrl provided in this object.")

  public String getExpiryDate() {
    return expiryDate;
  }


  public void setExpiryDate(String expiryDate) {
    
    
    if (expiryDate != null && expiryDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for expiryDate. Length must be greater than or equal to 25.");
    }
    this.expiryDate = expiryDate;
  }


  public DocumentDownload fileUrl(String fileUrl) {
    
    
    if (fileUrl != null && fileUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fileUrl. Length must be greater than or equal to 1.");
    }
    
    this.fileUrl = fileUrl;
    return this;
  }

   /**
   * Link to download the file.
   * @return fileUrl
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://case_docs.s3.amazonaws.com/pc/db1/arwdce/CDOCdgc9b0531de2a0.pdf?Signature=iaDrqu3QdGn4Iiivj12HGE0Cd%2FU%3D&Expires=1519114632&AWSAccessKeyId=ASIAIVIPKMBFROMOG4UA&x-amz-security-token=FQoDYXdzEBAaDAFHPFrD90ZiDAXztiK3A5quX27wV0JyJ/MEZZC72CPlfmLYNblJvE9oW8nObvf1H5p%2Boj9Qsg0NQJ36qKmsV2IVFNtmqkoXufMqjpdb1S/p4rp6VPPk6fweYsqkVkjhHkkLesIq8XDAxlKSE9i9TUO8RaKl90c3RszzKhJCjkmLdKEFuwoPv1W1EDyJHsZ222TSnkOJfEJYcaVRhvNPQjSXkl%2BhwrX3Ft0Pzns1rGDtNMj6/2iRoE%2Blqqi4/uFNKbRMxaPS4xi9a7JcevwHPQhj8bVEZyIkZ35vQ4g2WFpImt1uafHPSuzE3WglbkO4yP7mP62P6qIl9xpYpYqzFLdecAkcz0ipBIJltfegTvITfxFMzlYHZimkOx9uJIGXKpD//VSc%2BW95/8JgcAPbGAdCXaxLOVbb1XPSxlO46irUaXFUSBHDy0rKuXdirRiIs583HQt2K6MvMBPzB7BbbE998V1sQsezHvvazdESDSVrjBstXrP23laQg7IiK5rbtGxYYqSEKOlaUd3eFIJwnfqYPVp%2Bl%2BWwORnbi96BtziNUABuccd3KepVMvth481k/xf12Fnakl/vS5A9ArOT7BjwY7q783Mok5Kv1AU%3D", required = true, value = "Link to download the file.")

  public String getFileUrl() {
    return fileUrl;
  }


  public void setFileUrl(String fileUrl) {
    
    
    if (fileUrl != null && fileUrl.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fileUrl. Length must be greater than or equal to 1.");
    }
    this.fileUrl = fileUrl;
  }


  public DocumentDownload _object(String _object) {
    
    
    if (_object != null && _object.length() < 16) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 16.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object.
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DocumentDownload", required = true, value = "Name of the object.")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 16) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 16.");
    }
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DocumentDownload instance itself
   */
  public DocumentDownload putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentDownload documentDownload = (DocumentDownload) o;
    return Objects.equals(this.caseDocumentDownloadAPI, documentDownload.caseDocumentDownloadAPI) &&
        Objects.equals(this.caseDocumentId, documentDownload.caseDocumentId) &&
        Objects.equals(this.expiryDate, documentDownload.expiryDate) &&
        Objects.equals(this.fileUrl, documentDownload.fileUrl) &&
        Objects.equals(this._object, documentDownload._object)&&
        Objects.equals(this.additionalProperties, documentDownload.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseDocumentDownloadAPI, caseDocumentId, expiryDate, fileUrl, _object, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentDownload {\n");
    sb.append("    caseDocumentDownloadAPI: ").append(toIndentedString(caseDocumentDownloadAPI)).append("\n");
    sb.append("    caseDocumentId: ").append(toIndentedString(caseDocumentId)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("    fileUrl: ").append(toIndentedString(fileUrl)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseDocumentDownloadAPI");
    openapiFields.add("caseDocumentId");
    openapiFields.add("expiryDate");
    openapiFields.add("fileUrl");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseDocumentDownloadAPI");
    openapiRequiredFields.add("caseDocumentId");
    openapiRequiredFields.add("expiryDate");
    openapiRequiredFields.add("fileUrl");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DocumentDownload
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DocumentDownload.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DocumentDownload is not found in the empty JSON string", DocumentDownload.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DocumentDownload.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("caseDocumentDownloadAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseDocumentDownloadAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseDocumentDownloadAPI").toString()));
      }
      if (!jsonObj.get("caseDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseDocumentId").toString()));
      }
      if (!jsonObj.get("expiryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiryDate").toString()));
      }
      if (!jsonObj.get("fileUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileUrl").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DocumentDownload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DocumentDownload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DocumentDownload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DocumentDownload.class));

       return (TypeAdapter<T>) new TypeAdapter<DocumentDownload>() {
           @Override
           public void write(JsonWriter out, DocumentDownload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DocumentDownload read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DocumentDownload instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DocumentDownload given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DocumentDownload
  * @throws IOException if the JSON string is invalid with respect to DocumentDownload
  */
  public static DocumentDownload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DocumentDownload.class);
  }

 /**
  * Convert an instance of DocumentDownload to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

