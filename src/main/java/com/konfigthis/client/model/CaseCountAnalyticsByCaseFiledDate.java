/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CaseCountAnalyticsByCaseFiledDate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CaseCountAnalyticsByCaseFiledDate {
  public static final String SERIALIZED_NAME_CASE_COUNT = "caseCount";
  @SerializedName(SERIALIZED_NAME_CASE_COUNT)
  private Integer caseCount;

  public static final String SERIALIZED_NAME_CASE_SEARCH_A_P_I = "caseSearchAPI";
  @SerializedName(SERIALIZED_NAME_CASE_SEARCH_A_P_I)
  private URI caseSearchAPI;

  /**
   * Gets or Sets groupedBy
   */
  @JsonAdapter(GroupedByEnum.Adapter.class)
 public enum GroupedByEnum {
    YEARLY("Yearly"),
    
    QUARTERLY("Quarterly"),
    
    MONTHLY("Monthly"),
    
    WEEKLY("Weekly");

    private String value;

    GroupedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GroupedByEnum fromValue(String value) {
      for (GroupedByEnum b : GroupedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GroupedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GroupedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GroupedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GroupedByEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_GROUPED_BY = "groupedBy";
  @SerializedName(SERIALIZED_NAME_GROUPED_BY)
  private GroupedByEnum groupedBy = GroupedByEnum.YEARLY;

  public static final String SERIALIZED_NAME_MONTH_INT = "monthInt";
  @SerializedName(SERIALIZED_NAME_MONTH_INT)
  private Integer monthInt;

  /**
   * Gets or Sets monthString
   */
  @JsonAdapter(MonthStringEnum.Adapter.class)
 public enum MonthStringEnum {
    JANUARY("January"),
    
    FEBRUARY("February"),
    
    MARCH("March"),
    
    APRIL("April"),
    
    MAY("May"),
    
    JUNE("June"),
    
    JULY("July"),
    
    AUGUST("August"),
    
    SEPTEMBER("September"),
    
    OCTOBER("October"),
    
    NOVEMBER("November"),
    
    DECEMBER("December"),
    
    NULL("null");

    private String value;

    MonthStringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonthStringEnum fromValue(String value) {
      for (MonthStringEnum b : MonthStringEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MonthStringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonthStringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonthStringEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonthStringEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_MONTH_STRING = "monthString";
  @SerializedName(SERIALIZED_NAME_MONTH_STRING)
  private MonthStringEnum monthString;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "CaseCountAnalyticsByCaseFiledDate";

  /**
   * Gets or Sets quarter
   */
  @JsonAdapter(QuarterEnum.Adapter.class)
 public enum QuarterEnum {
    Q1("Q1"),
    
    Q2("Q2"),
    
    Q3("Q3"),
    
    Q4("Q4"),
    
    NULL("null");

    private String value;

    QuarterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuarterEnum fromValue(String value) {
      for (QuarterEnum b : QuarterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<QuarterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuarterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuarterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuarterEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_QUARTER = "quarter";
  @SerializedName(SERIALIZED_NAME_QUARTER)
  private QuarterEnum quarter;

  public static final String SERIALIZED_NAME_WEEK_OF_MONTH = "weekOfMonth";
  @SerializedName(SERIALIZED_NAME_WEEK_OF_MONTH)
  private Integer weekOfMonth;

  public static final String SERIALIZED_NAME_WEEK_OF_YEAR = "weekOfYear";
  @SerializedName(SERIALIZED_NAME_WEEK_OF_YEAR)
  private Integer weekOfYear;

  public static final String SERIALIZED_NAME_YEAR = "year";
  @SerializedName(SERIALIZED_NAME_YEAR)
  private Integer year;

  public CaseCountAnalyticsByCaseFiledDate() {
  }

  public CaseCountAnalyticsByCaseFiledDate caseCount(Integer caseCount) {
    
    
    
    
    this.caseCount = caseCount;
    return this;
  }

   /**
   * Get caseCount
   * @return caseCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCaseCount() {
    return caseCount;
  }


  public void setCaseCount(Integer caseCount) {
    
    
    
    this.caseCount = caseCount;
  }


  public CaseCountAnalyticsByCaseFiledDate caseSearchAPI(URI caseSearchAPI) {
    
    
    
    
    this.caseSearchAPI = caseSearchAPI;
    return this;
  }

   /**
   * Link to cases for this criteria.
   * @return caseSearchAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Link to cases for this criteria.")

  public URI getCaseSearchAPI() {
    return caseSearchAPI;
  }


  public void setCaseSearchAPI(URI caseSearchAPI) {
    
    
    
    this.caseSearchAPI = caseSearchAPI;
  }


  public CaseCountAnalyticsByCaseFiledDate groupedBy(GroupedByEnum groupedBy) {
    
    
    
    
    this.groupedBy = groupedBy;
    return this;
  }

   /**
   * Get groupedBy
   * @return groupedBy
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "YEARLY", required = true, value = "")

  public GroupedByEnum getGroupedBy() {
    return groupedBy;
  }


  public void setGroupedBy(GroupedByEnum groupedBy) {
    
    
    
    this.groupedBy = groupedBy;
  }


  public CaseCountAnalyticsByCaseFiledDate monthInt(Integer monthInt) {
    
    
    
    
    this.monthInt = monthInt;
    return this;
  }

   /**
   * Get monthInt
   * @return monthInt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Integer getMonthInt() {
    return monthInt;
  }


  public void setMonthInt(Integer monthInt) {
    
    
    
    this.monthInt = monthInt;
  }


  public CaseCountAnalyticsByCaseFiledDate monthString(MonthStringEnum monthString) {
    
    
    
    
    this.monthString = monthString;
    return this;
  }

   /**
   * Get monthString
   * @return monthString
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public MonthStringEnum getMonthString() {
    return monthString;
  }


  public void setMonthString(MonthStringEnum monthString) {
    
    
    
    this.monthString = monthString;
  }


  public CaseCountAnalyticsByCaseFiledDate _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CaseCountAnalyticsByCaseFiledDate", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public CaseCountAnalyticsByCaseFiledDate quarter(QuarterEnum quarter) {
    
    
    
    
    this.quarter = quarter;
    return this;
  }

   /**
   * Get quarter
   * @return quarter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public QuarterEnum getQuarter() {
    return quarter;
  }


  public void setQuarter(QuarterEnum quarter) {
    
    
    
    this.quarter = quarter;
  }


  public CaseCountAnalyticsByCaseFiledDate weekOfMonth(Integer weekOfMonth) {
    
    
    
    
    this.weekOfMonth = weekOfMonth;
    return this;
  }

   /**
   * Get weekOfMonth
   * @return weekOfMonth
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Integer getWeekOfMonth() {
    return weekOfMonth;
  }


  public void setWeekOfMonth(Integer weekOfMonth) {
    
    
    
    this.weekOfMonth = weekOfMonth;
  }


  public CaseCountAnalyticsByCaseFiledDate weekOfYear(Integer weekOfYear) {
    
    
    
    
    this.weekOfYear = weekOfYear;
    return this;
  }

   /**
   * Get weekOfYear
   * @return weekOfYear
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Integer getWeekOfYear() {
    return weekOfYear;
  }


  public void setWeekOfYear(Integer weekOfYear) {
    
    
    
    this.weekOfYear = weekOfYear;
  }


  public CaseCountAnalyticsByCaseFiledDate year(Integer year) {
    
    
    
    
    this.year = year;
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getYear() {
    return year;
  }


  public void setYear(Integer year) {
    
    
    
    this.year = year;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CaseCountAnalyticsByCaseFiledDate instance itself
   */
  public CaseCountAnalyticsByCaseFiledDate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaseCountAnalyticsByCaseFiledDate caseCountAnalyticsByCaseFiledDate = (CaseCountAnalyticsByCaseFiledDate) o;
    return Objects.equals(this.caseCount, caseCountAnalyticsByCaseFiledDate.caseCount) &&
        Objects.equals(this.caseSearchAPI, caseCountAnalyticsByCaseFiledDate.caseSearchAPI) &&
        Objects.equals(this.groupedBy, caseCountAnalyticsByCaseFiledDate.groupedBy) &&
        Objects.equals(this.monthInt, caseCountAnalyticsByCaseFiledDate.monthInt) &&
        Objects.equals(this.monthString, caseCountAnalyticsByCaseFiledDate.monthString) &&
        Objects.equals(this._object, caseCountAnalyticsByCaseFiledDate._object) &&
        Objects.equals(this.quarter, caseCountAnalyticsByCaseFiledDate.quarter) &&
        Objects.equals(this.weekOfMonth, caseCountAnalyticsByCaseFiledDate.weekOfMonth) &&
        Objects.equals(this.weekOfYear, caseCountAnalyticsByCaseFiledDate.weekOfYear) &&
        Objects.equals(this.year, caseCountAnalyticsByCaseFiledDate.year)&&
        Objects.equals(this.additionalProperties, caseCountAnalyticsByCaseFiledDate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseCount, caseSearchAPI, groupedBy, monthInt, monthString, _object, quarter, weekOfMonth, weekOfYear, year, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaseCountAnalyticsByCaseFiledDate {\n");
    sb.append("    caseCount: ").append(toIndentedString(caseCount)).append("\n");
    sb.append("    caseSearchAPI: ").append(toIndentedString(caseSearchAPI)).append("\n");
    sb.append("    groupedBy: ").append(toIndentedString(groupedBy)).append("\n");
    sb.append("    monthInt: ").append(toIndentedString(monthInt)).append("\n");
    sb.append("    monthString: ").append(toIndentedString(monthString)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
    sb.append("    weekOfMonth: ").append(toIndentedString(weekOfMonth)).append("\n");
    sb.append("    weekOfYear: ").append(toIndentedString(weekOfYear)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseCount");
    openapiFields.add("caseSearchAPI");
    openapiFields.add("groupedBy");
    openapiFields.add("monthInt");
    openapiFields.add("monthString");
    openapiFields.add("object");
    openapiFields.add("quarter");
    openapiFields.add("weekOfMonth");
    openapiFields.add("weekOfYear");
    openapiFields.add("year");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseCount");
    openapiRequiredFields.add("caseSearchAPI");
    openapiRequiredFields.add("groupedBy");
    openapiRequiredFields.add("monthInt");
    openapiRequiredFields.add("monthString");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("quarter");
    openapiRequiredFields.add("weekOfMonth");
    openapiRequiredFields.add("weekOfYear");
    openapiRequiredFields.add("year");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CaseCountAnalyticsByCaseFiledDate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CaseCountAnalyticsByCaseFiledDate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaseCountAnalyticsByCaseFiledDate is not found in the empty JSON string", CaseCountAnalyticsByCaseFiledDate.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CaseCountAnalyticsByCaseFiledDate.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("caseSearchAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseSearchAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseSearchAPI").toString()));
      }
      if (!jsonObj.get("groupedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupedBy").toString()));
      }
      if (!jsonObj.get("monthString").isJsonNull() && !jsonObj.get("monthString").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthString` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monthString").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("quarter").isJsonNull() && !jsonObj.get("quarter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quarter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quarter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaseCountAnalyticsByCaseFiledDate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaseCountAnalyticsByCaseFiledDate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaseCountAnalyticsByCaseFiledDate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaseCountAnalyticsByCaseFiledDate.class));

       return (TypeAdapter<T>) new TypeAdapter<CaseCountAnalyticsByCaseFiledDate>() {
           @Override
           public void write(JsonWriter out, CaseCountAnalyticsByCaseFiledDate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CaseCountAnalyticsByCaseFiledDate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CaseCountAnalyticsByCaseFiledDate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CaseCountAnalyticsByCaseFiledDate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CaseCountAnalyticsByCaseFiledDate
  * @throws IOException if the JSON string is invalid with respect to CaseCountAnalyticsByCaseFiledDate
  */
  public static CaseCountAnalyticsByCaseFiledDate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaseCountAnalyticsByCaseFiledDate.class);
  }

 /**
  * Convert an instance of CaseCountAnalyticsByCaseFiledDate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

