/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BarSourceDataDisciplinaryHistoryArrayInner
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BarSourceDataDisciplinaryHistoryArrayInner {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_CASE_NUMBER = "caseNumber";
  @SerializedName(SERIALIZED_NAME_CASE_NUMBER)
  private String caseNumber;

  public static final String SERIALIZED_NAME_COMPLAINT = "complaint";
  @SerializedName(SERIALIZED_NAME_COMPLAINT)
  private String complaint;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_DATE_OF_ACTION = "dateOfAction";
  @SerializedName(SERIALIZED_NAME_DATE_OF_ACTION)
  private OffsetDateTime dateOfAction;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private String definition;

  public static final String SERIALIZED_NAME_DISCIPLINARY_DECISION = "disciplinaryDecision";
  @SerializedName(SERIALIZED_NAME_DISCIPLINARY_DECISION)
  private String disciplinaryDecision;

  public static final String SERIALIZED_NAME_ENTRY_DATE = "entryDate";
  @SerializedName(SERIALIZED_NAME_ENTRY_DATE)
  private OffsetDateTime entryDate;

  public static final String SERIALIZED_NAME_INFORMATION = "information";
  @SerializedName(SERIALIZED_NAME_INFORMATION)
  private String information;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_PROBATION_DATE = "probationDate";
  @SerializedName(SERIALIZED_NAME_PROBATION_DATE)
  private OffsetDateTime probationDate;

  public static final String SERIALIZED_NAME_REINSTATED_DATE = "reinstatedDate";
  @SerializedName(SERIALIZED_NAME_REINSTATED_DATE)
  private OffsetDateTime reinstatedDate;

  public static final String SERIALIZED_NAME_RULE = "rule";
  @SerializedName(SERIALIZED_NAME_RULE)
  private String rule;

  public static final String SERIALIZED_NAME_RULE_NUMBER = "ruleNumber";
  @SerializedName(SERIALIZED_NAME_RULE_NUMBER)
  private String ruleNumber;

  public static final String SERIALIZED_NAME_SECTION_DATE = "sectionDate";
  @SerializedName(SERIALIZED_NAME_SECTION_DATE)
  private OffsetDateTime sectionDate;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_STAY_DATE = "stayDate";
  @SerializedName(SERIALIZED_NAME_STAY_DATE)
  private OffsetDateTime stayDate;

  public static final String SERIALIZED_NAME_SUPREME_COURT = "supremeCourt";
  @SerializedName(SERIALIZED_NAME_SUPREME_COURT)
  private String supremeCourt;

  public static final String SERIALIZED_NAME_TERM = "term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public static final String SERIALIZED_NAME_TYPE_OF_ACTION = "typeOfAction";
  @SerializedName(SERIALIZED_NAME_TYPE_OF_ACTION)
  private String typeOfAction;

  public BarSourceDataDisciplinaryHistoryArrayInner() {
  }

  public BarSourceDataDisciplinaryHistoryArrayInner action(String action) {
    
    
    
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getAction() {
    return action;
  }


  public void setAction(String action) {
    
    
    
    this.action = action;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner caseNumber(String caseNumber) {
    
    
    
    
    this.caseNumber = caseNumber;
    return this;
  }

   /**
   * Get caseNumber
   * @return caseNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getCaseNumber() {
    return caseNumber;
  }


  public void setCaseNumber(String caseNumber) {
    
    
    
    this.caseNumber = caseNumber;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner complaint(String complaint) {
    
    
    
    
    this.complaint = complaint;
    return this;
  }

   /**
   * Get complaint
   * @return complaint
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getComplaint() {
    return complaint;
  }


  public void setComplaint(String complaint) {
    
    
    
    this.complaint = complaint;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner contactId(String contactId) {
    
    
    if (contactId != null && contactId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contactId. Length must be greater than or equal to 1.");
    }
    
    this.contactId = contactId;
    return this;
  }

   /**
   * Get contactId
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getContactId() {
    return contactId;
  }


  public void setContactId(String contactId) {
    
    
    if (contactId != null && contactId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for contactId. Length must be greater than or equal to 1.");
    }
    this.contactId = contactId;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner dateOfAction(OffsetDateTime dateOfAction) {
    
    
    
    
    this.dateOfAction = dateOfAction;
    return this;
  }

   /**
   * Get dateOfAction
   * @return dateOfAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getDateOfAction() {
    return dateOfAction;
  }


  public void setDateOfAction(OffsetDateTime dateOfAction) {
    
    
    
    this.dateOfAction = dateOfAction;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner definition(String definition) {
    
    
    
    
    this.definition = definition;
    return this;
  }

   /**
   * Get definition
   * @return definition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getDefinition() {
    return definition;
  }


  public void setDefinition(String definition) {
    
    
    
    this.definition = definition;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner disciplinaryDecision(String disciplinaryDecision) {
    
    
    
    
    this.disciplinaryDecision = disciplinaryDecision;
    return this;
  }

   /**
   * Get disciplinaryDecision
   * @return disciplinaryDecision
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getDisciplinaryDecision() {
    return disciplinaryDecision;
  }


  public void setDisciplinaryDecision(String disciplinaryDecision) {
    
    
    
    this.disciplinaryDecision = disciplinaryDecision;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner entryDate(OffsetDateTime entryDate) {
    
    
    
    
    this.entryDate = entryDate;
    return this;
  }

   /**
   * Get entryDate
   * @return entryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getEntryDate() {
    return entryDate;
  }


  public void setEntryDate(OffsetDateTime entryDate) {
    
    
    
    this.entryDate = entryDate;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner information(String information) {
    
    
    
    
    this.information = information;
    return this;
  }

   /**
   * Get information
   * @return information
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getInformation() {
    return information;
  }


  public void setInformation(String information) {
    
    
    
    this.information = information;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner link(String link) {
    
    
    
    
    this.link = link;
    return this;
  }

   /**
   * Get link
   * @return link
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getLink() {
    return link;
  }


  public void setLink(String link) {
    
    
    
    this.link = link;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner note(String note) {
    
    
    
    
    this.note = note;
    return this;
  }

   /**
   * Get note
   * @return note
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getNote() {
    return note;
  }


  public void setNote(String note) {
    
    
    
    this.note = note;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner probationDate(OffsetDateTime probationDate) {
    
    
    
    
    this.probationDate = probationDate;
    return this;
  }

   /**
   * Get probationDate
   * @return probationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getProbationDate() {
    return probationDate;
  }


  public void setProbationDate(OffsetDateTime probationDate) {
    
    
    
    this.probationDate = probationDate;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner reinstatedDate(OffsetDateTime reinstatedDate) {
    
    
    
    
    this.reinstatedDate = reinstatedDate;
    return this;
  }

   /**
   * Get reinstatedDate
   * @return reinstatedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getReinstatedDate() {
    return reinstatedDate;
  }


  public void setReinstatedDate(OffsetDateTime reinstatedDate) {
    
    
    
    this.reinstatedDate = reinstatedDate;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner rule(String rule) {
    
    
    
    
    this.rule = rule;
    return this;
  }

   /**
   * Get rule
   * @return rule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getRule() {
    return rule;
  }


  public void setRule(String rule) {
    
    
    
    this.rule = rule;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner ruleNumber(String ruleNumber) {
    
    
    
    
    this.ruleNumber = ruleNumber;
    return this;
  }

   /**
   * Get ruleNumber
   * @return ruleNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getRuleNumber() {
    return ruleNumber;
  }


  public void setRuleNumber(String ruleNumber) {
    
    
    
    this.ruleNumber = ruleNumber;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner sectionDate(OffsetDateTime sectionDate) {
    
    
    
    
    this.sectionDate = sectionDate;
    return this;
  }

   /**
   * Get sectionDate
   * @return sectionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getSectionDate() {
    return sectionDate;
  }


  public void setSectionDate(OffsetDateTime sectionDate) {
    
    
    
    this.sectionDate = sectionDate;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner stayDate(OffsetDateTime stayDate) {
    
    
    
    
    this.stayDate = stayDate;
    return this;
  }

   /**
   * Get stayDate
   * @return stayDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getStayDate() {
    return stayDate;
  }


  public void setStayDate(OffsetDateTime stayDate) {
    
    
    
    this.stayDate = stayDate;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner supremeCourt(String supremeCourt) {
    
    
    
    
    this.supremeCourt = supremeCourt;
    return this;
  }

   /**
   * Get supremeCourt
   * @return supremeCourt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getSupremeCourt() {
    return supremeCourt;
  }


  public void setSupremeCourt(String supremeCourt) {
    
    
    
    this.supremeCourt = supremeCourt;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner term(String term) {
    
    
    
    
    this.term = term;
    return this;
  }

   /**
   * Get term
   * @return term
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getTerm() {
    return term;
  }


  public void setTerm(String term) {
    
    
    
    this.term = term;
  }


  public BarSourceDataDisciplinaryHistoryArrayInner typeOfAction(String typeOfAction) {
    
    
    
    
    this.typeOfAction = typeOfAction;
    return this;
  }

   /**
   * Get typeOfAction
   * @return typeOfAction
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getTypeOfAction() {
    return typeOfAction;
  }


  public void setTypeOfAction(String typeOfAction) {
    
    
    
    this.typeOfAction = typeOfAction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BarSourceDataDisciplinaryHistoryArrayInner instance itself
   */
  public BarSourceDataDisciplinaryHistoryArrayInner putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BarSourceDataDisciplinaryHistoryArrayInner barSourceDataDisciplinaryHistoryArrayInner = (BarSourceDataDisciplinaryHistoryArrayInner) o;
    return Objects.equals(this.action, barSourceDataDisciplinaryHistoryArrayInner.action) &&
        Objects.equals(this.caseNumber, barSourceDataDisciplinaryHistoryArrayInner.caseNumber) &&
        Objects.equals(this.complaint, barSourceDataDisciplinaryHistoryArrayInner.complaint) &&
        Objects.equals(this.contactId, barSourceDataDisciplinaryHistoryArrayInner.contactId) &&
        Objects.equals(this.dateOfAction, barSourceDataDisciplinaryHistoryArrayInner.dateOfAction) &&
        Objects.equals(this.definition, barSourceDataDisciplinaryHistoryArrayInner.definition) &&
        Objects.equals(this.disciplinaryDecision, barSourceDataDisciplinaryHistoryArrayInner.disciplinaryDecision) &&
        Objects.equals(this.entryDate, barSourceDataDisciplinaryHistoryArrayInner.entryDate) &&
        Objects.equals(this.information, barSourceDataDisciplinaryHistoryArrayInner.information) &&
        Objects.equals(this.link, barSourceDataDisciplinaryHistoryArrayInner.link) &&
        Objects.equals(this.note, barSourceDataDisciplinaryHistoryArrayInner.note) &&
        Objects.equals(this.probationDate, barSourceDataDisciplinaryHistoryArrayInner.probationDate) &&
        Objects.equals(this.reinstatedDate, barSourceDataDisciplinaryHistoryArrayInner.reinstatedDate) &&
        Objects.equals(this.rule, barSourceDataDisciplinaryHistoryArrayInner.rule) &&
        Objects.equals(this.ruleNumber, barSourceDataDisciplinaryHistoryArrayInner.ruleNumber) &&
        Objects.equals(this.sectionDate, barSourceDataDisciplinaryHistoryArrayInner.sectionDate) &&
        Objects.equals(this.status, barSourceDataDisciplinaryHistoryArrayInner.status) &&
        Objects.equals(this.stayDate, barSourceDataDisciplinaryHistoryArrayInner.stayDate) &&
        Objects.equals(this.supremeCourt, barSourceDataDisciplinaryHistoryArrayInner.supremeCourt) &&
        Objects.equals(this.term, barSourceDataDisciplinaryHistoryArrayInner.term) &&
        Objects.equals(this.typeOfAction, barSourceDataDisciplinaryHistoryArrayInner.typeOfAction)&&
        Objects.equals(this.additionalProperties, barSourceDataDisciplinaryHistoryArrayInner.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, caseNumber, complaint, contactId, dateOfAction, definition, disciplinaryDecision, entryDate, information, link, note, probationDate, reinstatedDate, rule, ruleNumber, sectionDate, status, stayDate, supremeCourt, term, typeOfAction, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BarSourceDataDisciplinaryHistoryArrayInner {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    caseNumber: ").append(toIndentedString(caseNumber)).append("\n");
    sb.append("    complaint: ").append(toIndentedString(complaint)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    dateOfAction: ").append(toIndentedString(dateOfAction)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    disciplinaryDecision: ").append(toIndentedString(disciplinaryDecision)).append("\n");
    sb.append("    entryDate: ").append(toIndentedString(entryDate)).append("\n");
    sb.append("    information: ").append(toIndentedString(information)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    probationDate: ").append(toIndentedString(probationDate)).append("\n");
    sb.append("    reinstatedDate: ").append(toIndentedString(reinstatedDate)).append("\n");
    sb.append("    rule: ").append(toIndentedString(rule)).append("\n");
    sb.append("    ruleNumber: ").append(toIndentedString(ruleNumber)).append("\n");
    sb.append("    sectionDate: ").append(toIndentedString(sectionDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    stayDate: ").append(toIndentedString(stayDate)).append("\n");
    sb.append("    supremeCourt: ").append(toIndentedString(supremeCourt)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    typeOfAction: ").append(toIndentedString(typeOfAction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("caseNumber");
    openapiFields.add("complaint");
    openapiFields.add("contactId");
    openapiFields.add("dateOfAction");
    openapiFields.add("definition");
    openapiFields.add("disciplinaryDecision");
    openapiFields.add("entryDate");
    openapiFields.add("information");
    openapiFields.add("link");
    openapiFields.add("note");
    openapiFields.add("probationDate");
    openapiFields.add("reinstatedDate");
    openapiFields.add("rule");
    openapiFields.add("ruleNumber");
    openapiFields.add("sectionDate");
    openapiFields.add("status");
    openapiFields.add("stayDate");
    openapiFields.add("supremeCourt");
    openapiFields.add("term");
    openapiFields.add("typeOfAction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("caseNumber");
    openapiRequiredFields.add("complaint");
    openapiRequiredFields.add("contactId");
    openapiRequiredFields.add("dateOfAction");
    openapiRequiredFields.add("definition");
    openapiRequiredFields.add("disciplinaryDecision");
    openapiRequiredFields.add("entryDate");
    openapiRequiredFields.add("information");
    openapiRequiredFields.add("link");
    openapiRequiredFields.add("note");
    openapiRequiredFields.add("probationDate");
    openapiRequiredFields.add("reinstatedDate");
    openapiRequiredFields.add("rule");
    openapiRequiredFields.add("ruleNumber");
    openapiRequiredFields.add("sectionDate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("stayDate");
    openapiRequiredFields.add("supremeCourt");
    openapiRequiredFields.add("term");
    openapiRequiredFields.add("typeOfAction");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BarSourceDataDisciplinaryHistoryArrayInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BarSourceDataDisciplinaryHistoryArrayInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BarSourceDataDisciplinaryHistoryArrayInner is not found in the empty JSON string", BarSourceDataDisciplinaryHistoryArrayInner.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BarSourceDataDisciplinaryHistoryArrayInner.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("action").isJsonNull() && !jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      if (!jsonObj.get("caseNumber").isJsonNull() && !jsonObj.get("caseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseNumber").toString()));
      }
      if (!jsonObj.get("complaint").isJsonNull() && !jsonObj.get("complaint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complaint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complaint").toString()));
      }
      if (!jsonObj.get("contactId").isJsonNull() && !jsonObj.get("contactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactId").toString()));
      }
      if (!jsonObj.get("definition").isJsonNull() && !jsonObj.get("definition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `definition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("definition").toString()));
      }
      if (!jsonObj.get("disciplinaryDecision").isJsonNull() && !jsonObj.get("disciplinaryDecision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disciplinaryDecision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disciplinaryDecision").toString()));
      }
      if (!jsonObj.get("information").isJsonNull() && !jsonObj.get("information").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `information` to be a primitive type in the JSON string but got `%s`", jsonObj.get("information").toString()));
      }
      if (!jsonObj.get("link").isJsonNull() && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if (!jsonObj.get("note").isJsonNull() && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (!jsonObj.get("rule").isJsonNull() && !jsonObj.get("rule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rule").toString()));
      }
      if (!jsonObj.get("ruleNumber").isJsonNull() && !jsonObj.get("ruleNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleNumber").toString()));
      }
      if (!jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("supremeCourt").isJsonNull() && !jsonObj.get("supremeCourt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supremeCourt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supremeCourt").toString()));
      }
      if (!jsonObj.get("term").isJsonNull() && !jsonObj.get("term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("term").toString()));
      }
      if (!jsonObj.get("typeOfAction").isJsonNull() && !jsonObj.get("typeOfAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeOfAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeOfAction").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BarSourceDataDisciplinaryHistoryArrayInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BarSourceDataDisciplinaryHistoryArrayInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BarSourceDataDisciplinaryHistoryArrayInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BarSourceDataDisciplinaryHistoryArrayInner.class));

       return (TypeAdapter<T>) new TypeAdapter<BarSourceDataDisciplinaryHistoryArrayInner>() {
           @Override
           public void write(JsonWriter out, BarSourceDataDisciplinaryHistoryArrayInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BarSourceDataDisciplinaryHistoryArrayInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BarSourceDataDisciplinaryHistoryArrayInner instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BarSourceDataDisciplinaryHistoryArrayInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BarSourceDataDisciplinaryHistoryArrayInner
  * @throws IOException if the JSON string is invalid with respect to BarSourceDataDisciplinaryHistoryArrayInner
  */
  public static BarSourceDataDisciplinaryHistoryArrayInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BarSourceDataDisciplinaryHistoryArrayInner.class);
  }

 /**
  * Convert an instance of BarSourceDataDisciplinaryHistoryArrayInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

