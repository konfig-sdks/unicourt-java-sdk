/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AccessTokenResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccessTokenResponse {
  public static final String SERIALIZED_NAME_ACCESS_TOKEN = "accessToken";
  @SerializedName(SERIALIZED_NAME_ACCESS_TOKEN)
  private String accessToken;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "AccessTokenResponse";

  public static final String SERIALIZED_NAME_TOKEN_ID = "tokenId";
  @SerializedName(SERIALIZED_NAME_TOKEN_ID)
  private String tokenId;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "tokenType";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;

  public AccessTokenResponse() {
  }

  public AccessTokenResponse accessToken(String accessToken) {
    
    
    if (accessToken != null && accessToken.length() < 700) {
      throw new IllegalArgumentException("Invalid value for accessToken. Length must be greater than or equal to 700.");
    }
    
    this.accessToken = accessToken;
    return this;
  }

   /**
   * Access token for API.
   * @return accessToken
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "eyJhbG44ciOiJS111UzI1NiIsInR5cCI6IkpXVCIsImtpZCI6I11111ktfX2NsOVhLUDJYMmtBVGRBSVkzQiJ9.eyJodHRwczovL3VuaWNvdXJ0LmNvbS9jbGllbnRfaWQiOiIxbWVOcHRBeXJUUFN2UjBSbVVxdEh2QVNoeDVqVmI2RCIsImh0dHBzOi8vdW5pY291cnQuY29tL2NsaWVudF9uYW1lIjoiYXBvbGxvIiwiaHR0cHM6Ly91bmljb3VydC5jb20vYWNjb3VudF9pZCI6IkFQTzAwMDBBMSIsImlzcyI6Imh0dHBzOi8vdGVzdHVjLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiIxbWVOcHRBeXJUUFN2UjBSbVVxdEh2QVNoeDVqVmI2REBjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly85dGxsbG1oZnhkLmV4ZWN1dGUtYXBpLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tIiwiaWF0IjoxNjIwNzA4NjAzLCJleHAiOjE2MjA3OTUwMDMsImF6cCI6IjFtZU5wdEF5clRQU3ZSMFJtVXF0SHZBU2h4NWpWYjZEIiwic2NvcGUiOiJleHRyYSIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.TjhNCPvt5bRDW5Kp9OW9-epch9ggoYiK-85f6l7illLtKMeEoD3myllyIXo_ltZv7TDbmSg9tmHZ2V4mPiGvn-Fc9MwGXyUN7LjFF0tpnwysqgTVq_pvnCNe-xLOR_clmkl881QlUfXwB0R0PjhU00_c63ImSISC1Tv4GfawYLQwBy1Q22-rqB4ZsrSszRMo0rTOCu4d7KVc9MgcjA_idz45E9BxR2UbZ6lAbAXp-C1AqR8Dm40BHeUy5oJFFpzoP46sqTcdQHzwuMX5AhK6uGugVqlHpUbwRy9SDCxCldArz5j0Ab_aaZ7zIbuqgE-XueSlug_n2MenElUAeBKe-g", required = true, value = "Access token for API.")

  public String getAccessToken() {
    return accessToken;
  }


  public void setAccessToken(String accessToken) {
    
    
    if (accessToken != null && accessToken.length() < 700) {
      throw new IllegalArgumentException("Invalid value for accessToken. Length must be greater than or equal to 700.");
    }
    this.accessToken = accessToken;
  }


  public AccessTokenResponse _object(String _object) {
    
    
    if (_object != null && _object.length() < 19) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 19.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object.
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AccessTokenResponse", required = true, value = "Name of the object.")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 19) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 19.");
    }
    this._object = _object;
  }


  public AccessTokenResponse tokenId(String tokenId) {
    
    
    if (tokenId != null && tokenId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for tokenId. Length must be greater than or equal to 18.");
    }
    
    this.tokenId = tokenId;
    return this;
  }

   /**
   * Unique Id for the access token.
   * @return tokenId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "TKID384a057WFC3Dp3", required = true, value = "Unique Id for the access token.")

  public String getTokenId() {
    return tokenId;
  }


  public void setTokenId(String tokenId) {
    
    
    if (tokenId != null && tokenId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for tokenId. Length must be greater than or equal to 18.");
    }
    this.tokenId = tokenId;
  }


  public AccessTokenResponse tokenType(String tokenType) {
    
    
    if (tokenType != null && tokenType.length() < 6) {
      throw new IllegalArgumentException("Invalid value for tokenType. Length must be greater than or equal to 6.");
    }
    
    this.tokenType = tokenType;
    return this;
  }

   /**
   * Token type.
   * @return tokenType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Bearer", required = true, value = "Token type.")

  public String getTokenType() {
    return tokenType;
  }


  public void setTokenType(String tokenType) {
    
    
    if (tokenType != null && tokenType.length() < 6) {
      throw new IllegalArgumentException("Invalid value for tokenType. Length must be greater than or equal to 6.");
    }
    this.tokenType = tokenType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccessTokenResponse instance itself
   */
  public AccessTokenResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessTokenResponse accessTokenResponse = (AccessTokenResponse) o;
    return Objects.equals(this.accessToken, accessTokenResponse.accessToken) &&
        Objects.equals(this._object, accessTokenResponse._object) &&
        Objects.equals(this.tokenId, accessTokenResponse.tokenId) &&
        Objects.equals(this.tokenType, accessTokenResponse.tokenType)&&
        Objects.equals(this.additionalProperties, accessTokenResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessToken, _object, tokenId, tokenType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessTokenResponse {\n");
    sb.append("    accessToken: ").append(toIndentedString(accessToken)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessToken");
    openapiFields.add("object");
    openapiFields.add("tokenId");
    openapiFields.add("tokenType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessToken");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("tokenId");
    openapiRequiredFields.add("tokenType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccessTokenResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccessTokenResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessTokenResponse is not found in the empty JSON string", AccessTokenResponse.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccessTokenResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("accessToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessToken").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("tokenId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenId").toString()));
      }
      if (!jsonObj.get("tokenType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tokenType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tokenType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessTokenResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessTokenResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessTokenResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessTokenResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessTokenResponse>() {
           @Override
           public void write(JsonWriter out, AccessTokenResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessTokenResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccessTokenResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccessTokenResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccessTokenResponse
  * @throws IOException if the JSON string is invalid with respect to AccessTokenResponse
  */
  public static AccessTokenResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessTokenResponse.class);
  }

 /**
  * Convert an instance of AccessTokenResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

