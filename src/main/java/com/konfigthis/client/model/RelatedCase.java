/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CaseRelationshipType;
import com.konfigthis.client.model.SourceStructuredData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RelatedCase
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RelatedCase {
  public static final String SERIALIZED_NAME_ADDITIONAL_SOURCE_DATA = "additionalSourceData";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_SOURCE_DATA)
  private SourceStructuredData additionalSourceData;

  public static final String SERIALIZED_NAME_CASE_A_P_I = "caseAPI";
  @SerializedName(SERIALIZED_NAME_CASE_A_P_I)
  private String caseAPI;

  public static final String SERIALIZED_NAME_CASE_ID = "caseId";
  @SerializedName(SERIALIZED_NAME_CASE_ID)
  private String caseId;

  public static final String SERIALIZED_NAME_CASE_NAME = "caseName";
  @SerializedName(SERIALIZED_NAME_CASE_NAME)
  private String caseName;

  public static final String SERIALIZED_NAME_CASE_NUMBER = "caseNumber";
  @SerializedName(SERIALIZED_NAME_CASE_NUMBER)
  private String caseNumber;

  public static final String SERIALIZED_NAME_CASE_RELATIONSHIP_TYPE = "caseRelationshipType";
  @SerializedName(SERIALIZED_NAME_CASE_RELATIONSHIP_TYPE)
  private CaseRelationshipType caseRelationshipType;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "isVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "RelatedCase";

  public static final String SERIALIZED_NAME_SOURCE_CASE_RELATIONSHIP_TYPE = "sourceCaseRelationshipType";
  @SerializedName(SERIALIZED_NAME_SOURCE_CASE_RELATIONSHIP_TYPE)
  private String sourceCaseRelationshipType;

  public RelatedCase() {
  }

  public RelatedCase additionalSourceData(SourceStructuredData additionalSourceData) {
    
    
    
    
    this.additionalSourceData = additionalSourceData;
    return this;
  }

   /**
   * Get additionalSourceData
   * @return additionalSourceData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public SourceStructuredData getAdditionalSourceData() {
    return additionalSourceData;
  }


  public void setAdditionalSourceData(SourceStructuredData additionalSourceData) {
    
    
    
    this.additionalSourceData = additionalSourceData;
  }


  public RelatedCase caseAPI(String caseAPI) {
    
    
    
    
    this.caseAPI = caseAPI;
    return this;
  }

   /**
   * Link to the Case API of the current related case.
   * @return caseAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/", required = true, value = "Link to the Case API of the current related case.")

  public String getCaseAPI() {
    return caseAPI;
  }


  public void setCaseAPI(String caseAPI) {
    
    
    
    this.caseAPI = caseAPI;
  }


  public RelatedCase caseId(String caseId) {
    
    
    if (caseId != null && caseId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
    }
    
    this.caseId = caseId;
    return this;
  }

   /**
   * Case ID of the related Case. This can be null if this case in not found in our database. However the meta information of the related case will be present.
   * @return caseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CASEjr6533d15dc165", required = true, value = "Case ID of the related Case. This can be null if this case in not found in our database. However the meta information of the related case will be present.")

  public String getCaseId() {
    return caseId;
  }


  public void setCaseId(String caseId) {
    
    
    if (caseId != null && caseId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
    }
    this.caseId = caseId;
  }


  public RelatedCase caseName(String caseName) {
    
    
    
    
    this.caseName = caseName;
    return this;
  }

   /**
   * Case Name of the related Case.
   * @return caseName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Richard Jacob vs Johnson & Johnson", required = true, value = "Case Name of the related Case.")

  public String getCaseName() {
    return caseName;
  }


  public void setCaseName(String caseName) {
    
    
    
    this.caseName = caseName;
  }


  public RelatedCase caseNumber(String caseNumber) {
    
    
    if (caseNumber != null && caseNumber.length() < 3) {
      throw new IllegalArgumentException("Invalid value for caseNumber. Length must be greater than or equal to 3.");
    }
    
    this.caseNumber = caseNumber;
    return this;
  }

   /**
   * Case Number of the related Case.
   * @return caseNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CAC/3:19-cv-0001", required = true, value = "Case Number of the related Case.")

  public String getCaseNumber() {
    return caseNumber;
  }


  public void setCaseNumber(String caseNumber) {
    
    
    if (caseNumber != null && caseNumber.length() < 3) {
      throw new IllegalArgumentException("Invalid value for caseNumber. Length must be greater than or equal to 3.");
    }
    this.caseNumber = caseNumber;
  }


  public RelatedCase caseRelationshipType(CaseRelationshipType caseRelationshipType) {
    
    
    
    
    this.caseRelationshipType = caseRelationshipType;
    return this;
  }

   /**
   * Get caseRelationshipType
   * @return caseRelationshipType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CaseRelationshipType getCaseRelationshipType() {
    return caseRelationshipType;
  }


  public void setCaseRelationshipType(CaseRelationshipType caseRelationshipType) {
    
    
    
    this.caseRelationshipType = caseRelationshipType;
  }


  public RelatedCase isVisible(Boolean isVisible) {
    
    
    
    
    this.isVisible = isVisible;
    return this;
  }

   /**
   * This specifies if the related cases is still related to the parent case or not.
   * @return isVisible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "This specifies if the related cases is still related to the parent case or not.")

  public Boolean getIsVisible() {
    return isVisible;
  }


  public void setIsVisible(Boolean isVisible) {
    
    
    
    this.isVisible = isVisible;
  }


  public RelatedCase _object(String _object) {
    
    
    if (_object != null && _object.length() < 11) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 11.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "RelatedCase", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 11) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 11.");
    }
    this._object = _object;
  }


  public RelatedCase sourceCaseRelationshipType(String sourceCaseRelationshipType) {
    
    
    if (sourceCaseRelationshipType != null && sourceCaseRelationshipType.length() < 3) {
      throw new IllegalArgumentException("Invalid value for sourceCaseRelationshipType. Length must be greater than or equal to 3.");
    }
    
    this.sourceCaseRelationshipType = sourceCaseRelationshipType;
    return this;
  }

   /**
   * Case Relationship Type provided by court.
   * @return sourceCaseRelationshipType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PARENT CASE", required = true, value = "Case Relationship Type provided by court.")

  public String getSourceCaseRelationshipType() {
    return sourceCaseRelationshipType;
  }


  public void setSourceCaseRelationshipType(String sourceCaseRelationshipType) {
    
    
    if (sourceCaseRelationshipType != null && sourceCaseRelationshipType.length() < 3) {
      throw new IllegalArgumentException("Invalid value for sourceCaseRelationshipType. Length must be greater than or equal to 3.");
    }
    this.sourceCaseRelationshipType = sourceCaseRelationshipType;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RelatedCase instance itself
   */
  public RelatedCase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedCase relatedCase = (RelatedCase) o;
    return Objects.equals(this.additionalSourceData, relatedCase.additionalSourceData) &&
        Objects.equals(this.caseAPI, relatedCase.caseAPI) &&
        Objects.equals(this.caseId, relatedCase.caseId) &&
        Objects.equals(this.caseName, relatedCase.caseName) &&
        Objects.equals(this.caseNumber, relatedCase.caseNumber) &&
        Objects.equals(this.caseRelationshipType, relatedCase.caseRelationshipType) &&
        Objects.equals(this.isVisible, relatedCase.isVisible) &&
        Objects.equals(this._object, relatedCase._object) &&
        Objects.equals(this.sourceCaseRelationshipType, relatedCase.sourceCaseRelationshipType)&&
        Objects.equals(this.additionalProperties, relatedCase.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalSourceData, caseAPI, caseId, caseName, caseNumber, caseRelationshipType, isVisible, _object, sourceCaseRelationshipType, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedCase {\n");
    sb.append("    additionalSourceData: ").append(toIndentedString(additionalSourceData)).append("\n");
    sb.append("    caseAPI: ").append(toIndentedString(caseAPI)).append("\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    caseName: ").append(toIndentedString(caseName)).append("\n");
    sb.append("    caseNumber: ").append(toIndentedString(caseNumber)).append("\n");
    sb.append("    caseRelationshipType: ").append(toIndentedString(caseRelationshipType)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    sourceCaseRelationshipType: ").append(toIndentedString(sourceCaseRelationshipType)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalSourceData");
    openapiFields.add("caseAPI");
    openapiFields.add("caseId");
    openapiFields.add("caseName");
    openapiFields.add("caseNumber");
    openapiFields.add("caseRelationshipType");
    openapiFields.add("isVisible");
    openapiFields.add("object");
    openapiFields.add("sourceCaseRelationshipType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalSourceData");
    openapiRequiredFields.add("caseAPI");
    openapiRequiredFields.add("caseId");
    openapiRequiredFields.add("caseName");
    openapiRequiredFields.add("caseNumber");
    openapiRequiredFields.add("caseRelationshipType");
    openapiRequiredFields.add("isVisible");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("sourceCaseRelationshipType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RelatedCase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RelatedCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelatedCase is not found in the empty JSON string", RelatedCase.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RelatedCase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `additionalSourceData`
      SourceStructuredData.validateJsonObject(jsonObj.getAsJsonObject("additionalSourceData"));
      if (!jsonObj.get("caseAPI").isJsonNull() && !jsonObj.get("caseAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseAPI").toString()));
      }
      if (!jsonObj.get("caseId").isJsonNull() && !jsonObj.get("caseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseId").toString()));
      }
      if (!jsonObj.get("caseName").isJsonNull() && !jsonObj.get("caseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseName").toString()));
      }
      if (!jsonObj.get("caseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseNumber").toString()));
      }
      // validate the required field `caseRelationshipType`
      CaseRelationshipType.validateJsonObject(jsonObj.getAsJsonObject("caseRelationshipType"));
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("sourceCaseRelationshipType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCaseRelationshipType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCaseRelationshipType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelatedCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelatedCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelatedCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelatedCase.class));

       return (TypeAdapter<T>) new TypeAdapter<RelatedCase>() {
           @Override
           public void write(JsonWriter out, RelatedCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RelatedCase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RelatedCase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RelatedCase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RelatedCase
  * @throws IOException if the JSON string is invalid with respect to RelatedCase
  */
  public static RelatedCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelatedCase.class);
  }

 /**
  * Convert an instance of RelatedCase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

