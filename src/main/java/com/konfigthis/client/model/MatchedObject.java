/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * MatchedObject
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class MatchedObject {
  public static final String SERIALIZED_NAME_HIGHLIGHT_SNIPPET = "highlightSnippet";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHT_SNIPPET)
  private String highlightSnippet;

  public static final String SERIALIZED_NAME_MATCHED_OBJECT_A_P_I = "matchedObjectAPI";
  @SerializedName(SERIALIZED_NAME_MATCHED_OBJECT_A_P_I)
  private URI matchedObjectAPI;

  public static final String SERIALIZED_NAME_MATCHED_OBJECT_ATTRIBUTE = "matchedObjectAttribute";
  @SerializedName(SERIALIZED_NAME_MATCHED_OBJECT_ATTRIBUTE)
  private String matchedObjectAttribute;

  public static final String SERIALIZED_NAME_MATCHED_OBJECT_ID = "matchedObjectId";
  @SerializedName(SERIALIZED_NAME_MATCHED_OBJECT_ID)
  private String matchedObjectId;

  public static final String SERIALIZED_NAME_MATCHED_OBJECT_NAME = "matchedObjectName";
  @SerializedName(SERIALIZED_NAME_MATCHED_OBJECT_NAME)
  private String matchedObjectName;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "MatchedObject";

  public MatchedObject() {
  }

  public MatchedObject highlightSnippet(String highlightSnippet) {
    
    
    if (highlightSnippet != null && highlightSnippet.length() < 1) {
      throw new IllegalArgumentException("Invalid value for highlightSnippet. Length must be greater than or equal to 1.");
    }
    
    this.highlightSnippet = highlightSnippet;
    return this;
  }

   /**
   * Get highlightSnippet
   * @return highlightSnippet
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "<b>CASEic46ed4faeb9b8</b>", required = true, value = "")

  public String getHighlightSnippet() {
    return highlightSnippet;
  }


  public void setHighlightSnippet(String highlightSnippet) {
    
    
    if (highlightSnippet != null && highlightSnippet.length() < 1) {
      throw new IllegalArgumentException("Invalid value for highlightSnippet. Length must be greater than or equal to 1.");
    }
    this.highlightSnippet = highlightSnippet;
  }


  public MatchedObject matchedObjectAPI(URI matchedObjectAPI) {
    
    
    if (matchedObjectAPI != null && matchedObjectAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for matchedObjectAPI. Length must be greater than or equal to 1.");
    }
    
    this.matchedObjectAPI = matchedObjectAPI;
    return this;
  }

   /**
   * Get matchedObjectAPI
   * @return matchedObjectAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/case/CASEic46ed4faeb9b8", required = true, value = "")

  public URI getMatchedObjectAPI() {
    return matchedObjectAPI;
  }


  public void setMatchedObjectAPI(URI matchedObjectAPI) {
    
    
    if (matchedObjectAPI != null && matchedObjectAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for matchedObjectAPI. Length must be greater than or equal to 1.");
    }
    this.matchedObjectAPI = matchedObjectAPI;
  }


  public MatchedObject matchedObjectAttribute(String matchedObjectAttribute) {
    
    
    if (matchedObjectAttribute != null && matchedObjectAttribute.length() < 1) {
      throw new IllegalArgumentException("Invalid value for matchedObjectAttribute. Length must be greater than or equal to 1.");
    }
    
    this.matchedObjectAttribute = matchedObjectAttribute;
    return this;
  }

   /**
   * Get matchedObjectAttribute
   * @return matchedObjectAttribute
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "caseId", required = true, value = "")

  public String getMatchedObjectAttribute() {
    return matchedObjectAttribute;
  }


  public void setMatchedObjectAttribute(String matchedObjectAttribute) {
    
    
    if (matchedObjectAttribute != null && matchedObjectAttribute.length() < 1) {
      throw new IllegalArgumentException("Invalid value for matchedObjectAttribute. Length must be greater than or equal to 1.");
    }
    this.matchedObjectAttribute = matchedObjectAttribute;
  }


  public MatchedObject matchedObjectId(String matchedObjectId) {
    
    
    if (matchedObjectId != null && matchedObjectId.length() < 17) {
      throw new IllegalArgumentException("Invalid value for matchedObjectId. Length must be greater than or equal to 17.");
    }
    
    this.matchedObjectId = matchedObjectId;
    return this;
  }

   /**
   * Get matchedObjectId
   * @return matchedObjectId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CASEic46ed4faeb9b8", required = true, value = "")

  public String getMatchedObjectId() {
    return matchedObjectId;
  }


  public void setMatchedObjectId(String matchedObjectId) {
    
    
    if (matchedObjectId != null && matchedObjectId.length() < 17) {
      throw new IllegalArgumentException("Invalid value for matchedObjectId. Length must be greater than or equal to 17.");
    }
    this.matchedObjectId = matchedObjectId;
  }


  public MatchedObject matchedObjectName(String matchedObjectName) {
    
    
    if (matchedObjectName != null && matchedObjectName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for matchedObjectName. Length must be greater than or equal to 1.");
    }
    
    this.matchedObjectName = matchedObjectName;
    return this;
  }

   /**
   * Get matchedObjectName
   * @return matchedObjectName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Case", required = true, value = "")

  public String getMatchedObjectName() {
    return matchedObjectName;
  }


  public void setMatchedObjectName(String matchedObjectName) {
    
    
    if (matchedObjectName != null && matchedObjectName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for matchedObjectName. Length must be greater than or equal to 1.");
    }
    this.matchedObjectName = matchedObjectName;
  }


  public MatchedObject _object(String _object) {
    
    
    if (_object != null && _object.length() < 13) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 13.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "MatchedObject", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 13) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 13.");
    }
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the MatchedObject instance itself
   */
  public MatchedObject putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchedObject matchedObject = (MatchedObject) o;
    return Objects.equals(this.highlightSnippet, matchedObject.highlightSnippet) &&
        Objects.equals(this.matchedObjectAPI, matchedObject.matchedObjectAPI) &&
        Objects.equals(this.matchedObjectAttribute, matchedObject.matchedObjectAttribute) &&
        Objects.equals(this.matchedObjectId, matchedObject.matchedObjectId) &&
        Objects.equals(this.matchedObjectName, matchedObject.matchedObjectName) &&
        Objects.equals(this._object, matchedObject._object)&&
        Objects.equals(this.additionalProperties, matchedObject.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(highlightSnippet, matchedObjectAPI, matchedObjectAttribute, matchedObjectId, matchedObjectName, _object, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchedObject {\n");
    sb.append("    highlightSnippet: ").append(toIndentedString(highlightSnippet)).append("\n");
    sb.append("    matchedObjectAPI: ").append(toIndentedString(matchedObjectAPI)).append("\n");
    sb.append("    matchedObjectAttribute: ").append(toIndentedString(matchedObjectAttribute)).append("\n");
    sb.append("    matchedObjectId: ").append(toIndentedString(matchedObjectId)).append("\n");
    sb.append("    matchedObjectName: ").append(toIndentedString(matchedObjectName)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("highlightSnippet");
    openapiFields.add("matchedObjectAPI");
    openapiFields.add("matchedObjectAttribute");
    openapiFields.add("matchedObjectId");
    openapiFields.add("matchedObjectName");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("highlightSnippet");
    openapiRequiredFields.add("matchedObjectAPI");
    openapiRequiredFields.add("matchedObjectAttribute");
    openapiRequiredFields.add("matchedObjectId");
    openapiRequiredFields.add("matchedObjectName");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MatchedObject
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MatchedObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchedObject is not found in the empty JSON string", MatchedObject.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MatchedObject.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("highlightSnippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlightSnippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlightSnippet").toString()));
      }
      if (!jsonObj.get("matchedObjectAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedObjectAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchedObjectAPI").toString()));
      }
      if (!jsonObj.get("matchedObjectAttribute").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedObjectAttribute` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchedObjectAttribute").toString()));
      }
      if (!jsonObj.get("matchedObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchedObjectId").toString()));
      }
      if (!jsonObj.get("matchedObjectName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `matchedObjectName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("matchedObjectName").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchedObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchedObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchedObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchedObject.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchedObject>() {
           @Override
           public void write(JsonWriter out, MatchedObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchedObject read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             MatchedObject instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MatchedObject given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MatchedObject
  * @throws IOException if the JSON string is invalid with respect to MatchedObject
  */
  public static MatchedObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchedObject.class);
  }

 /**
  * Convert an instance of MatchedObject to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

