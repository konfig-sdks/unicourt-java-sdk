/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NormCorporateGroup;
import com.konfigthis.client.model.NormOrganizationTickerArrayInner;
import com.konfigthis.client.model.SOSData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NormOrganization
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NormOrganization {
  public static final String SERIALIZED_NAME_CIK = "cik";
  @SerializedName(SERIALIZED_NAME_CIK)
  private String cik;

  public static final String SERIALIZED_NAME_IS_INVOLVED_IN_LITIGATION = "isInvolvedInLitigation";
  @SerializedName(SERIALIZED_NAME_IS_INVOLVED_IN_LITIGATION)
  private Boolean isInvolvedInLitigation;

  public static final String SERIALIZED_NAME_LEI = "lei";
  @SerializedName(SERIALIZED_NAME_LEI)
  private String lei;

  public static final String SERIALIZED_NAME_NAICS = "naics";
  @SerializedName(SERIALIZED_NAME_NAICS)
  private String naics;

  public static final String SERIALIZED_NAME_NAICS_DESCRIPTION = "naicsDescription";
  @SerializedName(SERIALIZED_NAME_NAICS_DESCRIPTION)
  private String naicsDescription;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORM_CORPORATE_GROUP_ARRAY = "normCorporateGroupArray";
  @SerializedName(SERIALIZED_NAME_NORM_CORPORATE_GROUP_ARRAY)
  private List<NormCorporateGroup> normCorporateGroupArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_NORM_ORGANIZATION_ID = "normOrganizationId";
  @SerializedName(SERIALIZED_NAME_NORM_ORGANIZATION_ID)
  private String normOrganizationId;

  public static final String SERIALIZED_NAME_NORM_PARTY_A_P_I = "normPartyAPI";
  @SerializedName(SERIALIZED_NAME_NORM_PARTY_A_P_I)
  private URI normPartyAPI;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "NormOrganization";

  /**
   * Gets or Sets organizationType
   */
  @JsonAdapter(OrganizationTypeEnum.Adapter.class)
 public enum OrganizationTypeEnum {
    BUSINESS("Business"),
    
    GOVERNMENTAGENCY("GovernmentAgency");

    private String value;

    OrganizationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OrganizationTypeEnum fromValue(String value) {
      for (OrganizationTypeEnum b : OrganizationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OrganizationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OrganizationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OrganizationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OrganizationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ORGANIZATION_TYPE = "organizationType";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_TYPE)
  private OrganizationTypeEnum organizationType;

  public static final String SERIALIZED_NAME_SIC = "sic";
  @SerializedName(SERIALIZED_NAME_SIC)
  private String sic;

  public static final String SERIALIZED_NAME_SIC_DESCRIPTION = "sicDescription";
  @SerializedName(SERIALIZED_NAME_SIC_DESCRIPTION)
  private String sicDescription;

  public static final String SERIALIZED_NAME_SOS_DATA_ARRAY = "sosDataArray";
  @SerializedName(SERIALIZED_NAME_SOS_DATA_ARRAY)
  private List<SOSData> sosDataArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_TICKER_ARRAY = "tickerArray";
  @SerializedName(SERIALIZED_NAME_TICKER_ARRAY)
  private List<NormOrganizationTickerArrayInner> tickerArray = new ArrayList<>();

  public NormOrganization() {
  }

  public NormOrganization cik(String cik) {
    
    
    
    
    this.cik = cik;
    return this;
  }

   /**
   * Get cik
   * @return cik
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getCik() {
    return cik;
  }


  public void setCik(String cik) {
    
    
    
    this.cik = cik;
  }


  public NormOrganization isInvolvedInLitigation(Boolean isInvolvedInLitigation) {
    
    
    
    
    this.isInvolvedInLitigation = isInvolvedInLitigation;
    return this;
  }

   /**
   * Get isInvolvedInLitigation
   * @return isInvolvedInLitigation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getIsInvolvedInLitigation() {
    return isInvolvedInLitigation;
  }


  public void setIsInvolvedInLitigation(Boolean isInvolvedInLitigation) {
    
    
    
    this.isInvolvedInLitigation = isInvolvedInLitigation;
  }


  public NormOrganization lei(String lei) {
    
    
    
    
    this.lei = lei;
    return this;
  }

   /**
   * Get lei
   * @return lei
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getLei() {
    return lei;
  }


  public void setLei(String lei) {
    
    
    
    this.lei = lei;
  }


  public NormOrganization naics(String naics) {
    
    
    
    
    this.naics = naics;
    return this;
  }

   /**
   * Get naics
   * @return naics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getNaics() {
    return naics;
  }


  public void setNaics(String naics) {
    
    
    
    this.naics = naics;
  }


  public NormOrganization naicsDescription(String naicsDescription) {
    
    
    
    
    this.naicsDescription = naicsDescription;
    return this;
  }

   /**
   * Get naicsDescription
   * @return naicsDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getNaicsDescription() {
    return naicsDescription;
  }


  public void setNaicsDescription(String naicsDescription) {
    
    
    
    this.naicsDescription = naicsDescription;
  }


  public NormOrganization name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public NormOrganization normCorporateGroupArray(List<NormCorporateGroup> normCorporateGroupArray) {
    
    
    
    
    this.normCorporateGroupArray = normCorporateGroupArray;
    return this;
  }

  public NormOrganization addNormCorporateGroupArrayItem(NormCorporateGroup normCorporateGroupArrayItem) {
    this.normCorporateGroupArray.add(normCorporateGroupArrayItem);
    return this;
  }

   /**
   * Get normCorporateGroupArray
   * @return normCorporateGroupArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<NormCorporateGroup> getNormCorporateGroupArray() {
    return normCorporateGroupArray;
  }


  public void setNormCorporateGroupArray(List<NormCorporateGroup> normCorporateGroupArray) {
    
    
    
    this.normCorporateGroupArray = normCorporateGroupArray;
  }


  public NormOrganization normOrganizationId(String normOrganizationId) {
    
    
    if (normOrganizationId != null && normOrganizationId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normOrganizationId. Length must be greater than or equal to 18.");
    }
    
    this.normOrganizationId = normOrganizationId;
    return this;
  }

   /**
   * Get normOrganizationId
   * @return normOrganizationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNormOrganizationId() {
    return normOrganizationId;
  }


  public void setNormOrganizationId(String normOrganizationId) {
    
    
    if (normOrganizationId != null && normOrganizationId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normOrganizationId. Length must be greater than or equal to 18.");
    }
    this.normOrganizationId = normOrganizationId;
  }


  public NormOrganization normPartyAPI(URI normPartyAPI) {
    
    
    
    
    this.normPartyAPI = normPartyAPI;
    return this;
  }

   /**
   * Get normPartyAPI
   * @return normPartyAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getNormPartyAPI() {
    return normPartyAPI;
  }


  public void setNormPartyAPI(URI normPartyAPI) {
    
    
    
    this.normPartyAPI = normPartyAPI;
  }


  public NormOrganization _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NormOrganization", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public NormOrganization organizationType(OrganizationTypeEnum organizationType) {
    
    
    
    
    this.organizationType = organizationType;
    return this;
  }

   /**
   * Get organizationType
   * @return organizationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OrganizationTypeEnum getOrganizationType() {
    return organizationType;
  }


  public void setOrganizationType(OrganizationTypeEnum organizationType) {
    
    
    
    this.organizationType = organizationType;
  }


  public NormOrganization sic(String sic) {
    
    
    
    
    this.sic = sic;
    return this;
  }

   /**
   * Get sic
   * @return sic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getSic() {
    return sic;
  }


  public void setSic(String sic) {
    
    
    
    this.sic = sic;
  }


  public NormOrganization sicDescription(String sicDescription) {
    
    
    
    
    this.sicDescription = sicDescription;
    return this;
  }

   /**
   * Get sicDescription
   * @return sicDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getSicDescription() {
    return sicDescription;
  }


  public void setSicDescription(String sicDescription) {
    
    
    
    this.sicDescription = sicDescription;
  }


  public NormOrganization sosDataArray(List<SOSData> sosDataArray) {
    
    
    
    
    this.sosDataArray = sosDataArray;
    return this;
  }

  public NormOrganization addSosDataArrayItem(SOSData sosDataArrayItem) {
    this.sosDataArray.add(sosDataArrayItem);
    return this;
  }

   /**
   * Get sosDataArray
   * @return sosDataArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<SOSData> getSosDataArray() {
    return sosDataArray;
  }


  public void setSosDataArray(List<SOSData> sosDataArray) {
    
    
    
    this.sosDataArray = sosDataArray;
  }


  public NormOrganization tickerArray(List<NormOrganizationTickerArrayInner> tickerArray) {
    
    
    
    
    this.tickerArray = tickerArray;
    return this;
  }

  public NormOrganization addTickerArrayItem(NormOrganizationTickerArrayInner tickerArrayItem) {
    this.tickerArray.add(tickerArrayItem);
    return this;
  }

   /**
   * Get tickerArray
   * @return tickerArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<NormOrganizationTickerArrayInner> getTickerArray() {
    return tickerArray;
  }


  public void setTickerArray(List<NormOrganizationTickerArrayInner> tickerArray) {
    
    
    
    this.tickerArray = tickerArray;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NormOrganization instance itself
   */
  public NormOrganization putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NormOrganization normOrganization = (NormOrganization) o;
    return Objects.equals(this.cik, normOrganization.cik) &&
        Objects.equals(this.isInvolvedInLitigation, normOrganization.isInvolvedInLitigation) &&
        Objects.equals(this.lei, normOrganization.lei) &&
        Objects.equals(this.naics, normOrganization.naics) &&
        Objects.equals(this.naicsDescription, normOrganization.naicsDescription) &&
        Objects.equals(this.name, normOrganization.name) &&
        Objects.equals(this.normCorporateGroupArray, normOrganization.normCorporateGroupArray) &&
        Objects.equals(this.normOrganizationId, normOrganization.normOrganizationId) &&
        Objects.equals(this.normPartyAPI, normOrganization.normPartyAPI) &&
        Objects.equals(this._object, normOrganization._object) &&
        Objects.equals(this.organizationType, normOrganization.organizationType) &&
        Objects.equals(this.sic, normOrganization.sic) &&
        Objects.equals(this.sicDescription, normOrganization.sicDescription) &&
        Objects.equals(this.sosDataArray, normOrganization.sosDataArray) &&
        Objects.equals(this.tickerArray, normOrganization.tickerArray)&&
        Objects.equals(this.additionalProperties, normOrganization.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cik, isInvolvedInLitigation, lei, naics, naicsDescription, name, normCorporateGroupArray, normOrganizationId, normPartyAPI, _object, organizationType, sic, sicDescription, sosDataArray, tickerArray, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormOrganization {\n");
    sb.append("    cik: ").append(toIndentedString(cik)).append("\n");
    sb.append("    isInvolvedInLitigation: ").append(toIndentedString(isInvolvedInLitigation)).append("\n");
    sb.append("    lei: ").append(toIndentedString(lei)).append("\n");
    sb.append("    naics: ").append(toIndentedString(naics)).append("\n");
    sb.append("    naicsDescription: ").append(toIndentedString(naicsDescription)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normCorporateGroupArray: ").append(toIndentedString(normCorporateGroupArray)).append("\n");
    sb.append("    normOrganizationId: ").append(toIndentedString(normOrganizationId)).append("\n");
    sb.append("    normPartyAPI: ").append(toIndentedString(normPartyAPI)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    organizationType: ").append(toIndentedString(organizationType)).append("\n");
    sb.append("    sic: ").append(toIndentedString(sic)).append("\n");
    sb.append("    sicDescription: ").append(toIndentedString(sicDescription)).append("\n");
    sb.append("    sosDataArray: ").append(toIndentedString(sosDataArray)).append("\n");
    sb.append("    tickerArray: ").append(toIndentedString(tickerArray)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cik");
    openapiFields.add("isInvolvedInLitigation");
    openapiFields.add("lei");
    openapiFields.add("naics");
    openapiFields.add("naicsDescription");
    openapiFields.add("name");
    openapiFields.add("normCorporateGroupArray");
    openapiFields.add("normOrganizationId");
    openapiFields.add("normPartyAPI");
    openapiFields.add("object");
    openapiFields.add("organizationType");
    openapiFields.add("sic");
    openapiFields.add("sicDescription");
    openapiFields.add("sosDataArray");
    openapiFields.add("tickerArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("cik");
    openapiRequiredFields.add("isInvolvedInLitigation");
    openapiRequiredFields.add("lei");
    openapiRequiredFields.add("naics");
    openapiRequiredFields.add("naicsDescription");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("normCorporateGroupArray");
    openapiRequiredFields.add("normOrganizationId");
    openapiRequiredFields.add("normPartyAPI");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("organizationType");
    openapiRequiredFields.add("sic");
    openapiRequiredFields.add("sicDescription");
    openapiRequiredFields.add("sosDataArray");
    openapiRequiredFields.add("tickerArray");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NormOrganization
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NormOrganization.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NormOrganization is not found in the empty JSON string", NormOrganization.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NormOrganization.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("cik").isJsonNull() && !jsonObj.get("cik").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cik` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cik").toString()));
      }
      if (!jsonObj.get("lei").isJsonNull() && !jsonObj.get("lei").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lei` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lei").toString()));
      }
      if (!jsonObj.get("naics").isJsonNull() && !jsonObj.get("naics").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naics` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naics").toString()));
      }
      if (!jsonObj.get("naicsDescription").isJsonNull() && !jsonObj.get("naicsDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `naicsDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("naicsDescription").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("normCorporateGroupArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `normCorporateGroupArray` to be an array in the JSON string but got `%s`", jsonObj.get("normCorporateGroupArray").toString()));
      }

      JsonArray jsonArraynormCorporateGroupArray = jsonObj.getAsJsonArray("normCorporateGroupArray");
      // validate the required field `normCorporateGroupArray` (array)
      for (int i = 0; i < jsonArraynormCorporateGroupArray.size(); i++) {
        NormCorporateGroup.validateJsonObject(jsonArraynormCorporateGroupArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("normOrganizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normOrganizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normOrganizationId").toString()));
      }
      if (!jsonObj.get("normPartyAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normPartyAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normPartyAPI").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("organizationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationType").toString()));
      }
      if (!jsonObj.get("sic").isJsonNull() && !jsonObj.get("sic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sic").toString()));
      }
      if (!jsonObj.get("sicDescription").isJsonNull() && !jsonObj.get("sicDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sicDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sicDescription").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sosDataArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sosDataArray` to be an array in the JSON string but got `%s`", jsonObj.get("sosDataArray").toString()));
      }

      JsonArray jsonArraysosDataArray = jsonObj.getAsJsonArray("sosDataArray");
      // validate the required field `sosDataArray` (array)
      for (int i = 0; i < jsonArraysosDataArray.size(); i++) {
        SOSData.validateJsonObject(jsonArraysosDataArray.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("tickerArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tickerArray` to be an array in the JSON string but got `%s`", jsonObj.get("tickerArray").toString()));
      }

      JsonArray jsonArraytickerArray = jsonObj.getAsJsonArray("tickerArray");
      // validate the required field `tickerArray` (array)
      for (int i = 0; i < jsonArraytickerArray.size(); i++) {
        NormOrganizationTickerArrayInner.validateJsonObject(jsonArraytickerArray.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NormOrganization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NormOrganization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NormOrganization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NormOrganization.class));

       return (TypeAdapter<T>) new TypeAdapter<NormOrganization>() {
           @Override
           public void write(JsonWriter out, NormOrganization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NormOrganization read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NormOrganization instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NormOrganization given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NormOrganization
  * @throws IOException if the JSON string is invalid with respect to NormOrganization
  */
  public static NormOrganization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NormOrganization.class);
  }

 /**
  * Convert an instance of NormOrganization to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

