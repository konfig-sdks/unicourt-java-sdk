/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PossibleNormPartyScoreConstituents
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PossibleNormPartyScoreConstituents {
  /**
   * Gets or Sets address
   */
  @JsonAdapter(AddressEnum.Adapter.class)
 public enum AddressEnum {
    MATCHED("Matched"),
    
    MISMATCHED("Mismatched"),
    
    NOT_PROVIDED_BY_DATA_SOURCE("Not_Provided_By_Data_Source");

    private String value;

    AddressEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AddressEnum fromValue(String value) {
      for (AddressEnum b : AddressEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AddressEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AddressEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AddressEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AddressEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private AddressEnum address;

  /**
   * Gets or Sets email
   */
  @JsonAdapter(EmailEnum.Adapter.class)
 public enum EmailEnum {
    MATCHED("Matched"),
    
    MISMATCHED("Mismatched"),
    
    NOT_PROVIDED_BY_DATA_SOURCE("Not_Provided_By_Data_Source");

    private String value;

    EmailEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmailEnum fromValue(String value) {
      for (EmailEnum b : EmailEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmailEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmailEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmailEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmailEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private EmailEnum email;

  public static final String SERIALIZED_NAME_NAME_SIMILARITY_SCORE = "nameSimilarityScore";
  @SerializedName(SERIALIZED_NAME_NAME_SIMILARITY_SCORE)
  private Float nameSimilarityScore;

  public static final String SERIALIZED_NAME_OTHER_POTENTIAL_NORM_PARTIES = "otherPotentialNormParties";
  @SerializedName(SERIALIZED_NAME_OTHER_POTENTIAL_NORM_PARTIES)
  private Integer otherPotentialNormParties;

  /**
   * Gets or Sets phone
   */
  @JsonAdapter(PhoneEnum.Adapter.class)
 public enum PhoneEnum {
    MATCHED("Matched"),
    
    MISMATCHED("Mismatched"),
    
    NOT_PROVIDED_BY_DATA_SOURCE("Not_Provided_By_Data_Source");

    private String value;

    PhoneEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneEnum fromValue(String value) {
      for (PhoneEnum b : PhoneEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private PhoneEnum phone;

  /**
   * Gets or Sets secretaryOfStateId
   */
  @JsonAdapter(SecretaryOfStateIdEnum.Adapter.class)
 public enum SecretaryOfStateIdEnum {
    MATCHED("Matched"),
    
    MISMATCHED("Mismatched"),
    
    NOT_PROVIDED_BY_DATA_SOURCE("Not_Provided_By_Data_Source");

    private String value;

    SecretaryOfStateIdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SecretaryOfStateIdEnum fromValue(String value) {
      for (SecretaryOfStateIdEnum b : SecretaryOfStateIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SecretaryOfStateIdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SecretaryOfStateIdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SecretaryOfStateIdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SecretaryOfStateIdEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SECRETARY_OF_STATE_ID = "secretaryOfStateId";
  @SerializedName(SERIALIZED_NAME_SECRETARY_OF_STATE_ID)
  private SecretaryOfStateIdEnum secretaryOfStateId;

  public PossibleNormPartyScoreConstituents() {
  }

  public PossibleNormPartyScoreConstituents address(AddressEnum address) {
    
    
    
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public AddressEnum getAddress() {
    return address;
  }


  public void setAddress(AddressEnum address) {
    
    
    
    this.address = address;
  }


  public PossibleNormPartyScoreConstituents email(EmailEnum email) {
    
    
    
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public EmailEnum getEmail() {
    return email;
  }


  public void setEmail(EmailEnum email) {
    
    
    
    this.email = email;
  }


  public PossibleNormPartyScoreConstituents nameSimilarityScore(Float nameSimilarityScore) {
    
    
    
    
    this.nameSimilarityScore = nameSimilarityScore;
    return this;
  }

   /**
   * Get nameSimilarityScore
   * @return nameSimilarityScore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Float getNameSimilarityScore() {
    return nameSimilarityScore;
  }


  public void setNameSimilarityScore(Float nameSimilarityScore) {
    
    
    
    this.nameSimilarityScore = nameSimilarityScore;
  }


  public PossibleNormPartyScoreConstituents otherPotentialNormParties(Integer otherPotentialNormParties) {
    
    
    
    
    this.otherPotentialNormParties = otherPotentialNormParties;
    return this;
  }

   /**
   * Get otherPotentialNormParties
   * @return otherPotentialNormParties
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getOtherPotentialNormParties() {
    return otherPotentialNormParties;
  }


  public void setOtherPotentialNormParties(Integer otherPotentialNormParties) {
    
    
    
    this.otherPotentialNormParties = otherPotentialNormParties;
  }


  public PossibleNormPartyScoreConstituents phone(PhoneEnum phone) {
    
    
    
    
    this.phone = phone;
    return this;
  }

   /**
   * Get phone
   * @return phone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PhoneEnum getPhone() {
    return phone;
  }


  public void setPhone(PhoneEnum phone) {
    
    
    
    this.phone = phone;
  }


  public PossibleNormPartyScoreConstituents secretaryOfStateId(SecretaryOfStateIdEnum secretaryOfStateId) {
    
    
    
    
    this.secretaryOfStateId = secretaryOfStateId;
    return this;
  }

   /**
   * Get secretaryOfStateId
   * @return secretaryOfStateId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SecretaryOfStateIdEnum getSecretaryOfStateId() {
    return secretaryOfStateId;
  }


  public void setSecretaryOfStateId(SecretaryOfStateIdEnum secretaryOfStateId) {
    
    
    
    this.secretaryOfStateId = secretaryOfStateId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PossibleNormPartyScoreConstituents instance itself
   */
  public PossibleNormPartyScoreConstituents putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PossibleNormPartyScoreConstituents possibleNormPartyScoreConstituents = (PossibleNormPartyScoreConstituents) o;
    return Objects.equals(this.address, possibleNormPartyScoreConstituents.address) &&
        Objects.equals(this.email, possibleNormPartyScoreConstituents.email) &&
        Objects.equals(this.nameSimilarityScore, possibleNormPartyScoreConstituents.nameSimilarityScore) &&
        Objects.equals(this.otherPotentialNormParties, possibleNormPartyScoreConstituents.otherPotentialNormParties) &&
        Objects.equals(this.phone, possibleNormPartyScoreConstituents.phone) &&
        Objects.equals(this.secretaryOfStateId, possibleNormPartyScoreConstituents.secretaryOfStateId)&&
        Objects.equals(this.additionalProperties, possibleNormPartyScoreConstituents.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, nameSimilarityScore, otherPotentialNormParties, phone, secretaryOfStateId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PossibleNormPartyScoreConstituents {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    nameSimilarityScore: ").append(toIndentedString(nameSimilarityScore)).append("\n");
    sb.append("    otherPotentialNormParties: ").append(toIndentedString(otherPotentialNormParties)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    secretaryOfStateId: ").append(toIndentedString(secretaryOfStateId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("email");
    openapiFields.add("nameSimilarityScore");
    openapiFields.add("otherPotentialNormParties");
    openapiFields.add("phone");
    openapiFields.add("secretaryOfStateId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("address");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("nameSimilarityScore");
    openapiRequiredFields.add("otherPotentialNormParties");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("secretaryOfStateId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PossibleNormPartyScoreConstituents
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PossibleNormPartyScoreConstituents.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PossibleNormPartyScoreConstituents is not found in the empty JSON string", PossibleNormPartyScoreConstituents.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PossibleNormPartyScoreConstituents.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("secretaryOfStateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretaryOfStateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretaryOfStateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PossibleNormPartyScoreConstituents.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PossibleNormPartyScoreConstituents' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PossibleNormPartyScoreConstituents> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PossibleNormPartyScoreConstituents.class));

       return (TypeAdapter<T>) new TypeAdapter<PossibleNormPartyScoreConstituents>() {
           @Override
           public void write(JsonWriter out, PossibleNormPartyScoreConstituents value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PossibleNormPartyScoreConstituents read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PossibleNormPartyScoreConstituents instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PossibleNormPartyScoreConstituents given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PossibleNormPartyScoreConstituents
  * @throws IOException if the JSON string is invalid with respect to PossibleNormPartyScoreConstituents
  */
  public static PossibleNormPartyScoreConstituents fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PossibleNormPartyScoreConstituents.class);
  }

 /**
  * Convert an instance of PossibleNormPartyScoreConstituents to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

