/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PossibleNormPartyScoreConstituents;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * PossibleNormParty
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class PossibleNormParty {
  public static final String SERIALIZED_NAME_ASSOCIATED_NORM_ATTORNEYS_A_P_I = "associatedNormAttorneysAPI";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_NORM_ATTORNEYS_A_P_I)
  private String associatedNormAttorneysAPI;

  public static final String SERIALIZED_NAME_ASSOCIATED_NORM_JUDGES_A_P_I = "associatedNormJudgesAPI";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_NORM_JUDGES_A_P_I)
  private String associatedNormJudgesAPI;

  public static final String SERIALIZED_NAME_ASSOCIATED_NORM_LAW_FIRMS_A_P_I = "associatedNormLawFirmsAPI";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_NORM_LAW_FIRMS_A_P_I)
  private String associatedNormLawFirmsAPI;

  public static final String SERIALIZED_NAME_BEST_MATCH = "bestMatch";
  @SerializedName(SERIALIZED_NAME_BEST_MATCH)
  private Boolean bestMatch = false;

  public static final String SERIALIZED_NAME_CASE_COUNT_ANALYTICS_BY_NORM_PARTY_A_P_I = "caseCountAnalyticsByNormPartyAPI";
  @SerializedName(SERIALIZED_NAME_CASE_COUNT_ANALYTICS_BY_NORM_PARTY_A_P_I)
  private URI caseCountAnalyticsByNormPartyAPI;

  public static final String SERIALIZED_NAME_CASE_COUNT_ANALYTICS_BY_OPPOSING_NORM_PARTY_A_P_I = "caseCountAnalyticsByOpposingNormPartyAPI";
  @SerializedName(SERIALIZED_NAME_CASE_COUNT_ANALYTICS_BY_OPPOSING_NORM_PARTY_A_P_I)
  private String caseCountAnalyticsByOpposingNormPartyAPI;

  public static final String SERIALIZED_NAME_CONFIDENCE_SCORE = "confidenceScore";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE_SCORE)
  private Float confidenceScore;

  public static final String SERIALIZED_NAME_NORM_PARTY_A_P_I = "normPartyAPI";
  @SerializedName(SERIALIZED_NAME_NORM_PARTY_A_P_I)
  private String normPartyAPI;

  public static final String SERIALIZED_NAME_NORM_PARTY_ID = "normPartyId";
  @SerializedName(SERIALIZED_NAME_NORM_PARTY_ID)
  private String normPartyId;

  public static final String SERIALIZED_NAME_NORM_PARTY_NAME = "normPartyName";
  @SerializedName(SERIALIZED_NAME_NORM_PARTY_NAME)
  private String normPartyName;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "PossibleNormParty";

  public static final String SERIALIZED_NAME_SCORE_CONSTITUENTS = "scoreConstituents";
  @SerializedName(SERIALIZED_NAME_SCORE_CONSTITUENTS)
  private PossibleNormPartyScoreConstituents scoreConstituents;

  public PossibleNormParty() {
  }

  public PossibleNormParty associatedNormAttorneysAPI(String associatedNormAttorneysAPI) {
    
    
    
    
    this.associatedNormAttorneysAPI = associatedNormAttorneysAPI;
    return this;
  }

   /**
   * Get associatedNormAttorneysAPI
   * @return associatedNormAttorneysAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/associatedNormAttorneys?pageNumber=1", required = true, value = "")

  public String getAssociatedNormAttorneysAPI() {
    return associatedNormAttorneysAPI;
  }


  public void setAssociatedNormAttorneysAPI(String associatedNormAttorneysAPI) {
    
    
    
    this.associatedNormAttorneysAPI = associatedNormAttorneysAPI;
  }


  public PossibleNormParty associatedNormJudgesAPI(String associatedNormJudgesAPI) {
    
    
    
    
    this.associatedNormJudgesAPI = associatedNormJudgesAPI;
    return this;
  }

   /**
   * Get associatedNormJudgesAPI
   * @return associatedNormJudgesAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/associatedNormJudges?pageNumber=1", required = true, value = "")

  public String getAssociatedNormJudgesAPI() {
    return associatedNormJudgesAPI;
  }


  public void setAssociatedNormJudgesAPI(String associatedNormJudgesAPI) {
    
    
    
    this.associatedNormJudgesAPI = associatedNormJudgesAPI;
  }


  public PossibleNormParty associatedNormLawFirmsAPI(String associatedNormLawFirmsAPI) {
    
    
    
    
    this.associatedNormLawFirmsAPI = associatedNormLawFirmsAPI;
    return this;
  }

   /**
   * Get associatedNormLawFirmsAPI
   * @return associatedNormLawFirmsAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/associatedNormLawFirms?pageNumber=1", required = true, value = "")

  public String getAssociatedNormLawFirmsAPI() {
    return associatedNormLawFirmsAPI;
  }


  public void setAssociatedNormLawFirmsAPI(String associatedNormLawFirmsAPI) {
    
    
    
    this.associatedNormLawFirmsAPI = associatedNormLawFirmsAPI;
  }


  public PossibleNormParty bestMatch(Boolean bestMatch) {
    
    
    
    
    this.bestMatch = bestMatch;
    return this;
  }

   /**
   * Get bestMatch
   * @return bestMatch
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "")

  public Boolean getBestMatch() {
    return bestMatch;
  }


  public void setBestMatch(Boolean bestMatch) {
    
    
    
    this.bestMatch = bestMatch;
  }


  public PossibleNormParty caseCountAnalyticsByNormPartyAPI(URI caseCountAnalyticsByNormPartyAPI) {
    
    
    
    
    this.caseCountAnalyticsByNormPartyAPI = caseCountAnalyticsByNormPartyAPI;
    return this;
  }

   /**
   * Get caseCountAnalyticsByNormPartyAPI
   * @return caseCountAnalyticsByNormPartyAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getCaseCountAnalyticsByNormPartyAPI() {
    return caseCountAnalyticsByNormPartyAPI;
  }


  public void setCaseCountAnalyticsByNormPartyAPI(URI caseCountAnalyticsByNormPartyAPI) {
    
    
    
    this.caseCountAnalyticsByNormPartyAPI = caseCountAnalyticsByNormPartyAPI;
  }


  public PossibleNormParty caseCountAnalyticsByOpposingNormPartyAPI(String caseCountAnalyticsByOpposingNormPartyAPI) {
    
    
    
    
    this.caseCountAnalyticsByOpposingNormPartyAPI = caseCountAnalyticsByOpposingNormPartyAPI;
    return this;
  }

   /**
   * Get caseCountAnalyticsByOpposingNormPartyAPI
   * @return caseCountAnalyticsByOpposingNormPartyAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/caseCountAnalyticsByOpposingNormParty?pageNumber=1", required = true, value = "")

  public String getCaseCountAnalyticsByOpposingNormPartyAPI() {
    return caseCountAnalyticsByOpposingNormPartyAPI;
  }


  public void setCaseCountAnalyticsByOpposingNormPartyAPI(String caseCountAnalyticsByOpposingNormPartyAPI) {
    
    
    
    this.caseCountAnalyticsByOpposingNormPartyAPI = caseCountAnalyticsByOpposingNormPartyAPI;
  }


  public PossibleNormParty confidenceScore(Float confidenceScore) {
    
    
    
    
    this.confidenceScore = confidenceScore;
    return this;
  }

   /**
   * Get confidenceScore
   * @return confidenceScore
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Float getConfidenceScore() {
    return confidenceScore;
  }


  public void setConfidenceScore(Float confidenceScore) {
    
    
    
    this.confidenceScore = confidenceScore;
  }


  public PossibleNormParty normPartyAPI(String normPartyAPI) {
    
    
    
    
    this.normPartyAPI = normPartyAPI;
    return this;
  }

   /**
   * Link to Details For the Party.
   * @return normPartyAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAmd", required = true, value = "Link to Details For the Party.")

  public String getNormPartyAPI() {
    return normPartyAPI;
  }


  public void setNormPartyAPI(String normPartyAPI) {
    
    
    
    this.normPartyAPI = normPartyAPI;
  }


  public PossibleNormParty normPartyId(String normPartyId) {
    
    
    if (normPartyId != null && normPartyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
    }
    
    this.normPartyId = normPartyId;
    return this;
  }

   /**
   * Get normPartyId
   * @return normPartyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNormPartyId() {
    return normPartyId;
  }


  public void setNormPartyId(String normPartyId) {
    
    
    if (normPartyId != null && normPartyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
    }
    this.normPartyId = normPartyId;
  }


  public PossibleNormParty normPartyName(String normPartyName) {
    
    
    
    
    this.normPartyName = normPartyName;
    return this;
  }

   /**
   * Get normPartyName
   * @return normPartyName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNormPartyName() {
    return normPartyName;
  }


  public void setNormPartyName(String normPartyName) {
    
    
    
    this.normPartyName = normPartyName;
  }


  public PossibleNormParty _object(String _object) {
    
    
    if (_object != null && _object.length() < 17) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 17.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PossibleNormParty", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 17) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 17.");
    }
    this._object = _object;
  }


  public PossibleNormParty scoreConstituents(PossibleNormPartyScoreConstituents scoreConstituents) {
    
    
    
    
    this.scoreConstituents = scoreConstituents;
    return this;
  }

   /**
   * Get scoreConstituents
   * @return scoreConstituents
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PossibleNormPartyScoreConstituents getScoreConstituents() {
    return scoreConstituents;
  }


  public void setScoreConstituents(PossibleNormPartyScoreConstituents scoreConstituents) {
    
    
    
    this.scoreConstituents = scoreConstituents;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PossibleNormParty instance itself
   */
  public PossibleNormParty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PossibleNormParty possibleNormParty = (PossibleNormParty) o;
    return Objects.equals(this.associatedNormAttorneysAPI, possibleNormParty.associatedNormAttorneysAPI) &&
        Objects.equals(this.associatedNormJudgesAPI, possibleNormParty.associatedNormJudgesAPI) &&
        Objects.equals(this.associatedNormLawFirmsAPI, possibleNormParty.associatedNormLawFirmsAPI) &&
        Objects.equals(this.bestMatch, possibleNormParty.bestMatch) &&
        Objects.equals(this.caseCountAnalyticsByNormPartyAPI, possibleNormParty.caseCountAnalyticsByNormPartyAPI) &&
        Objects.equals(this.caseCountAnalyticsByOpposingNormPartyAPI, possibleNormParty.caseCountAnalyticsByOpposingNormPartyAPI) &&
        Objects.equals(this.confidenceScore, possibleNormParty.confidenceScore) &&
        Objects.equals(this.normPartyAPI, possibleNormParty.normPartyAPI) &&
        Objects.equals(this.normPartyId, possibleNormParty.normPartyId) &&
        Objects.equals(this.normPartyName, possibleNormParty.normPartyName) &&
        Objects.equals(this._object, possibleNormParty._object) &&
        Objects.equals(this.scoreConstituents, possibleNormParty.scoreConstituents)&&
        Objects.equals(this.additionalProperties, possibleNormParty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedNormAttorneysAPI, associatedNormJudgesAPI, associatedNormLawFirmsAPI, bestMatch, caseCountAnalyticsByNormPartyAPI, caseCountAnalyticsByOpposingNormPartyAPI, confidenceScore, normPartyAPI, normPartyId, normPartyName, _object, scoreConstituents, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PossibleNormParty {\n");
    sb.append("    associatedNormAttorneysAPI: ").append(toIndentedString(associatedNormAttorneysAPI)).append("\n");
    sb.append("    associatedNormJudgesAPI: ").append(toIndentedString(associatedNormJudgesAPI)).append("\n");
    sb.append("    associatedNormLawFirmsAPI: ").append(toIndentedString(associatedNormLawFirmsAPI)).append("\n");
    sb.append("    bestMatch: ").append(toIndentedString(bestMatch)).append("\n");
    sb.append("    caseCountAnalyticsByNormPartyAPI: ").append(toIndentedString(caseCountAnalyticsByNormPartyAPI)).append("\n");
    sb.append("    caseCountAnalyticsByOpposingNormPartyAPI: ").append(toIndentedString(caseCountAnalyticsByOpposingNormPartyAPI)).append("\n");
    sb.append("    confidenceScore: ").append(toIndentedString(confidenceScore)).append("\n");
    sb.append("    normPartyAPI: ").append(toIndentedString(normPartyAPI)).append("\n");
    sb.append("    normPartyId: ").append(toIndentedString(normPartyId)).append("\n");
    sb.append("    normPartyName: ").append(toIndentedString(normPartyName)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    scoreConstituents: ").append(toIndentedString(scoreConstituents)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedNormAttorneysAPI");
    openapiFields.add("associatedNormJudgesAPI");
    openapiFields.add("associatedNormLawFirmsAPI");
    openapiFields.add("bestMatch");
    openapiFields.add("caseCountAnalyticsByNormPartyAPI");
    openapiFields.add("caseCountAnalyticsByOpposingNormPartyAPI");
    openapiFields.add("confidenceScore");
    openapiFields.add("normPartyAPI");
    openapiFields.add("normPartyId");
    openapiFields.add("normPartyName");
    openapiFields.add("object");
    openapiFields.add("scoreConstituents");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("associatedNormAttorneysAPI");
    openapiRequiredFields.add("associatedNormJudgesAPI");
    openapiRequiredFields.add("associatedNormLawFirmsAPI");
    openapiRequiredFields.add("bestMatch");
    openapiRequiredFields.add("caseCountAnalyticsByNormPartyAPI");
    openapiRequiredFields.add("caseCountAnalyticsByOpposingNormPartyAPI");
    openapiRequiredFields.add("confidenceScore");
    openapiRequiredFields.add("normPartyAPI");
    openapiRequiredFields.add("normPartyId");
    openapiRequiredFields.add("normPartyName");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("scoreConstituents");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PossibleNormParty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!PossibleNormParty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PossibleNormParty is not found in the empty JSON string", PossibleNormParty.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PossibleNormParty.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("associatedNormAttorneysAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedNormAttorneysAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associatedNormAttorneysAPI").toString()));
      }
      if (!jsonObj.get("associatedNormJudgesAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedNormJudgesAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associatedNormJudgesAPI").toString()));
      }
      if (!jsonObj.get("associatedNormLawFirmsAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedNormLawFirmsAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associatedNormLawFirmsAPI").toString()));
      }
      if (!jsonObj.get("caseCountAnalyticsByNormPartyAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseCountAnalyticsByNormPartyAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseCountAnalyticsByNormPartyAPI").toString()));
      }
      if (!jsonObj.get("caseCountAnalyticsByOpposingNormPartyAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseCountAnalyticsByOpposingNormPartyAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseCountAnalyticsByOpposingNormPartyAPI").toString()));
      }
      if (!jsonObj.get("normPartyAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normPartyAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normPartyAPI").toString()));
      }
      if (!jsonObj.get("normPartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normPartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normPartyId").toString()));
      }
      if (!jsonObj.get("normPartyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normPartyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normPartyName").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `scoreConstituents`
      PossibleNormPartyScoreConstituents.validateJsonObject(jsonObj.getAsJsonObject("scoreConstituents"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PossibleNormParty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PossibleNormParty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PossibleNormParty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PossibleNormParty.class));

       return (TypeAdapter<T>) new TypeAdapter<PossibleNormParty>() {
           @Override
           public void write(JsonWriter out, PossibleNormParty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PossibleNormParty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             PossibleNormParty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PossibleNormParty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PossibleNormParty
  * @throws IOException if the JSON string is invalid with respect to PossibleNormParty
  */
  public static PossibleNormParty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PossibleNormParty.class);
  }

 /**
  * Convert an instance of PossibleNormParty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

