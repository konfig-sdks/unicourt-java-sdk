/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AssociatedSoSPerson;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.SOSAssociatedNormOrganization;
import com.konfigthis.client.model.SOSNameChange;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SOSData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SOSData {
  public static final String SERIALIZED_NAME_ASSOCIATED_SO_S_PERSON_ARRAY = "associatedSoSPersonArray";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_SO_S_PERSON_ARRAY)
  private List<AssociatedSoSPerson> associatedSoSPersonArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_DOMESTIC_REGISTRATION = "domesticRegistration";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_REGISTRATION)
  private Boolean domesticRegistration = true;

  public static final String SERIALIZED_NAME_FEIN = "fein";
  @SerializedName(SERIALIZED_NAME_FEIN)
  private String fein;

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private OffsetDateTime firstFetchDate;

  public static final String SERIALIZED_NAME_INACTIVATION_DATE = "inactivationDate";
  @SerializedName(SERIALIZED_NAME_INACTIVATION_DATE)
  private OffsetDateTime inactivationDate;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "isActive";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private Boolean isActive = true;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES = "lastFetchDateWithUpdates";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES)
  private OffsetDateTime lastFetchDateWithUpdates;

  public static final String SERIALIZED_NAME_NAME_CHANGES_ARRAY = "nameChangesArray";
  @SerializedName(SERIALIZED_NAME_NAME_CHANGES_ARRAY)
  private List<SOSNameChange> nameChangesArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "SOSData";

  public static final String SERIALIZED_NAME_REGISTERED_DATE = "registeredDate";
  @SerializedName(SERIALIZED_NAME_REGISTERED_DATE)
  private OffsetDateTime registeredDate;

  public static final String SERIALIZED_NAME_SOS_ASSOCIATED_NORM_ORGANIZATION_ARRAY = "sosAssociatedNormOrganizationArray";
  @SerializedName(SERIALIZED_NAME_SOS_ASSOCIATED_NORM_ORGANIZATION_ARRAY)
  private List<SOSAssociatedNormOrganization> sosAssociatedNormOrganizationArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOS_NUMBER = "sosNumber";
  @SerializedName(SERIALIZED_NAME_SOS_NUMBER)
  private String sosNumber;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
 public enum StatusEnum {
    ACTIVE("Active");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public SOSData() {
  }

  public SOSData associatedSoSPersonArray(List<AssociatedSoSPerson> associatedSoSPersonArray) {
    
    
    
    
    this.associatedSoSPersonArray = associatedSoSPersonArray;
    return this;
  }

  public SOSData addAssociatedSoSPersonArrayItem(AssociatedSoSPerson associatedSoSPersonArrayItem) {
    this.associatedSoSPersonArray.add(associatedSoSPersonArrayItem);
    return this;
  }

   /**
   * Get associatedSoSPersonArray
   * @return associatedSoSPersonArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<AssociatedSoSPerson> getAssociatedSoSPersonArray() {
    return associatedSoSPersonArray;
  }


  public void setAssociatedSoSPersonArray(List<AssociatedSoSPerson> associatedSoSPersonArray) {
    
    
    
    this.associatedSoSPersonArray = associatedSoSPersonArray;
  }


  public SOSData contact(Contact contact) {
    
    
    
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    
    
    
    this.contact = contact;
  }


  public SOSData domesticRegistration(Boolean domesticRegistration) {
    
    
    
    
    this.domesticRegistration = domesticRegistration;
    return this;
  }

   /**
   * Get domesticRegistration
   * @return domesticRegistration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getDomesticRegistration() {
    return domesticRegistration;
  }


  public void setDomesticRegistration(Boolean domesticRegistration) {
    
    
    
    this.domesticRegistration = domesticRegistration;
  }


  public SOSData fein(String fein) {
    
    
    
    
    this.fein = fein;
    return this;
  }

   /**
   * Get fein
   * @return fein
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getFein() {
    return fein;
  }


  public void setFein(String fein) {
    
    
    
    this.fein = fein;
  }


  public SOSData firstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * Get firstFetchDate
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    
    this.firstFetchDate = firstFetchDate;
  }


  public SOSData inactivationDate(OffsetDateTime inactivationDate) {
    
    
    
    
    this.inactivationDate = inactivationDate;
    return this;
  }

   /**
   * Get inactivationDate
   * @return inactivationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getInactivationDate() {
    return inactivationDate;
  }


  public void setInactivationDate(OffsetDateTime inactivationDate) {
    
    
    
    this.inactivationDate = inactivationDate;
  }


  public SOSData isActive(Boolean isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * Get isActive
   * @return isActive
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "")

  public Boolean getIsActive() {
    return isActive;
  }


  public void setIsActive(Boolean isActive) {
    
    
    
    this.isActive = isActive;
  }


  public SOSData lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * Get lastFetchDate
   * @return lastFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    
    this.lastFetchDate = lastFetchDate;
  }


  public SOSData lastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
    return this;
  }

   /**
   * Last Fetch Date of Organization with Updates.
   * @return lastFetchDateWithUpdates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last Fetch Date of Organization with Updates.")

  public OffsetDateTime getLastFetchDateWithUpdates() {
    return lastFetchDateWithUpdates;
  }


  public void setLastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
  }


  public SOSData nameChangesArray(List<SOSNameChange> nameChangesArray) {
    
    
    
    
    this.nameChangesArray = nameChangesArray;
    return this;
  }

  public SOSData addNameChangesArrayItem(SOSNameChange nameChangesArrayItem) {
    this.nameChangesArray.add(nameChangesArrayItem);
    return this;
  }

   /**
   * Get nameChangesArray
   * @return nameChangesArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<SOSNameChange> getNameChangesArray() {
    return nameChangesArray;
  }


  public void setNameChangesArray(List<SOSNameChange> nameChangesArray) {
    
    
    
    this.nameChangesArray = nameChangesArray;
  }


  public SOSData _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SOSData", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public SOSData registeredDate(OffsetDateTime registeredDate) {
    
    
    
    
    this.registeredDate = registeredDate;
    return this;
  }

   /**
   * Get registeredDate
   * @return registeredDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getRegisteredDate() {
    return registeredDate;
  }


  public void setRegisteredDate(OffsetDateTime registeredDate) {
    
    
    
    this.registeredDate = registeredDate;
  }


  public SOSData sosAssociatedNormOrganizationArray(List<SOSAssociatedNormOrganization> sosAssociatedNormOrganizationArray) {
    
    
    
    
    this.sosAssociatedNormOrganizationArray = sosAssociatedNormOrganizationArray;
    return this;
  }

  public SOSData addSosAssociatedNormOrganizationArrayItem(SOSAssociatedNormOrganization sosAssociatedNormOrganizationArrayItem) {
    this.sosAssociatedNormOrganizationArray.add(sosAssociatedNormOrganizationArrayItem);
    return this;
  }

   /**
   * Get sosAssociatedNormOrganizationArray
   * @return sosAssociatedNormOrganizationArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<SOSAssociatedNormOrganization> getSosAssociatedNormOrganizationArray() {
    return sosAssociatedNormOrganizationArray;
  }


  public void setSosAssociatedNormOrganizationArray(List<SOSAssociatedNormOrganization> sosAssociatedNormOrganizationArray) {
    
    
    
    this.sosAssociatedNormOrganizationArray = sosAssociatedNormOrganizationArray;
  }


  public SOSData sosNumber(String sosNumber) {
    
    
    
    
    this.sosNumber = sosNumber;
    return this;
  }

   /**
   * Get sosNumber
   * @return sosNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getSosNumber() {
    return sosNumber;
  }


  public void setSosNumber(String sosNumber) {
    
    
    
    this.sosNumber = sosNumber;
  }


  public SOSData stateCode(String stateCode) {
    
    
    
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * Get stateCode
   * @return stateCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    
    
    
    this.stateCode = stateCode;
  }


  public SOSData status(StatusEnum status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    
    
    
    this.status = status;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SOSData instance itself
   */
  public SOSData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SOSData soSData = (SOSData) o;
    return Objects.equals(this.associatedSoSPersonArray, soSData.associatedSoSPersonArray) &&
        Objects.equals(this.contact, soSData.contact) &&
        Objects.equals(this.domesticRegistration, soSData.domesticRegistration) &&
        Objects.equals(this.fein, soSData.fein) &&
        Objects.equals(this.firstFetchDate, soSData.firstFetchDate) &&
        Objects.equals(this.inactivationDate, soSData.inactivationDate) &&
        Objects.equals(this.isActive, soSData.isActive) &&
        Objects.equals(this.lastFetchDate, soSData.lastFetchDate) &&
        Objects.equals(this.lastFetchDateWithUpdates, soSData.lastFetchDateWithUpdates) &&
        Objects.equals(this.nameChangesArray, soSData.nameChangesArray) &&
        Objects.equals(this._object, soSData._object) &&
        Objects.equals(this.registeredDate, soSData.registeredDate) &&
        Objects.equals(this.sosAssociatedNormOrganizationArray, soSData.sosAssociatedNormOrganizationArray) &&
        Objects.equals(this.sosNumber, soSData.sosNumber) &&
        Objects.equals(this.stateCode, soSData.stateCode) &&
        Objects.equals(this.status, soSData.status)&&
        Objects.equals(this.additionalProperties, soSData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(associatedSoSPersonArray, contact, domesticRegistration, fein, firstFetchDate, inactivationDate, isActive, lastFetchDate, lastFetchDateWithUpdates, nameChangesArray, _object, registeredDate, sosAssociatedNormOrganizationArray, sosNumber, stateCode, status, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SOSData {\n");
    sb.append("    associatedSoSPersonArray: ").append(toIndentedString(associatedSoSPersonArray)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    domesticRegistration: ").append(toIndentedString(domesticRegistration)).append("\n");
    sb.append("    fein: ").append(toIndentedString(fein)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    inactivationDate: ").append(toIndentedString(inactivationDate)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    lastFetchDateWithUpdates: ").append(toIndentedString(lastFetchDateWithUpdates)).append("\n");
    sb.append("    nameChangesArray: ").append(toIndentedString(nameChangesArray)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    registeredDate: ").append(toIndentedString(registeredDate)).append("\n");
    sb.append("    sosAssociatedNormOrganizationArray: ").append(toIndentedString(sosAssociatedNormOrganizationArray)).append("\n");
    sb.append("    sosNumber: ").append(toIndentedString(sosNumber)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("associatedSoSPersonArray");
    openapiFields.add("contact");
    openapiFields.add("domesticRegistration");
    openapiFields.add("fein");
    openapiFields.add("firstFetchDate");
    openapiFields.add("inactivationDate");
    openapiFields.add("isActive");
    openapiFields.add("lastFetchDate");
    openapiFields.add("lastFetchDateWithUpdates");
    openapiFields.add("nameChangesArray");
    openapiFields.add("object");
    openapiFields.add("registeredDate");
    openapiFields.add("sosAssociatedNormOrganizationArray");
    openapiFields.add("sosNumber");
    openapiFields.add("stateCode");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("associatedSoSPersonArray");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("domesticRegistration");
    openapiRequiredFields.add("fein");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("inactivationDate");
    openapiRequiredFields.add("isActive");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("lastFetchDateWithUpdates");
    openapiRequiredFields.add("nameChangesArray");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("registeredDate");
    openapiRequiredFields.add("sosAssociatedNormOrganizationArray");
    openapiRequiredFields.add("sosNumber");
    openapiRequiredFields.add("stateCode");
    openapiRequiredFields.add("status");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SOSData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SOSData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SOSData is not found in the empty JSON string", SOSData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SOSData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("associatedSoSPersonArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `associatedSoSPersonArray` to be an array in the JSON string but got `%s`", jsonObj.get("associatedSoSPersonArray").toString()));
      }

      JsonArray jsonArrayassociatedSoSPersonArray = jsonObj.getAsJsonArray("associatedSoSPersonArray");
      // validate the required field `associatedSoSPersonArray` (array)
      for (int i = 0; i < jsonArrayassociatedSoSPersonArray.size(); i++) {
        AssociatedSoSPerson.validateJsonObject(jsonArrayassociatedSoSPersonArray.get(i).getAsJsonObject());
      };
      // validate the required field `contact`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      if (!jsonObj.get("fein").isJsonNull() && !jsonObj.get("fein").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fein` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fein").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("nameChangesArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameChangesArray` to be an array in the JSON string but got `%s`", jsonObj.get("nameChangesArray").toString()));
      }

      JsonArray jsonArraynameChangesArray = jsonObj.getAsJsonArray("nameChangesArray");
      // validate the required field `nameChangesArray` (array)
      for (int i = 0; i < jsonArraynameChangesArray.size(); i++) {
        SOSNameChange.validateJsonObject(jsonArraynameChangesArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sosAssociatedNormOrganizationArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sosAssociatedNormOrganizationArray` to be an array in the JSON string but got `%s`", jsonObj.get("sosAssociatedNormOrganizationArray").toString()));
      }

      JsonArray jsonArraysosAssociatedNormOrganizationArray = jsonObj.getAsJsonArray("sosAssociatedNormOrganizationArray");
      // validate the required field `sosAssociatedNormOrganizationArray` (array)
      for (int i = 0; i < jsonArraysosAssociatedNormOrganizationArray.size(); i++) {
        SOSAssociatedNormOrganization.validateJsonObject(jsonArraysosAssociatedNormOrganizationArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("sosNumber").isJsonNull() && !jsonObj.get("sosNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sosNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sosNumber").toString()));
      }
      if (!jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if (!jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SOSData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SOSData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SOSData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SOSData.class));

       return (TypeAdapter<T>) new TypeAdapter<SOSData>() {
           @Override
           public void write(JsonWriter out, SOSData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SOSData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SOSData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SOSData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SOSData
  * @throws IOException if the JSON string is invalid with respect to SOSData
  */
  public static SOSData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SOSData.class);
  }

 /**
  * Convert an instance of SOSData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

