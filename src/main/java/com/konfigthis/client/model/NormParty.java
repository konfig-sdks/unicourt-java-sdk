/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CaseAnalyticsAPI;
import com.konfigthis.client.model.IndividualProperty;
import com.konfigthis.client.model.NormOrganization;
import com.konfigthis.client.model.PartyAnalyticsAPI;
import com.konfigthis.client.model.RelatedNormParty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Norm Party
 */
@ApiModel(description = "Norm Party")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NormParty {
  public static final String SERIALIZED_NAME_CASE_ANALYTICS_A_P_I = "caseAnalyticsAPI";
  @SerializedName(SERIALIZED_NAME_CASE_ANALYTICS_A_P_I)
  private CaseAnalyticsAPI caseAnalyticsAPI;

  public static final String SERIALIZED_NAME_CASE_SEARCH_A_P_I = "caseSearchAPI";
  @SerializedName(SERIALIZED_NAME_CASE_SEARCH_A_P_I)
  private URI caseSearchAPI;

  public static final String SERIALIZED_NAME_INDIVIDUAL_DATA = "individualData";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_DATA)
  private IndividualProperty individualData;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORM_ORGANIZATION_DATA = "normOrganizationData";
  @SerializedName(SERIALIZED_NAME_NORM_ORGANIZATION_DATA)
  private NormOrganization normOrganizationData;

  public static final String SERIALIZED_NAME_NORM_PARTY_ID = "normPartyId";
  @SerializedName(SERIALIZED_NAME_NORM_PARTY_ID)
  private String normPartyId;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "NormParty";

  public static final String SERIALIZED_NAME_PARTY_ANALYTICS_A_P_I = "partyAnalyticsAPI";
  @SerializedName(SERIALIZED_NAME_PARTY_ANALYTICS_A_P_I)
  private PartyAnalyticsAPI partyAnalyticsAPI;

  /**
   * Gets or Sets partyClassificationType
   */
  @JsonAdapter(PartyClassificationTypeEnum.Adapter.class)
 public enum PartyClassificationTypeEnum {
    INDIVIDUAL("Individual"),
    
    ORGANIZATION("Organization");

    private String value;

    PartyClassificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartyClassificationTypeEnum fromValue(String value) {
      for (PartyClassificationTypeEnum b : PartyClassificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartyClassificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartyClassificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartyClassificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartyClassificationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARTY_CLASSIFICATION_TYPE = "partyClassificationType";
  @SerializedName(SERIALIZED_NAME_PARTY_CLASSIFICATION_TYPE)
  private PartyClassificationTypeEnum partyClassificationType;

  public static final String SERIALIZED_NAME_RELATED_NORM_PARTY_ARRAY = "relatedNormPartyArray";
  @SerializedName(SERIALIZED_NAME_RELATED_NORM_PARTY_ARRAY)
  private List<RelatedNormParty> relatedNormPartyArray = new ArrayList<>();

  public NormParty() {
  }

  public NormParty caseAnalyticsAPI(CaseAnalyticsAPI caseAnalyticsAPI) {
    
    
    
    
    this.caseAnalyticsAPI = caseAnalyticsAPI;
    return this;
  }

   /**
   * Get caseAnalyticsAPI
   * @return caseAnalyticsAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CaseAnalyticsAPI getCaseAnalyticsAPI() {
    return caseAnalyticsAPI;
  }


  public void setCaseAnalyticsAPI(CaseAnalyticsAPI caseAnalyticsAPI) {
    
    
    
    this.caseAnalyticsAPI = caseAnalyticsAPI;
  }


  public NormParty caseSearchAPI(URI caseSearchAPI) {
    
    
    
    
    this.caseSearchAPI = caseSearchAPI;
    return this;
  }

   /**
   * Get caseSearchAPI
   * @return caseSearchAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public URI getCaseSearchAPI() {
    return caseSearchAPI;
  }


  public void setCaseSearchAPI(URI caseSearchAPI) {
    
    
    
    this.caseSearchAPI = caseSearchAPI;
  }


  public NormParty individualData(IndividualProperty individualData) {
    
    
    
    
    this.individualData = individualData;
    return this;
  }

   /**
   * Get individualData
   * @return individualData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public IndividualProperty getIndividualData() {
    return individualData;
  }


  public void setIndividualData(IndividualProperty individualData) {
    
    
    
    this.individualData = individualData;
  }


  public NormParty name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public NormParty normOrganizationData(NormOrganization normOrganizationData) {
    
    
    
    
    this.normOrganizationData = normOrganizationData;
    return this;
  }

   /**
   * Get normOrganizationData
   * @return normOrganizationData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NormOrganization getNormOrganizationData() {
    return normOrganizationData;
  }


  public void setNormOrganizationData(NormOrganization normOrganizationData) {
    
    
    
    this.normOrganizationData = normOrganizationData;
  }


  public NormParty normPartyId(String normPartyId) {
    
    
    if (normPartyId != null && normPartyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
    }
    
    this.normPartyId = normPartyId;
    return this;
  }

   /**
   * Get normPartyId
   * @return normPartyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNormPartyId() {
    return normPartyId;
  }


  public void setNormPartyId(String normPartyId) {
    
    
    if (normPartyId != null && normPartyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
    }
    this.normPartyId = normPartyId;
  }


  public NormParty _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NormParty", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public NormParty partyAnalyticsAPI(PartyAnalyticsAPI partyAnalyticsAPI) {
    
    
    
    
    this.partyAnalyticsAPI = partyAnalyticsAPI;
    return this;
  }

   /**
   * Get partyAnalyticsAPI
   * @return partyAnalyticsAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PartyAnalyticsAPI getPartyAnalyticsAPI() {
    return partyAnalyticsAPI;
  }


  public void setPartyAnalyticsAPI(PartyAnalyticsAPI partyAnalyticsAPI) {
    
    
    
    this.partyAnalyticsAPI = partyAnalyticsAPI;
  }


  public NormParty partyClassificationType(PartyClassificationTypeEnum partyClassificationType) {
    
    
    
    
    this.partyClassificationType = partyClassificationType;
    return this;
  }

   /**
   * Get partyClassificationType
   * @return partyClassificationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PartyClassificationTypeEnum getPartyClassificationType() {
    return partyClassificationType;
  }


  public void setPartyClassificationType(PartyClassificationTypeEnum partyClassificationType) {
    
    
    
    this.partyClassificationType = partyClassificationType;
  }


  public NormParty relatedNormPartyArray(List<RelatedNormParty> relatedNormPartyArray) {
    
    
    
    
    this.relatedNormPartyArray = relatedNormPartyArray;
    return this;
  }

  public NormParty addRelatedNormPartyArrayItem(RelatedNormParty relatedNormPartyArrayItem) {
    this.relatedNormPartyArray.add(relatedNormPartyArrayItem);
    return this;
  }

   /**
   * Get relatedNormPartyArray
   * @return relatedNormPartyArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<RelatedNormParty> getRelatedNormPartyArray() {
    return relatedNormPartyArray;
  }


  public void setRelatedNormPartyArray(List<RelatedNormParty> relatedNormPartyArray) {
    
    
    
    this.relatedNormPartyArray = relatedNormPartyArray;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NormParty instance itself
   */
  public NormParty putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NormParty normParty = (NormParty) o;
    return Objects.equals(this.caseAnalyticsAPI, normParty.caseAnalyticsAPI) &&
        Objects.equals(this.caseSearchAPI, normParty.caseSearchAPI) &&
        Objects.equals(this.individualData, normParty.individualData) &&
        Objects.equals(this.name, normParty.name) &&
        Objects.equals(this.normOrganizationData, normParty.normOrganizationData) &&
        Objects.equals(this.normPartyId, normParty.normPartyId) &&
        Objects.equals(this._object, normParty._object) &&
        Objects.equals(this.partyAnalyticsAPI, normParty.partyAnalyticsAPI) &&
        Objects.equals(this.partyClassificationType, normParty.partyClassificationType) &&
        Objects.equals(this.relatedNormPartyArray, normParty.relatedNormPartyArray)&&
        Objects.equals(this.additionalProperties, normParty.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseAnalyticsAPI, caseSearchAPI, individualData, name, normOrganizationData, normPartyId, _object, partyAnalyticsAPI, partyClassificationType, relatedNormPartyArray, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormParty {\n");
    sb.append("    caseAnalyticsAPI: ").append(toIndentedString(caseAnalyticsAPI)).append("\n");
    sb.append("    caseSearchAPI: ").append(toIndentedString(caseSearchAPI)).append("\n");
    sb.append("    individualData: ").append(toIndentedString(individualData)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normOrganizationData: ").append(toIndentedString(normOrganizationData)).append("\n");
    sb.append("    normPartyId: ").append(toIndentedString(normPartyId)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    partyAnalyticsAPI: ").append(toIndentedString(partyAnalyticsAPI)).append("\n");
    sb.append("    partyClassificationType: ").append(toIndentedString(partyClassificationType)).append("\n");
    sb.append("    relatedNormPartyArray: ").append(toIndentedString(relatedNormPartyArray)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseAnalyticsAPI");
    openapiFields.add("caseSearchAPI");
    openapiFields.add("individualData");
    openapiFields.add("name");
    openapiFields.add("normOrganizationData");
    openapiFields.add("normPartyId");
    openapiFields.add("object");
    openapiFields.add("partyAnalyticsAPI");
    openapiFields.add("partyClassificationType");
    openapiFields.add("relatedNormPartyArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseAnalyticsAPI");
    openapiRequiredFields.add("caseSearchAPI");
    openapiRequiredFields.add("individualData");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("normOrganizationData");
    openapiRequiredFields.add("normPartyId");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("partyAnalyticsAPI");
    openapiRequiredFields.add("partyClassificationType");
    openapiRequiredFields.add("relatedNormPartyArray");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NormParty
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NormParty.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NormParty is not found in the empty JSON string", NormParty.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NormParty.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `caseAnalyticsAPI`
      CaseAnalyticsAPI.validateJsonObject(jsonObj.getAsJsonObject("caseAnalyticsAPI"));
      if (!jsonObj.get("caseSearchAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseSearchAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseSearchAPI").toString()));
      }
      // validate the required field `individualData`
      IndividualProperty.validateJsonObject(jsonObj.getAsJsonObject("individualData"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the required field `normOrganizationData`
      NormOrganization.validateJsonObject(jsonObj.getAsJsonObject("normOrganizationData"));
      if (!jsonObj.get("normPartyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normPartyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normPartyId").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `partyAnalyticsAPI`
      PartyAnalyticsAPI.validateJsonObject(jsonObj.getAsJsonObject("partyAnalyticsAPI"));
      if (!jsonObj.get("partyClassificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partyClassificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partyClassificationType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("relatedNormPartyArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relatedNormPartyArray` to be an array in the JSON string but got `%s`", jsonObj.get("relatedNormPartyArray").toString()));
      }

      JsonArray jsonArrayrelatedNormPartyArray = jsonObj.getAsJsonArray("relatedNormPartyArray");
      // validate the required field `relatedNormPartyArray` (array)
      for (int i = 0; i < jsonArrayrelatedNormPartyArray.size(); i++) {
        RelatedNormParty.validateJsonObject(jsonArrayrelatedNormPartyArray.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NormParty.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NormParty' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NormParty> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NormParty.class));

       return (TypeAdapter<T>) new TypeAdapter<NormParty>() {
           @Override
           public void write(JsonWriter out, NormParty value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NormParty read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NormParty instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NormParty given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NormParty
  * @throws IOException if the JSON string is invalid with respect to NormParty
  */
  public static NormParty fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NormParty.class);
  }

 /**
  * Convert an instance of NormParty to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

