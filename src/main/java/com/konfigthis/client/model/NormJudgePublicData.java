/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.NormJudgePublicDataAbaRatings;
import com.konfigthis.client.model.NormJudgePublicDataBio;
import com.konfigthis.client.model.NormJudgePublicDataEducationArrayInner;
import com.konfigthis.client.model.NormJudgePublicDataJudicialSource;
import com.konfigthis.client.model.NormJudgePublicDataNameHistoryArrayInner;
import com.konfigthis.client.model.ServiceHistory;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * This contains the Judge Public details that is obtained from various sources.
 */
@ApiModel(description = "This contains the Judge Public details that is obtained from various sources.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NormJudgePublicData {
  public static final String SERIALIZED_NAME_ABA_RATINGS = "abaRatings";
  @SerializedName(SERIALIZED_NAME_ABA_RATINGS)
  private NormJudgePublicDataAbaRatings abaRatings;

  public static final String SERIALIZED_NAME_ALIAS_ARRAY = "aliasArray";
  @SerializedName(SERIALIZED_NAME_ALIAS_ARRAY)
  private List<String> aliasArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_BIO = "bio";
  @SerializedName(SERIALIZED_NAME_BIO)
  private NormJudgePublicDataBio bio;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_EDUCATION_ARRAY = "educationArray";
  @SerializedName(SERIALIZED_NAME_EDUCATION_ARRAY)
  private List<NormJudgePublicDataEducationArrayInner> educationArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private OffsetDateTime firstFetchDate;

  public static final String SERIALIZED_NAME_JUDICIAL_SOURCE = "judicialSource";
  @SerializedName(SERIALIZED_NAME_JUDICIAL_SOURCE)
  private NormJudgePublicDataJudicialSource judicialSource;

  public static final String SERIALIZED_NAME_JUDICIAL_STATUS = "judicialStatus";
  @SerializedName(SERIALIZED_NAME_JUDICIAL_STATUS)
  private String judicialStatus;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES = "lastFetchDateWithUpdates";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES)
  private OffsetDateTime lastFetchDateWithUpdates;

  public static final String SERIALIZED_NAME_NAME_HISTORY_ARRAY = "nameHistoryArray";
  @SerializedName(SERIALIZED_NAME_NAME_HISTORY_ARRAY)
  private List<NormJudgePublicDataNameHistoryArrayInner> nameHistoryArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "NormJudgePublicData";

  public static final String SERIALIZED_NAME_PROFESSIONAL_CAREER_ARRAY = "professionalCareerArray";
  @SerializedName(SERIALIZED_NAME_PROFESSIONAL_CAREER_ARRAY)
  private List<String> professionalCareerArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_HISTORY_ARRAY = "serviceHistoryArray";
  @SerializedName(SERIALIZED_NAME_SERVICE_HISTORY_ARRAY)
  private List<ServiceHistory> serviceHistoryArray = new ArrayList<>();

  public NormJudgePublicData() {
  }

  public NormJudgePublicData abaRatings(NormJudgePublicDataAbaRatings abaRatings) {
    
    
    
    
    this.abaRatings = abaRatings;
    return this;
  }

   /**
   * Get abaRatings
   * @return abaRatings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public NormJudgePublicDataAbaRatings getAbaRatings() {
    return abaRatings;
  }


  public void setAbaRatings(NormJudgePublicDataAbaRatings abaRatings) {
    
    
    
    this.abaRatings = abaRatings;
  }


  public NormJudgePublicData aliasArray(List<String> aliasArray) {
    
    
    
    
    this.aliasArray = aliasArray;
    return this;
  }

  public NormJudgePublicData addAliasArrayItem(String aliasArrayItem) {
    this.aliasArray.add(aliasArrayItem);
    return this;
  }

   /**
   * Other Names of the Judge.
   * @return aliasArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Other Names of the Judge.")

  public List<String> getAliasArray() {
    return aliasArray;
  }


  public void setAliasArray(List<String> aliasArray) {
    
    
    
    this.aliasArray = aliasArray;
  }


  public NormJudgePublicData bio(NormJudgePublicDataBio bio) {
    
    
    
    
    this.bio = bio;
    return this;
  }

   /**
   * Get bio
   * @return bio
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NormJudgePublicDataBio getBio() {
    return bio;
  }


  public void setBio(NormJudgePublicDataBio bio) {
    
    
    
    this.bio = bio;
  }


  public NormJudgePublicData contact(Contact contact) {
    
    
    
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    
    
    
    this.contact = contact;
  }


  public NormJudgePublicData educationArray(List<NormJudgePublicDataEducationArrayInner> educationArray) {
    
    
    
    
    this.educationArray = educationArray;
    return this;
  }

  public NormJudgePublicData addEducationArrayItem(NormJudgePublicDataEducationArrayInner educationArrayItem) {
    this.educationArray.add(educationArrayItem);
    return this;
  }

   /**
   * The Education History of the judge.
   * @return educationArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The Education History of the judge.")

  public List<NormJudgePublicDataEducationArrayInner> getEducationArray() {
    return educationArray;
  }


  public void setEducationArray(List<NormJudgePublicDataEducationArrayInner> educationArray) {
    
    
    
    this.educationArray = educationArray;
  }


  public NormJudgePublicData firstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * Get firstFetchDate
   * @return firstFetchDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    
    this.firstFetchDate = firstFetchDate;
  }


  public NormJudgePublicData judicialSource(NormJudgePublicDataJudicialSource judicialSource) {
    
    
    
    
    this.judicialSource = judicialSource;
    return this;
  }

   /**
   * Get judicialSource
   * @return judicialSource
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public NormJudgePublicDataJudicialSource getJudicialSource() {
    return judicialSource;
  }


  public void setJudicialSource(NormJudgePublicDataJudicialSource judicialSource) {
    
    
    
    this.judicialSource = judicialSource;
  }


  public NormJudgePublicData judicialStatus(String judicialStatus) {
    
    
    
    
    this.judicialStatus = judicialStatus;
    return this;
  }

   /**
   * The judicial status of the Judge
   * @return judicialStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "The judicial status of the Judge")

  public String getJudicialStatus() {
    return judicialStatus;
  }


  public void setJudicialStatus(String judicialStatus) {
    
    
    
    this.judicialStatus = judicialStatus;
  }


  public NormJudgePublicData lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * Get lastFetchDate
   * @return lastFetchDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    
    this.lastFetchDate = lastFetchDate;
  }


  public NormJudgePublicData lastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
    return this;
  }

   /**
   * Last Fetch Date of the Judge Update.
   * @return lastFetchDateWithUpdates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Last Fetch Date of the Judge Update.")

  public OffsetDateTime getLastFetchDateWithUpdates() {
    return lastFetchDateWithUpdates;
  }


  public void setLastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
  }


  public NormJudgePublicData nameHistoryArray(List<NormJudgePublicDataNameHistoryArrayInner> nameHistoryArray) {
    
    
    
    
    this.nameHistoryArray = nameHistoryArray;
    return this;
  }

  public NormJudgePublicData addNameHistoryArrayItem(NormJudgePublicDataNameHistoryArrayInner nameHistoryArrayItem) {
    this.nameHistoryArray.add(nameHistoryArrayItem);
    return this;
  }

   /**
   * Name changes of the Judge. Change in the official name. Other names go to Alias array.
   * @return nameHistoryArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Name changes of the Judge. Change in the official name. Other names go to Alias array.")

  public List<NormJudgePublicDataNameHistoryArrayInner> getNameHistoryArray() {
    return nameHistoryArray;
  }


  public void setNameHistoryArray(List<NormJudgePublicDataNameHistoryArrayInner> nameHistoryArray) {
    
    
    
    this.nameHistoryArray = nameHistoryArray;
  }


  public NormJudgePublicData _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NormJudgePublicData", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public NormJudgePublicData professionalCareerArray(List<String> professionalCareerArray) {
    
    
    
    
    this.professionalCareerArray = professionalCareerArray;
    return this;
  }

  public NormJudgePublicData addProfessionalCareerArrayItem(String professionalCareerArrayItem) {
    this.professionalCareerArray.add(professionalCareerArrayItem);
    return this;
  }

   /**
   * The non-judicial career history of the judge.
   * @return professionalCareerArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The non-judicial career history of the judge.")

  public List<String> getProfessionalCareerArray() {
    return professionalCareerArray;
  }


  public void setProfessionalCareerArray(List<String> professionalCareerArray) {
    
    
    
    this.professionalCareerArray = professionalCareerArray;
  }


  public NormJudgePublicData serviceHistoryArray(List<ServiceHistory> serviceHistoryArray) {
    
    
    
    
    this.serviceHistoryArray = serviceHistoryArray;
    return this;
  }

  public NormJudgePublicData addServiceHistoryArrayItem(ServiceHistory serviceHistoryArrayItem) {
    this.serviceHistoryArray.add(serviceHistoryArrayItem);
    return this;
  }

   /**
   * Judicial History of the Judge.
   * @return serviceHistoryArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Judicial History of the Judge.")

  public List<ServiceHistory> getServiceHistoryArray() {
    return serviceHistoryArray;
  }


  public void setServiceHistoryArray(List<ServiceHistory> serviceHistoryArray) {
    
    
    
    this.serviceHistoryArray = serviceHistoryArray;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NormJudgePublicData instance itself
   */
  public NormJudgePublicData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NormJudgePublicData normJudgePublicData = (NormJudgePublicData) o;
    return Objects.equals(this.abaRatings, normJudgePublicData.abaRatings) &&
        Objects.equals(this.aliasArray, normJudgePublicData.aliasArray) &&
        Objects.equals(this.bio, normJudgePublicData.bio) &&
        Objects.equals(this.contact, normJudgePublicData.contact) &&
        Objects.equals(this.educationArray, normJudgePublicData.educationArray) &&
        Objects.equals(this.firstFetchDate, normJudgePublicData.firstFetchDate) &&
        Objects.equals(this.judicialSource, normJudgePublicData.judicialSource) &&
        Objects.equals(this.judicialStatus, normJudgePublicData.judicialStatus) &&
        Objects.equals(this.lastFetchDate, normJudgePublicData.lastFetchDate) &&
        Objects.equals(this.lastFetchDateWithUpdates, normJudgePublicData.lastFetchDateWithUpdates) &&
        Objects.equals(this.nameHistoryArray, normJudgePublicData.nameHistoryArray) &&
        Objects.equals(this._object, normJudgePublicData._object) &&
        Objects.equals(this.professionalCareerArray, normJudgePublicData.professionalCareerArray) &&
        Objects.equals(this.serviceHistoryArray, normJudgePublicData.serviceHistoryArray)&&
        Objects.equals(this.additionalProperties, normJudgePublicData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(abaRatings, aliasArray, bio, contact, educationArray, firstFetchDate, judicialSource, judicialStatus, lastFetchDate, lastFetchDateWithUpdates, nameHistoryArray, _object, professionalCareerArray, serviceHistoryArray, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NormJudgePublicData {\n");
    sb.append("    abaRatings: ").append(toIndentedString(abaRatings)).append("\n");
    sb.append("    aliasArray: ").append(toIndentedString(aliasArray)).append("\n");
    sb.append("    bio: ").append(toIndentedString(bio)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    educationArray: ").append(toIndentedString(educationArray)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    judicialSource: ").append(toIndentedString(judicialSource)).append("\n");
    sb.append("    judicialStatus: ").append(toIndentedString(judicialStatus)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    lastFetchDateWithUpdates: ").append(toIndentedString(lastFetchDateWithUpdates)).append("\n");
    sb.append("    nameHistoryArray: ").append(toIndentedString(nameHistoryArray)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    professionalCareerArray: ").append(toIndentedString(professionalCareerArray)).append("\n");
    sb.append("    serviceHistoryArray: ").append(toIndentedString(serviceHistoryArray)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("abaRatings");
    openapiFields.add("aliasArray");
    openapiFields.add("bio");
    openapiFields.add("contact");
    openapiFields.add("educationArray");
    openapiFields.add("firstFetchDate");
    openapiFields.add("judicialSource");
    openapiFields.add("judicialStatus");
    openapiFields.add("lastFetchDate");
    openapiFields.add("lastFetchDateWithUpdates");
    openapiFields.add("nameHistoryArray");
    openapiFields.add("object");
    openapiFields.add("professionalCareerArray");
    openapiFields.add("serviceHistoryArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("abaRatings");
    openapiRequiredFields.add("aliasArray");
    openapiRequiredFields.add("bio");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("educationArray");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("judicialSource");
    openapiRequiredFields.add("judicialStatus");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("lastFetchDateWithUpdates");
    openapiRequiredFields.add("nameHistoryArray");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("professionalCareerArray");
    openapiRequiredFields.add("serviceHistoryArray");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NormJudgePublicData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NormJudgePublicData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NormJudgePublicData is not found in the empty JSON string", NormJudgePublicData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NormJudgePublicData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `abaRatings`
      NormJudgePublicDataAbaRatings.validateJsonObject(jsonObj.getAsJsonObject("abaRatings"));
      // ensure the required json array is present
      if (jsonObj.get("aliasArray") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("aliasArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `aliasArray` to be an array in the JSON string but got `%s`", jsonObj.get("aliasArray").toString()));
      }
      // validate the required field `bio`
      NormJudgePublicDataBio.validateJsonObject(jsonObj.getAsJsonObject("bio"));
      // validate the required field `contact`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      // ensure the json data is an array
      if (!jsonObj.get("educationArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `educationArray` to be an array in the JSON string but got `%s`", jsonObj.get("educationArray").toString()));
      }

      JsonArray jsonArrayeducationArray = jsonObj.getAsJsonArray("educationArray");
      // validate the required field `educationArray` (array)
      for (int i = 0; i < jsonArrayeducationArray.size(); i++) {
        NormJudgePublicDataEducationArrayInner.validateJsonObject(jsonArrayeducationArray.get(i).getAsJsonObject());
      };
      // validate the required field `judicialSource`
      NormJudgePublicDataJudicialSource.validateJsonObject(jsonObj.getAsJsonObject("judicialSource"));
      if (!jsonObj.get("judicialStatus").isJsonNull() && !jsonObj.get("judicialStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `judicialStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("judicialStatus").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("nameHistoryArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameHistoryArray` to be an array in the JSON string but got `%s`", jsonObj.get("nameHistoryArray").toString()));
      }

      JsonArray jsonArraynameHistoryArray = jsonObj.getAsJsonArray("nameHistoryArray");
      // validate the required field `nameHistoryArray` (array)
      for (int i = 0; i < jsonArraynameHistoryArray.size(); i++) {
        NormJudgePublicDataNameHistoryArrayInner.validateJsonObject(jsonArraynameHistoryArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("professionalCareerArray") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("professionalCareerArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `professionalCareerArray` to be an array in the JSON string but got `%s`", jsonObj.get("professionalCareerArray").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("serviceHistoryArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceHistoryArray` to be an array in the JSON string but got `%s`", jsonObj.get("serviceHistoryArray").toString()));
      }

      JsonArray jsonArrayserviceHistoryArray = jsonObj.getAsJsonArray("serviceHistoryArray");
      // validate the required field `serviceHistoryArray` (array)
      for (int i = 0; i < jsonArrayserviceHistoryArray.size(); i++) {
        ServiceHistory.validateJsonObject(jsonArrayserviceHistoryArray.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NormJudgePublicData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NormJudgePublicData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NormJudgePublicData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NormJudgePublicData.class));

       return (TypeAdapter<T>) new TypeAdapter<NormJudgePublicData>() {
           @Override
           public void write(JsonWriter out, NormJudgePublicData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NormJudgePublicData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NormJudgePublicData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NormJudgePublicData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NormJudgePublicData
  * @throws IOException if the JSON string is invalid with respect to NormJudgePublicData
  */
  public static NormJudgePublicData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NormJudgePublicData.class);
  }

 /**
  * Convert an instance of NormJudgePublicData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

