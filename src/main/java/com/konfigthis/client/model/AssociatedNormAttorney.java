/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.BarRecordPreview;
import com.konfigthis.client.model.CaseTimeline;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * AssociatedNormAttorney
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AssociatedNormAttorney {
  public static final String SERIALIZED_NAME_CASE_COUNT = "caseCount";
  @SerializedName(SERIALIZED_NAME_CASE_COUNT)
  private Integer caseCount;

  public static final String SERIALIZED_NAME_CASE_SEARCH_A_P_I = "caseSearchAPI";
  @SerializedName(SERIALIZED_NAME_CASE_SEARCH_A_P_I)
  private URI caseSearchAPI;

  public static final String SERIALIZED_NAME_CASE_TIMELINE = "caseTimeline";
  @SerializedName(SERIALIZED_NAME_CASE_TIMELINE)
  private CaseTimeline caseTimeline;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NORM_ATTORNEY_A_P_I = "normAttorneyAPI";
  @SerializedName(SERIALIZED_NAME_NORM_ATTORNEY_A_P_I)
  private URI normAttorneyAPI;

  public static final String SERIALIZED_NAME_NORM_ATTORNEY_ID = "normAttorneyId";
  @SerializedName(SERIALIZED_NAME_NORM_ATTORNEY_ID)
  private String normAttorneyId;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "AssociatedNormAttorney";

  public static final String SERIALIZED_NAME_STATE_BAR_DATA_ARRAY = "stateBarDataArray";
  @SerializedName(SERIALIZED_NAME_STATE_BAR_DATA_ARRAY)
  private List<BarRecordPreview> stateBarDataArray = new ArrayList<>();

  public AssociatedNormAttorney() {
  }

  public AssociatedNormAttorney caseCount(Integer caseCount) {
    
    
    
    
    this.caseCount = caseCount;
    return this;
  }

   /**
   * Get caseCount
   * @return caseCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getCaseCount() {
    return caseCount;
  }


  public void setCaseCount(Integer caseCount) {
    
    
    
    this.caseCount = caseCount;
  }


  public AssociatedNormAttorney caseSearchAPI(URI caseSearchAPI) {
    
    
    
    
    this.caseSearchAPI = caseSearchAPI;
    return this;
  }

   /**
   * Link to related cases for this association.
   * @return caseSearchAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Link to related cases for this association.")

  public URI getCaseSearchAPI() {
    return caseSearchAPI;
  }


  public void setCaseSearchAPI(URI caseSearchAPI) {
    
    
    
    this.caseSearchAPI = caseSearchAPI;
  }


  public AssociatedNormAttorney caseTimeline(CaseTimeline caseTimeline) {
    
    
    
    
    this.caseTimeline = caseTimeline;
    return this;
  }

   /**
   * Get caseTimeline
   * @return caseTimeline
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CaseTimeline getCaseTimeline() {
    return caseTimeline;
  }


  public void setCaseTimeline(CaseTimeline caseTimeline) {
    
    
    
    this.caseTimeline = caseTimeline;
  }


  public AssociatedNormAttorney firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public AssociatedNormAttorney lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public AssociatedNormAttorney middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Get middleName
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public AssociatedNormAttorney name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public AssociatedNormAttorney normAttorneyAPI(URI normAttorneyAPI) {
    
    
    
    
    this.normAttorneyAPI = normAttorneyAPI;
    return this;
  }

   /**
   * Link to details for the Attorney.
   * @return normAttorneyAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Link to details for the Attorney.")

  public URI getNormAttorneyAPI() {
    return normAttorneyAPI;
  }


  public void setNormAttorneyAPI(URI normAttorneyAPI) {
    
    
    
    this.normAttorneyAPI = normAttorneyAPI;
  }


  public AssociatedNormAttorney normAttorneyId(String normAttorneyId) {
    
    
    if (normAttorneyId != null && normAttorneyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
    }
    
    this.normAttorneyId = normAttorneyId;
    return this;
  }

   /**
   * Get normAttorneyId
   * @return normAttorneyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getNormAttorneyId() {
    return normAttorneyId;
  }


  public void setNormAttorneyId(String normAttorneyId) {
    
    
    if (normAttorneyId != null && normAttorneyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
    }
    this.normAttorneyId = normAttorneyId;
  }


  public AssociatedNormAttorney _object(String _object) {
    
    
    
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AssociatedNormAttorney", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    
    this._object = _object;
  }


  public AssociatedNormAttorney stateBarDataArray(List<BarRecordPreview> stateBarDataArray) {
    
    
    
    
    this.stateBarDataArray = stateBarDataArray;
    return this;
  }

  public AssociatedNormAttorney addStateBarDataArrayItem(BarRecordPreview stateBarDataArrayItem) {
    this.stateBarDataArray.add(stateBarDataArrayItem);
    return this;
  }

   /**
   * Get stateBarDataArray
   * @return stateBarDataArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<BarRecordPreview> getStateBarDataArray() {
    return stateBarDataArray;
  }


  public void setStateBarDataArray(List<BarRecordPreview> stateBarDataArray) {
    
    
    
    this.stateBarDataArray = stateBarDataArray;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AssociatedNormAttorney instance itself
   */
  public AssociatedNormAttorney putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssociatedNormAttorney associatedNormAttorney = (AssociatedNormAttorney) o;
    return Objects.equals(this.caseCount, associatedNormAttorney.caseCount) &&
        Objects.equals(this.caseSearchAPI, associatedNormAttorney.caseSearchAPI) &&
        Objects.equals(this.caseTimeline, associatedNormAttorney.caseTimeline) &&
        Objects.equals(this.firstName, associatedNormAttorney.firstName) &&
        Objects.equals(this.lastName, associatedNormAttorney.lastName) &&
        Objects.equals(this.middleName, associatedNormAttorney.middleName) &&
        Objects.equals(this.name, associatedNormAttorney.name) &&
        Objects.equals(this.normAttorneyAPI, associatedNormAttorney.normAttorneyAPI) &&
        Objects.equals(this.normAttorneyId, associatedNormAttorney.normAttorneyId) &&
        Objects.equals(this._object, associatedNormAttorney._object) &&
        Objects.equals(this.stateBarDataArray, associatedNormAttorney.stateBarDataArray)&&
        Objects.equals(this.additionalProperties, associatedNormAttorney.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseCount, caseSearchAPI, caseTimeline, firstName, lastName, middleName, name, normAttorneyAPI, normAttorneyId, _object, stateBarDataArray, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssociatedNormAttorney {\n");
    sb.append("    caseCount: ").append(toIndentedString(caseCount)).append("\n");
    sb.append("    caseSearchAPI: ").append(toIndentedString(caseSearchAPI)).append("\n");
    sb.append("    caseTimeline: ").append(toIndentedString(caseTimeline)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    normAttorneyAPI: ").append(toIndentedString(normAttorneyAPI)).append("\n");
    sb.append("    normAttorneyId: ").append(toIndentedString(normAttorneyId)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    stateBarDataArray: ").append(toIndentedString(stateBarDataArray)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseCount");
    openapiFields.add("caseSearchAPI");
    openapiFields.add("caseTimeline");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("name");
    openapiFields.add("normAttorneyAPI");
    openapiFields.add("normAttorneyId");
    openapiFields.add("object");
    openapiFields.add("stateBarDataArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseCount");
    openapiRequiredFields.add("caseSearchAPI");
    openapiRequiredFields.add("caseTimeline");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("middleName");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("normAttorneyAPI");
    openapiRequiredFields.add("normAttorneyId");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("stateBarDataArray");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AssociatedNormAttorney
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AssociatedNormAttorney.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssociatedNormAttorney is not found in the empty JSON string", AssociatedNormAttorney.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AssociatedNormAttorney.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("caseSearchAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseSearchAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseSearchAPI").toString()));
      }
      // validate the required field `caseTimeline`
      CaseTimeline.validateJsonObject(jsonObj.getAsJsonObject("caseTimeline"));
      if (!jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("normAttorneyAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normAttorneyAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normAttorneyAPI").toString()));
      }
      if (!jsonObj.get("normAttorneyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normAttorneyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normAttorneyId").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("stateBarDataArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateBarDataArray` to be an array in the JSON string but got `%s`", jsonObj.get("stateBarDataArray").toString()));
      }

      JsonArray jsonArraystateBarDataArray = jsonObj.getAsJsonArray("stateBarDataArray");
      // validate the required field `stateBarDataArray` (array)
      for (int i = 0; i < jsonArraystateBarDataArray.size(); i++) {
        BarRecordPreview.validateJsonObject(jsonArraystateBarDataArray.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssociatedNormAttorney.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssociatedNormAttorney' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssociatedNormAttorney> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssociatedNormAttorney.class));

       return (TypeAdapter<T>) new TypeAdapter<AssociatedNormAttorney>() {
           @Override
           public void write(JsonWriter out, AssociatedNormAttorney value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AssociatedNormAttorney read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AssociatedNormAttorney instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AssociatedNormAttorney given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AssociatedNormAttorney
  * @throws IOException if the JSON string is invalid with respect to AssociatedNormAttorney
  */
  public static AssociatedNormAttorney fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssociatedNormAttorney.class);
  }

 /**
  * Convert an instance of AssociatedNormAttorney to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

