/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Attorneys;
import com.konfigthis.client.model.CaseCauseOfAction;
import com.konfigthis.client.model.CaseCharge;
import com.konfigthis.client.model.CaseDocuments;
import com.konfigthis.client.model.CaseStats;
import com.konfigthis.client.model.CaseStatus;
import com.konfigthis.client.model.CaseType;
import com.konfigthis.client.model.Court;
import com.konfigthis.client.model.CourtLocation;
import com.konfigthis.client.model.DocketEntries;
import com.konfigthis.client.model.Hearings;
import com.konfigthis.client.model.Judges;
import com.konfigthis.client.model.Parties;
import com.konfigthis.client.model.RelatedCases;
import com.konfigthis.client.model.SourceCaseData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * ModelCase
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ModelCase {
  public static final String SERIALIZED_NAME_ATTORNEYS = "attorneys";
  @SerializedName(SERIALIZED_NAME_ATTORNEYS)
  private Attorneys attorneys;

  public static final String SERIALIZED_NAME_CASE_DOCUMENTS = "caseDocuments";
  @SerializedName(SERIALIZED_NAME_CASE_DOCUMENTS)
  private CaseDocuments caseDocuments;

  public static final String SERIALIZED_NAME_CASE_ID = "caseId";
  @SerializedName(SERIALIZED_NAME_CASE_ID)
  private String caseId;

  public static final String SERIALIZED_NAME_CASE_NAME = "caseName";
  @SerializedName(SERIALIZED_NAME_CASE_NAME)
  private String caseName;

  public static final String SERIALIZED_NAME_CASE_NUMBER = "caseNumber";
  @SerializedName(SERIALIZED_NAME_CASE_NUMBER)
  private String caseNumber;

  public static final String SERIALIZED_NAME_CASE_STATS = "caseStats";
  @SerializedName(SERIALIZED_NAME_CASE_STATS)
  private CaseStats caseStats;

  public static final String SERIALIZED_NAME_CASE_STATUS = "caseStatus";
  @SerializedName(SERIALIZED_NAME_CASE_STATUS)
  private CaseStatus caseStatus;

  public static final String SERIALIZED_NAME_CASE_TYPE = "caseType";
  @SerializedName(SERIALIZED_NAME_CASE_TYPE)
  private CaseType caseType;

  public static final String SERIALIZED_NAME_CAUSE_OF_ACTION_ARRAY = "causeOfActionArray";
  @SerializedName(SERIALIZED_NAME_CAUSE_OF_ACTION_ARRAY)
  private List<CaseCauseOfAction> causeOfActionArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHARGE_ARRAY = "chargeArray";
  @SerializedName(SERIALIZED_NAME_CHARGE_ARRAY)
  private List<CaseCharge> chargeArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_COURT = "court";
  @SerializedName(SERIALIZED_NAME_COURT)
  private Court court;

  public static final String SERIALIZED_NAME_COURT_LOCATION = "courtLocation";
  @SerializedName(SERIALIZED_NAME_COURT_LOCATION)
  private CourtLocation courtLocation;

  public static final String SERIALIZED_NAME_COURT_SERVICE_STATUS_A_P_I = "courtServiceStatusAPI";
  @SerializedName(SERIALIZED_NAME_COURT_SERVICE_STATUS_A_P_I)
  private String courtServiceStatusAPI;

  public static final String SERIALIZED_NAME_COURT_SERVICE_STATUS_ID = "courtServiceStatusId";
  @SerializedName(SERIALIZED_NAME_COURT_SERVICE_STATUS_ID)
  private String courtServiceStatusId;

  public static final String SERIALIZED_NAME_DOCKET_ENTRIES = "docketEntries";
  @SerializedName(SERIALIZED_NAME_DOCKET_ENTRIES)
  private DocketEntries docketEntries;

  public static final String SERIALIZED_NAME_EXPORT_A_P_I = "exportAPI";
  @SerializedName(SERIALIZED_NAME_EXPORT_A_P_I)
  private String exportAPI;

  public static final String SERIALIZED_NAME_FILED_DATE = "filedDate";
  @SerializedName(SERIALIZED_NAME_FILED_DATE)
  private OffsetDateTime filedDate;

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private OffsetDateTime firstFetchDate;

  public static final String SERIALIZED_NAME_HAS_DOCUMENTS_WITH_PREVIEW = "hasDocumentsWithPreview";
  @SerializedName(SERIALIZED_NAME_HAS_DOCUMENTS_WITH_PREVIEW)
  private Boolean hasDocumentsWithPreview;

  public static final String SERIALIZED_NAME_HAS_ONLY_META_INFO = "hasOnlyMetaInfo";
  @SerializedName(SERIALIZED_NAME_HAS_ONLY_META_INFO)
  private Boolean hasOnlyMetaInfo;

  public static final String SERIALIZED_NAME_HEARINGS = "hearings";
  @SerializedName(SERIALIZED_NAME_HEARINGS)
  private Hearings hearings;

  public static final String SERIALIZED_NAME_JUDGES = "judges";
  @SerializedName(SERIALIZED_NAME_JUDGES)
  private Judges judges;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES = "lastFetchDateWithUpdates";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES)
  private OffsetDateTime lastFetchDateWithUpdates;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "Case";

  public static final String SERIALIZED_NAME_PARTICIPANTS_LAST_FETCH_DATE = "participantsLastFetchDate";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS_LAST_FETCH_DATE)
  private OffsetDateTime participantsLastFetchDate;

  public static final String SERIALIZED_NAME_PARTIES = "parties";
  @SerializedName(SERIALIZED_NAME_PARTIES)
  private Parties parties;

  public static final String SERIALIZED_NAME_RELATED_CASES = "relatedCases";
  @SerializedName(SERIALIZED_NAME_RELATED_CASES)
  private RelatedCases relatedCases;

  public static final String SERIALIZED_NAME_SOURCE_CASE_DATA = "sourceCaseData";
  @SerializedName(SERIALIZED_NAME_SOURCE_CASE_DATA)
  private SourceCaseData sourceCaseData;

  /**
   * The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
   */
  @JsonAdapter(SourceDataStatusEnum.Adapter.class)
 public enum SourceDataStatusEnum {
    NO_LONGER_AVAILABLE_IN_COURT("NO_LONGER_AVAILABLE_IN_COURT"),
    
    SOURCE_DEPRECATED("SOURCE_DEPRECATED"),
    
    NULL("null");

    private String value;

    SourceDataStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceDataStatusEnum fromValue(String value) {
      for (SourceDataStatusEnum b : SourceDataStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SourceDataStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceDataStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceDataStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceDataStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_DATA_STATUS = "sourceDataStatus";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_STATUS)
  private SourceDataStatusEnum sourceDataStatus;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private URI url;

  public ModelCase() {
  }

  public ModelCase attorneys(Attorneys attorneys) {
    
    
    
    
    this.attorneys = attorneys;
    return this;
  }

   /**
   * Get attorneys
   * @return attorneys
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Attorneys getAttorneys() {
    return attorneys;
  }


  public void setAttorneys(Attorneys attorneys) {
    
    
    
    this.attorneys = attorneys;
  }


  public ModelCase caseDocuments(CaseDocuments caseDocuments) {
    
    
    
    
    this.caseDocuments = caseDocuments;
    return this;
  }

   /**
   * Get caseDocuments
   * @return caseDocuments
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CaseDocuments getCaseDocuments() {
    return caseDocuments;
  }


  public void setCaseDocuments(CaseDocuments caseDocuments) {
    
    
    
    this.caseDocuments = caseDocuments;
  }


  public ModelCase caseId(String caseId) {
    
    
    if (caseId != null && caseId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
    }
    
    this.caseId = caseId;
    return this;
  }

   /**
   * Unique identifier of Case.
   * @return caseId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CASEgued96d541f794", required = true, value = "Unique identifier of Case.")

  public String getCaseId() {
    return caseId;
  }


  public void setCaseId(String caseId) {
    
    
    if (caseId != null && caseId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
    }
    this.caseId = caseId;
  }


  public ModelCase caseName(String caseName) {
    
    
    
    
    this.caseName = caseName;
    return this;
  }

   /**
   * Case name as provided by Court.
   * @return caseName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Mark C. Bonomi and Nicole A. Bonomi", required = true, value = "Case name as provided by Court.")

  public String getCaseName() {
    return caseName;
  }


  public void setCaseName(String caseName) {
    
    
    
    this.caseName = caseName;
  }


  public ModelCase caseNumber(String caseNumber) {
    
    
    if (caseNumber != null && caseNumber.length() < 3) {
      throw new IllegalArgumentException("Invalid value for caseNumber. Length must be greater than or equal to 3.");
    }
    
    this.caseNumber = caseNumber;
    return this;
  }

   /**
   * Case number as provided by Court.
   * @return caseNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2:19-BK-20033", required = true, value = "Case number as provided by Court.")

  public String getCaseNumber() {
    return caseNumber;
  }


  public void setCaseNumber(String caseNumber) {
    
    
    if (caseNumber != null && caseNumber.length() < 3) {
      throw new IllegalArgumentException("Invalid value for caseNumber. Length must be greater than or equal to 3.");
    }
    this.caseNumber = caseNumber;
  }


  public ModelCase caseStats(CaseStats caseStats) {
    
    
    
    
    this.caseStats = caseStats;
    return this;
  }

   /**
   * Get caseStats
   * @return caseStats
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public CaseStats getCaseStats() {
    return caseStats;
  }


  public void setCaseStats(CaseStats caseStats) {
    
    
    
    this.caseStats = caseStats;
  }


  public ModelCase caseStatus(CaseStatus caseStatus) {
    
    
    
    
    this.caseStatus = caseStatus;
    return this;
  }

   /**
   * Get caseStatus
   * @return caseStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CaseStatus getCaseStatus() {
    return caseStatus;
  }


  public void setCaseStatus(CaseStatus caseStatus) {
    
    
    
    this.caseStatus = caseStatus;
  }


  public ModelCase caseType(CaseType caseType) {
    
    
    
    
    this.caseType = caseType;
    return this;
  }

   /**
   * Get caseType
   * @return caseType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CaseType getCaseType() {
    return caseType;
  }


  public void setCaseType(CaseType caseType) {
    
    
    
    this.caseType = caseType;
  }


  public ModelCase causeOfActionArray(List<CaseCauseOfAction> causeOfActionArray) {
    
    
    
    
    this.causeOfActionArray = causeOfActionArray;
    return this;
  }

  public ModelCase addCauseOfActionArrayItem(CaseCauseOfAction causeOfActionArrayItem) {
    this.causeOfActionArray.add(causeOfActionArrayItem);
    return this;
  }

   /**
   * Array of cause of Actions that are added to this case.
   * @return causeOfActionArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array of cause of Actions that are added to this case.")

  public List<CaseCauseOfAction> getCauseOfActionArray() {
    return causeOfActionArray;
  }


  public void setCauseOfActionArray(List<CaseCauseOfAction> causeOfActionArray) {
    
    
    
    this.causeOfActionArray = causeOfActionArray;
  }


  public ModelCase chargeArray(List<CaseCharge> chargeArray) {
    
    
    
    
    this.chargeArray = chargeArray;
    return this;
  }

  public ModelCase addChargeArrayItem(CaseCharge chargeArrayItem) {
    this.chargeArray.add(chargeArrayItem);
    return this;
  }

   /**
   * Array of charges that are added to this case.
   * @return chargeArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array of charges that are added to this case.")

  public List<CaseCharge> getChargeArray() {
    return chargeArray;
  }


  public void setChargeArray(List<CaseCharge> chargeArray) {
    
    
    
    this.chargeArray = chargeArray;
  }


  public ModelCase court(Court court) {
    
    
    
    
    this.court = court;
    return this;
  }

   /**
   * Get court
   * @return court
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Court getCourt() {
    return court;
  }


  public void setCourt(Court court) {
    
    
    
    this.court = court;
  }


  public ModelCase courtLocation(CourtLocation courtLocation) {
    
    
    
    
    this.courtLocation = courtLocation;
    return this;
  }

   /**
   * Get courtLocation
   * @return courtLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CourtLocation getCourtLocation() {
    return courtLocation;
  }


  public void setCourtLocation(CourtLocation courtLocation) {
    
    
    
    this.courtLocation = courtLocation;
  }


  public ModelCase courtServiceStatusAPI(String courtServiceStatusAPI) {
    
    
    
    
    this.courtServiceStatusAPI = courtServiceStatusAPI;
    return this;
  }

   /**
   * API to get the service statuses of the given case.
   * @return courtServiceStatusAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/courtServiceStatus/CTSSV4vCEaKrhysQPq", required = true, value = "API to get the service statuses of the given case.")

  public String getCourtServiceStatusAPI() {
    return courtServiceStatusAPI;
  }


  public void setCourtServiceStatusAPI(String courtServiceStatusAPI) {
    
    
    
    this.courtServiceStatusAPI = courtServiceStatusAPI;
  }


  public ModelCase courtServiceStatusId(String courtServiceStatusId) {
    
    
    if (courtServiceStatusId != null && courtServiceStatusId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtServiceStatusId. Length must be greater than or equal to 18.");
    }
    
    this.courtServiceStatusId = courtServiceStatusId;
    return this;
  }

   /**
   * Court Service Status ID of the requested case where we can use it to get the service status
   * @return courtServiceStatusId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CTSSV4vCEaKrhysQPq", required = true, value = "Court Service Status ID of the requested case where we can use it to get the service status")

  public String getCourtServiceStatusId() {
    return courtServiceStatusId;
  }


  public void setCourtServiceStatusId(String courtServiceStatusId) {
    
    
    if (courtServiceStatusId != null && courtServiceStatusId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtServiceStatusId. Length must be greater than or equal to 18.");
    }
    this.courtServiceStatusId = courtServiceStatusId;
  }


  public ModelCase docketEntries(DocketEntries docketEntries) {
    
    
    
    
    this.docketEntries = docketEntries;
    return this;
  }

   /**
   * Get docketEntries
   * @return docketEntries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public DocketEntries getDocketEntries() {
    return docketEntries;
  }


  public void setDocketEntries(DocketEntries docketEntries) {
    
    
    
    this.docketEntries = docketEntries;
  }


  public ModelCase exportAPI(String exportAPI) {
    
    
    
    
    this.exportAPI = exportAPI;
    return this;
  }

   /**
   * When a case is beyond the threshold of entities we provide this link so that the user can request and get all the data of the case with one additional call. This data will be zipped and sent via a webhoook.
   * @return exportAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/caseExport/CASEgued96d541f794", required = true, value = "When a case is beyond the threshold of entities we provide this link so that the user can request and get all the data of the case with one additional call. This data will be zipped and sent via a webhoook.")

  public String getExportAPI() {
    return exportAPI;
  }


  public void setExportAPI(String exportAPI) {
    
    
    
    this.exportAPI = exportAPI;
  }


  public ModelCase filedDate(OffsetDateTime filedDate) {
    
    
    if (filedDate != null && filedDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for filedDate. Length must be greater than or equal to 25.");
    }
    
    this.filedDate = filedDate;
    return this;
  }

   /**
   * Filing date for the case provided by the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz
   * @return filedDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "Filing date for the case provided by the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz")

  public OffsetDateTime getFiledDate() {
    return filedDate;
  }


  public void setFiledDate(OffsetDateTime filedDate) {
    
    
    if (filedDate != null && filedDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for filedDate. Length must be greater than or equal to 25.");
    }
    this.filedDate = filedDate;
  }


  public ModelCase firstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * The date and time when the case was first fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,.
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "The date and time when the case was first fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,.")

  public OffsetDateTime getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    this.firstFetchDate = firstFetchDate;
  }


  public ModelCase hasDocumentsWithPreview(Boolean hasDocumentsWithPreview) {
    
    
    
    
    this.hasDocumentsWithPreview = hasDocumentsWithPreview;
    return this;
  }

   /**
   * This field will be set to TRUE if atleast one document has a preview.
   * @return hasDocumentsWithPreview
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "This field will be set to TRUE if atleast one document has a preview.")

  public Boolean getHasDocumentsWithPreview() {
    return hasDocumentsWithPreview;
  }


  public void setHasDocumentsWithPreview(Boolean hasDocumentsWithPreview) {
    
    
    
    this.hasDocumentsWithPreview = hasDocumentsWithPreview;
  }


  public ModelCase hasOnlyMetaInfo(Boolean hasOnlyMetaInfo) {
    
    
    
    
    this.hasOnlyMetaInfo = hasOnlyMetaInfo;
    return this;
  }

   /**
   * This field determines if this case object has only meta information. If the value is true and if the full information is required you would need to call the updateCase API.
   * @return hasOnlyMetaInfo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "This field determines if this case object has only meta information. If the value is true and if the full information is required you would need to call the updateCase API.")

  public Boolean getHasOnlyMetaInfo() {
    return hasOnlyMetaInfo;
  }


  public void setHasOnlyMetaInfo(Boolean hasOnlyMetaInfo) {
    
    
    
    this.hasOnlyMetaInfo = hasOnlyMetaInfo;
  }


  public ModelCase hearings(Hearings hearings) {
    
    
    
    
    this.hearings = hearings;
    return this;
  }

   /**
   * Get hearings
   * @return hearings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Hearings getHearings() {
    return hearings;
  }


  public void setHearings(Hearings hearings) {
    
    
    
    this.hearings = hearings;
  }


  public ModelCase judges(Judges judges) {
    
    
    
    
    this.judges = judges;
    return this;
  }

   /**
   * Get judges
   * @return judges
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Judges getJudges() {
    return judges;
  }


  public void setJudges(Judges judges) {
    
    
    
    this.judges = judges;
  }


  public ModelCase lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
   * @return lastFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    this.lastFetchDate = lastFetchDate;
  }


  public ModelCase lastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    if (lastFetchDateWithUpdates != null && lastFetchDateWithUpdates.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDateWithUpdates. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
    return this;
  }

   /**
   * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
   * @return lastFetchDateWithUpdates
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,")

  public OffsetDateTime getLastFetchDateWithUpdates() {
    return lastFetchDateWithUpdates;
  }


  public void setLastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    if (lastFetchDateWithUpdates != null && lastFetchDateWithUpdates.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDateWithUpdates. Length must be greater than or equal to 25.");
    }
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
  }


  public ModelCase _object(String _object) {
    
    
    if (_object != null && _object.length() < 4) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 4.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Case", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 4) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 4.");
    }
    this._object = _object;
  }


  public ModelCase participantsLastFetchDate(OffsetDateTime participantsLastFetchDate) {
    
    
    if (participantsLastFetchDate != null && participantsLastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for participantsLastFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.participantsLastFetchDate = participantsLastFetchDate;
    return this;
  }

   /**
   * The date and time when parties/attorneys were last updated from the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: This is currently applicable for Federal PACER cases since we have an option to exclude parties and fetch only latest docket entries when updating cases to save PACER fees.
   * @return participantsLastFetchDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "The date and time when parties/attorneys were last updated from the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: This is currently applicable for Federal PACER cases since we have an option to exclude parties and fetch only latest docket entries when updating cases to save PACER fees.")

  public OffsetDateTime getParticipantsLastFetchDate() {
    return participantsLastFetchDate;
  }


  public void setParticipantsLastFetchDate(OffsetDateTime participantsLastFetchDate) {
    
    
    if (participantsLastFetchDate != null && participantsLastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for participantsLastFetchDate. Length must be greater than or equal to 25.");
    }
    this.participantsLastFetchDate = participantsLastFetchDate;
  }


  public ModelCase parties(Parties parties) {
    
    
    
    
    this.parties = parties;
    return this;
  }

   /**
   * Get parties
   * @return parties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public Parties getParties() {
    return parties;
  }


  public void setParties(Parties parties) {
    
    
    
    this.parties = parties;
  }


  public ModelCase relatedCases(RelatedCases relatedCases) {
    
    
    
    
    this.relatedCases = relatedCases;
    return this;
  }

   /**
   * Get relatedCases
   * @return relatedCases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public RelatedCases getRelatedCases() {
    return relatedCases;
  }


  public void setRelatedCases(RelatedCases relatedCases) {
    
    
    
    this.relatedCases = relatedCases;
  }


  public ModelCase sourceCaseData(SourceCaseData sourceCaseData) {
    
    
    
    
    this.sourceCaseData = sourceCaseData;
    return this;
  }

   /**
   * Get sourceCaseData
   * @return sourceCaseData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SourceCaseData getSourceCaseData() {
    return sourceCaseData;
  }


  public void setSourceCaseData(SourceCaseData sourceCaseData) {
    
    
    
    this.sourceCaseData = sourceCaseData;
  }


  public ModelCase sourceDataStatus(SourceDataStatusEnum sourceDataStatus) {
    
    
    
    
    this.sourceDataStatus = sourceDataStatus;
    return this;
  }

   /**
   * The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
   * @return sourceDataStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SOURCE_DEPRECATED", required = true, value = "The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.")

  public SourceDataStatusEnum getSourceDataStatus() {
    return sourceDataStatus;
  }


  public void setSourceDataStatus(SourceDataStatusEnum sourceDataStatus) {
    
    
    
    this.sourceDataStatus = sourceDataStatus;
  }


  public ModelCase url(URI url) {
    
    
    
    
    this.url = url;
    return this;
  }

   /**
   * URL to the case page in UniCourt Application.
   * @return url
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://unicourt.com/case/pc-bk1-osceola-clinic-pharmacy-llc-do-not-docket-in-this-case-jointly-administered-under-17-32186-this-message-does-not-apply-to-proofs-of-claims-271749", required = true, value = "URL to the case page in UniCourt Application.")

  public URI getUrl() {
    return url;
  }


  public void setUrl(URI url) {
    
    
    
    this.url = url;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ModelCase instance itself
   */
  public ModelCase putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelCase _case = (ModelCase) o;
    return Objects.equals(this.attorneys, _case.attorneys) &&
        Objects.equals(this.caseDocuments, _case.caseDocuments) &&
        Objects.equals(this.caseId, _case.caseId) &&
        Objects.equals(this.caseName, _case.caseName) &&
        Objects.equals(this.caseNumber, _case.caseNumber) &&
        Objects.equals(this.caseStats, _case.caseStats) &&
        Objects.equals(this.caseStatus, _case.caseStatus) &&
        Objects.equals(this.caseType, _case.caseType) &&
        Objects.equals(this.causeOfActionArray, _case.causeOfActionArray) &&
        Objects.equals(this.chargeArray, _case.chargeArray) &&
        Objects.equals(this.court, _case.court) &&
        Objects.equals(this.courtLocation, _case.courtLocation) &&
        Objects.equals(this.courtServiceStatusAPI, _case.courtServiceStatusAPI) &&
        Objects.equals(this.courtServiceStatusId, _case.courtServiceStatusId) &&
        Objects.equals(this.docketEntries, _case.docketEntries) &&
        Objects.equals(this.exportAPI, _case.exportAPI) &&
        Objects.equals(this.filedDate, _case.filedDate) &&
        Objects.equals(this.firstFetchDate, _case.firstFetchDate) &&
        Objects.equals(this.hasDocumentsWithPreview, _case.hasDocumentsWithPreview) &&
        Objects.equals(this.hasOnlyMetaInfo, _case.hasOnlyMetaInfo) &&
        Objects.equals(this.hearings, _case.hearings) &&
        Objects.equals(this.judges, _case.judges) &&
        Objects.equals(this.lastFetchDate, _case.lastFetchDate) &&
        Objects.equals(this.lastFetchDateWithUpdates, _case.lastFetchDateWithUpdates) &&
        Objects.equals(this._object, _case._object) &&
        Objects.equals(this.participantsLastFetchDate, _case.participantsLastFetchDate) &&
        Objects.equals(this.parties, _case.parties) &&
        Objects.equals(this.relatedCases, _case.relatedCases) &&
        Objects.equals(this.sourceCaseData, _case.sourceCaseData) &&
        Objects.equals(this.sourceDataStatus, _case.sourceDataStatus) &&
        Objects.equals(this.url, _case.url)&&
        Objects.equals(this.additionalProperties, _case.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attorneys, caseDocuments, caseId, caseName, caseNumber, caseStats, caseStatus, caseType, causeOfActionArray, chargeArray, court, courtLocation, courtServiceStatusAPI, courtServiceStatusId, docketEntries, exportAPI, filedDate, firstFetchDate, hasDocumentsWithPreview, hasOnlyMetaInfo, hearings, judges, lastFetchDate, lastFetchDateWithUpdates, _object, participantsLastFetchDate, parties, relatedCases, sourceCaseData, sourceDataStatus, url, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelCase {\n");
    sb.append("    attorneys: ").append(toIndentedString(attorneys)).append("\n");
    sb.append("    caseDocuments: ").append(toIndentedString(caseDocuments)).append("\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    caseName: ").append(toIndentedString(caseName)).append("\n");
    sb.append("    caseNumber: ").append(toIndentedString(caseNumber)).append("\n");
    sb.append("    caseStats: ").append(toIndentedString(caseStats)).append("\n");
    sb.append("    caseStatus: ").append(toIndentedString(caseStatus)).append("\n");
    sb.append("    caseType: ").append(toIndentedString(caseType)).append("\n");
    sb.append("    causeOfActionArray: ").append(toIndentedString(causeOfActionArray)).append("\n");
    sb.append("    chargeArray: ").append(toIndentedString(chargeArray)).append("\n");
    sb.append("    court: ").append(toIndentedString(court)).append("\n");
    sb.append("    courtLocation: ").append(toIndentedString(courtLocation)).append("\n");
    sb.append("    courtServiceStatusAPI: ").append(toIndentedString(courtServiceStatusAPI)).append("\n");
    sb.append("    courtServiceStatusId: ").append(toIndentedString(courtServiceStatusId)).append("\n");
    sb.append("    docketEntries: ").append(toIndentedString(docketEntries)).append("\n");
    sb.append("    exportAPI: ").append(toIndentedString(exportAPI)).append("\n");
    sb.append("    filedDate: ").append(toIndentedString(filedDate)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    hasDocumentsWithPreview: ").append(toIndentedString(hasDocumentsWithPreview)).append("\n");
    sb.append("    hasOnlyMetaInfo: ").append(toIndentedString(hasOnlyMetaInfo)).append("\n");
    sb.append("    hearings: ").append(toIndentedString(hearings)).append("\n");
    sb.append("    judges: ").append(toIndentedString(judges)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    lastFetchDateWithUpdates: ").append(toIndentedString(lastFetchDateWithUpdates)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    participantsLastFetchDate: ").append(toIndentedString(participantsLastFetchDate)).append("\n");
    sb.append("    parties: ").append(toIndentedString(parties)).append("\n");
    sb.append("    relatedCases: ").append(toIndentedString(relatedCases)).append("\n");
    sb.append("    sourceCaseData: ").append(toIndentedString(sourceCaseData)).append("\n");
    sb.append("    sourceDataStatus: ").append(toIndentedString(sourceDataStatus)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attorneys");
    openapiFields.add("caseDocuments");
    openapiFields.add("caseId");
    openapiFields.add("caseName");
    openapiFields.add("caseNumber");
    openapiFields.add("caseStats");
    openapiFields.add("caseStatus");
    openapiFields.add("caseType");
    openapiFields.add("causeOfActionArray");
    openapiFields.add("chargeArray");
    openapiFields.add("court");
    openapiFields.add("courtLocation");
    openapiFields.add("courtServiceStatusAPI");
    openapiFields.add("courtServiceStatusId");
    openapiFields.add("docketEntries");
    openapiFields.add("exportAPI");
    openapiFields.add("filedDate");
    openapiFields.add("firstFetchDate");
    openapiFields.add("hasDocumentsWithPreview");
    openapiFields.add("hasOnlyMetaInfo");
    openapiFields.add("hearings");
    openapiFields.add("judges");
    openapiFields.add("lastFetchDate");
    openapiFields.add("lastFetchDateWithUpdates");
    openapiFields.add("object");
    openapiFields.add("participantsLastFetchDate");
    openapiFields.add("parties");
    openapiFields.add("relatedCases");
    openapiFields.add("sourceCaseData");
    openapiFields.add("sourceDataStatus");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attorneys");
    openapiRequiredFields.add("caseDocuments");
    openapiRequiredFields.add("caseId");
    openapiRequiredFields.add("caseName");
    openapiRequiredFields.add("caseNumber");
    openapiRequiredFields.add("caseStats");
    openapiRequiredFields.add("caseStatus");
    openapiRequiredFields.add("caseType");
    openapiRequiredFields.add("causeOfActionArray");
    openapiRequiredFields.add("chargeArray");
    openapiRequiredFields.add("court");
    openapiRequiredFields.add("courtLocation");
    openapiRequiredFields.add("courtServiceStatusAPI");
    openapiRequiredFields.add("courtServiceStatusId");
    openapiRequiredFields.add("docketEntries");
    openapiRequiredFields.add("exportAPI");
    openapiRequiredFields.add("filedDate");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("hasDocumentsWithPreview");
    openapiRequiredFields.add("hasOnlyMetaInfo");
    openapiRequiredFields.add("hearings");
    openapiRequiredFields.add("judges");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("lastFetchDateWithUpdates");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("participantsLastFetchDate");
    openapiRequiredFields.add("parties");
    openapiRequiredFields.add("relatedCases");
    openapiRequiredFields.add("sourceCaseData");
    openapiRequiredFields.add("sourceDataStatus");
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ModelCase
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ModelCase.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelCase is not found in the empty JSON string", ModelCase.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ModelCase.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `attorneys`
      Attorneys.validateJsonObject(jsonObj.getAsJsonObject("attorneys"));
      // validate the required field `caseDocuments`
      CaseDocuments.validateJsonObject(jsonObj.getAsJsonObject("caseDocuments"));
      if (!jsonObj.get("caseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseId").toString()));
      }
      if (!jsonObj.get("caseName").isJsonNull() && !jsonObj.get("caseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseName").toString()));
      }
      if (!jsonObj.get("caseNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseNumber").toString()));
      }
      // validate the required field `caseStats`
      CaseStats.validateJsonObject(jsonObj.getAsJsonObject("caseStats"));
      // validate the required field `caseStatus`
      CaseStatus.validateJsonObject(jsonObj.getAsJsonObject("caseStatus"));
      // validate the required field `caseType`
      CaseType.validateJsonObject(jsonObj.getAsJsonObject("caseType"));
      // ensure the json data is an array
      if (!jsonObj.get("causeOfActionArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `causeOfActionArray` to be an array in the JSON string but got `%s`", jsonObj.get("causeOfActionArray").toString()));
      }

      JsonArray jsonArraycauseOfActionArray = jsonObj.getAsJsonArray("causeOfActionArray");
      // validate the required field `causeOfActionArray` (array)
      for (int i = 0; i < jsonArraycauseOfActionArray.size(); i++) {
        CaseCauseOfAction.validateJsonObject(jsonArraycauseOfActionArray.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("chargeArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chargeArray` to be an array in the JSON string but got `%s`", jsonObj.get("chargeArray").toString()));
      }

      JsonArray jsonArraychargeArray = jsonObj.getAsJsonArray("chargeArray");
      // validate the required field `chargeArray` (array)
      for (int i = 0; i < jsonArraychargeArray.size(); i++) {
        CaseCharge.validateJsonObject(jsonArraychargeArray.get(i).getAsJsonObject());
      };
      // validate the required field `court`
      Court.validateJsonObject(jsonObj.getAsJsonObject("court"));
      // validate the required field `courtLocation`
      CourtLocation.validateJsonObject(jsonObj.getAsJsonObject("courtLocation"));
      if (!jsonObj.get("courtServiceStatusAPI").isJsonNull() && !jsonObj.get("courtServiceStatusAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtServiceStatusAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtServiceStatusAPI").toString()));
      }
      if (!jsonObj.get("courtServiceStatusId").isJsonNull() && !jsonObj.get("courtServiceStatusId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtServiceStatusId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtServiceStatusId").toString()));
      }
      // validate the required field `docketEntries`
      DocketEntries.validateJsonObject(jsonObj.getAsJsonObject("docketEntries"));
      if (!jsonObj.get("exportAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exportAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exportAPI").toString()));
      }
      // validate the required field `hearings`
      Hearings.validateJsonObject(jsonObj.getAsJsonObject("hearings"));
      // validate the required field `judges`
      Judges.validateJsonObject(jsonObj.getAsJsonObject("judges"));
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `parties`
      Parties.validateJsonObject(jsonObj.getAsJsonObject("parties"));
      // validate the required field `relatedCases`
      RelatedCases.validateJsonObject(jsonObj.getAsJsonObject("relatedCases"));
      // validate the required field `sourceCaseData`
      SourceCaseData.validateJsonObject(jsonObj.getAsJsonObject("sourceCaseData"));
      if (!jsonObj.get("sourceDataStatus").isJsonNull() && !jsonObj.get("sourceDataStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDataStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDataStatus").toString()));
      }
      if (!jsonObj.get("url").isJsonNull() && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelCase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelCase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelCase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelCase.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelCase>() {
           @Override
           public void write(JsonWriter out, ModelCase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelCase read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ModelCase instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ModelCase given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ModelCase
  * @throws IOException if the JSON string is invalid with respect to ModelCase
  */
  public static ModelCase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelCase.class);
  }

 /**
  * Convert an instance of ModelCase to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

