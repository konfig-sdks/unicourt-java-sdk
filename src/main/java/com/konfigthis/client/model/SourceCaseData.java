/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NatureOfSuit;
import com.konfigthis.client.model.SourceCauseOfAction;
import com.konfigthis.client.model.SourceCharge;
import com.konfigthis.client.model.SourcePageData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Source data in the court website.
 */
@ApiModel(description = "Source data in the court website.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SourceCaseData {
  public static final String SERIALIZED_NAME_NATURE_OF_SUIT_ARRAY = "natureOfSuitArray";
  @SerializedName(SERIALIZED_NAME_NATURE_OF_SUIT_ARRAY)
  private List<NatureOfSuit> natureOfSuitArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "SourceCaseData";

  public static final String SERIALIZED_NAME_SOURCE_CASE_STATUS = "sourceCaseStatus";
  @SerializedName(SERIALIZED_NAME_SOURCE_CASE_STATUS)
  private String sourceCaseStatus;

  public static final String SERIALIZED_NAME_SOURCE_CASE_TYPE = "sourceCaseType";
  @SerializedName(SERIALIZED_NAME_SOURCE_CASE_TYPE)
  private String sourceCaseType;

  public static final String SERIALIZED_NAME_SOURCE_CAUSE_OF_ACTION_ARRAY = "sourceCauseOfActionArray";
  @SerializedName(SERIALIZED_NAME_SOURCE_CAUSE_OF_ACTION_ARRAY)
  private List<SourceCauseOfAction> sourceCauseOfActionArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_CHARGE_ARRAY = "sourceChargeArray";
  @SerializedName(SERIALIZED_NAME_SOURCE_CHARGE_ARRAY)
  private List<SourceCharge> sourceChargeArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_COURT = "sourceCourt";
  @SerializedName(SERIALIZED_NAME_SOURCE_COURT)
  private String sourceCourt;

  public static final String SERIALIZED_NAME_SOURCE_PAGE_DATA = "sourcePageData";
  @SerializedName(SERIALIZED_NAME_SOURCE_PAGE_DATA)
  private List<SourcePageData> sourcePageData = new ArrayList<>();

  public SourceCaseData() {
  }

  public SourceCaseData natureOfSuitArray(List<NatureOfSuit> natureOfSuitArray) {
    
    
    
    
    this.natureOfSuitArray = natureOfSuitArray;
    return this;
  }

  public SourceCaseData addNatureOfSuitArrayItem(NatureOfSuit natureOfSuitArrayItem) {
    this.natureOfSuitArray.add(natureOfSuitArrayItem);
    return this;
  }

   /**
   * Array of Charges for a case which is provided by the Court.
   * @return natureOfSuitArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array of Charges for a case which is provided by the Court.")

  public List<NatureOfSuit> getNatureOfSuitArray() {
    return natureOfSuitArray;
  }


  public void setNatureOfSuitArray(List<NatureOfSuit> natureOfSuitArray) {
    
    
    
    this.natureOfSuitArray = natureOfSuitArray;
  }


  public SourceCaseData _object(String _object) {
    
    
    if (_object != null && _object.length() < 14) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 14.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SourceCaseData", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 14) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 14.");
    }
    this._object = _object;
  }


  public SourceCaseData sourceCaseStatus(String sourceCaseStatus) {
    
    
    
    
    this.sourceCaseStatus = sourceCaseStatus;
    return this;
  }

   /**
   * Case Status as provided by Court.
   * @return sourceCaseStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PENDING", required = true, value = "Case Status as provided by Court.")

  public String getSourceCaseStatus() {
    return sourceCaseStatus;
  }


  public void setSourceCaseStatus(String sourceCaseStatus) {
    
    
    
    this.sourceCaseStatus = sourceCaseStatus;
  }


  public SourceCaseData sourceCaseType(String sourceCaseType) {
    
    
    
    
    this.sourceCaseType = sourceCaseType;
    return this;
  }

   /**
   * Case Type for a case which is provided by the Court.
   * @return sourceCaseType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CHAPTER 13", required = true, value = "Case Type for a case which is provided by the Court.")

  public String getSourceCaseType() {
    return sourceCaseType;
  }


  public void setSourceCaseType(String sourceCaseType) {
    
    
    
    this.sourceCaseType = sourceCaseType;
  }


  public SourceCaseData sourceCauseOfActionArray(List<SourceCauseOfAction> sourceCauseOfActionArray) {
    
    
    
    
    this.sourceCauseOfActionArray = sourceCauseOfActionArray;
    return this;
  }

  public SourceCaseData addSourceCauseOfActionArrayItem(SourceCauseOfAction sourceCauseOfActionArrayItem) {
    this.sourceCauseOfActionArray.add(sourceCauseOfActionArrayItem);
    return this;
  }

   /**
   * Array of Cause Of Action for a case which is provided by the Court.
   * @return sourceCauseOfActionArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array of Cause Of Action for a case which is provided by the Court.")

  public List<SourceCauseOfAction> getSourceCauseOfActionArray() {
    return sourceCauseOfActionArray;
  }


  public void setSourceCauseOfActionArray(List<SourceCauseOfAction> sourceCauseOfActionArray) {
    
    
    
    this.sourceCauseOfActionArray = sourceCauseOfActionArray;
  }


  public SourceCaseData sourceChargeArray(List<SourceCharge> sourceChargeArray) {
    
    
    
    
    this.sourceChargeArray = sourceChargeArray;
    return this;
  }

  public SourceCaseData addSourceChargeArrayItem(SourceCharge sourceChargeArrayItem) {
    this.sourceChargeArray.add(sourceChargeArrayItem);
    return this;
  }

   /**
   * Array of Charges for a case which is provided by the Court.
   * @return sourceChargeArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Array of Charges for a case which is provided by the Court.")

  public List<SourceCharge> getSourceChargeArray() {
    return sourceChargeArray;
  }


  public void setSourceChargeArray(List<SourceCharge> sourceChargeArray) {
    
    
    
    this.sourceChargeArray = sourceChargeArray;
  }


  public SourceCaseData sourceCourt(String sourceCourt) {
    
    
    
    
    this.sourceCourt = sourceCourt;
    return this;
  }

   /**
   * Courtrhouse as provided by Court.
   * @return sourceCourt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "U.S. Bankruptcy Courts", required = true, value = "Courtrhouse as provided by Court.")

  public String getSourceCourt() {
    return sourceCourt;
  }


  public void setSourceCourt(String sourceCourt) {
    
    
    
    this.sourceCourt = sourceCourt;
  }


  public SourceCaseData sourcePageData(List<SourcePageData> sourcePageData) {
    
    
    
    
    this.sourcePageData = sourcePageData;
    return this;
  }

  public SourceCaseData addSourcePageDataItem(SourcePageData sourcePageDataItem) {
    this.sourcePageData.add(sourcePageDataItem);
    return this;
  }

   /**
   * Get sourcePageData
   * @return sourcePageData
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<SourcePageData> getSourcePageData() {
    return sourcePageData;
  }


  public void setSourcePageData(List<SourcePageData> sourcePageData) {
    
    
    
    this.sourcePageData = sourcePageData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SourceCaseData instance itself
   */
  public SourceCaseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceCaseData sourceCaseData = (SourceCaseData) o;
    return Objects.equals(this.natureOfSuitArray, sourceCaseData.natureOfSuitArray) &&
        Objects.equals(this._object, sourceCaseData._object) &&
        Objects.equals(this.sourceCaseStatus, sourceCaseData.sourceCaseStatus) &&
        Objects.equals(this.sourceCaseType, sourceCaseData.sourceCaseType) &&
        Objects.equals(this.sourceCauseOfActionArray, sourceCaseData.sourceCauseOfActionArray) &&
        Objects.equals(this.sourceChargeArray, sourceCaseData.sourceChargeArray) &&
        Objects.equals(this.sourceCourt, sourceCaseData.sourceCourt) &&
        Objects.equals(this.sourcePageData, sourceCaseData.sourcePageData)&&
        Objects.equals(this.additionalProperties, sourceCaseData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(natureOfSuitArray, _object, sourceCaseStatus, sourceCaseType, sourceCauseOfActionArray, sourceChargeArray, sourceCourt, sourcePageData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceCaseData {\n");
    sb.append("    natureOfSuitArray: ").append(toIndentedString(natureOfSuitArray)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    sourceCaseStatus: ").append(toIndentedString(sourceCaseStatus)).append("\n");
    sb.append("    sourceCaseType: ").append(toIndentedString(sourceCaseType)).append("\n");
    sb.append("    sourceCauseOfActionArray: ").append(toIndentedString(sourceCauseOfActionArray)).append("\n");
    sb.append("    sourceChargeArray: ").append(toIndentedString(sourceChargeArray)).append("\n");
    sb.append("    sourceCourt: ").append(toIndentedString(sourceCourt)).append("\n");
    sb.append("    sourcePageData: ").append(toIndentedString(sourcePageData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("natureOfSuitArray");
    openapiFields.add("object");
    openapiFields.add("sourceCaseStatus");
    openapiFields.add("sourceCaseType");
    openapiFields.add("sourceCauseOfActionArray");
    openapiFields.add("sourceChargeArray");
    openapiFields.add("sourceCourt");
    openapiFields.add("sourcePageData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("natureOfSuitArray");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("sourceCaseStatus");
    openapiRequiredFields.add("sourceCaseType");
    openapiRequiredFields.add("sourceCauseOfActionArray");
    openapiRequiredFields.add("sourceChargeArray");
    openapiRequiredFields.add("sourceCourt");
    openapiRequiredFields.add("sourcePageData");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SourceCaseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SourceCaseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SourceCaseData is not found in the empty JSON string", SourceCaseData.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SourceCaseData.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if (!jsonObj.get("natureOfSuitArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `natureOfSuitArray` to be an array in the JSON string but got `%s`", jsonObj.get("natureOfSuitArray").toString()));
      }

      JsonArray jsonArraynatureOfSuitArray = jsonObj.getAsJsonArray("natureOfSuitArray");
      // validate the required field `natureOfSuitArray` (array)
      for (int i = 0; i < jsonArraynatureOfSuitArray.size(); i++) {
        NatureOfSuit.validateJsonObject(jsonArraynatureOfSuitArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("sourceCaseStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCaseStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCaseStatus").toString()));
      }
      if (!jsonObj.get("sourceCaseType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCaseType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCaseType").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sourceCauseOfActionArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCauseOfActionArray` to be an array in the JSON string but got `%s`", jsonObj.get("sourceCauseOfActionArray").toString()));
      }

      JsonArray jsonArraysourceCauseOfActionArray = jsonObj.getAsJsonArray("sourceCauseOfActionArray");
      // validate the required field `sourceCauseOfActionArray` (array)
      for (int i = 0; i < jsonArraysourceCauseOfActionArray.size(); i++) {
        SourceCauseOfAction.validateJsonObject(jsonArraysourceCauseOfActionArray.get(i).getAsJsonObject());
      };
      // ensure the json data is an array
      if (!jsonObj.get("sourceChargeArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceChargeArray` to be an array in the JSON string but got `%s`", jsonObj.get("sourceChargeArray").toString()));
      }

      JsonArray jsonArraysourceChargeArray = jsonObj.getAsJsonArray("sourceChargeArray");
      // validate the required field `sourceChargeArray` (array)
      for (int i = 0; i < jsonArraysourceChargeArray.size(); i++) {
        SourceCharge.validateJsonObject(jsonArraysourceChargeArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("sourceCourt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCourt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCourt").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("sourcePageData").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePageData` to be an array in the JSON string but got `%s`", jsonObj.get("sourcePageData").toString()));
      }

      JsonArray jsonArraysourcePageData = jsonObj.getAsJsonArray("sourcePageData");
      // validate the required field `sourcePageData` (array)
      for (int i = 0; i < jsonArraysourcePageData.size(); i++) {
        SourcePageData.validateJsonObject(jsonArraysourcePageData.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SourceCaseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SourceCaseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SourceCaseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SourceCaseData.class));

       return (TypeAdapter<T>) new TypeAdapter<SourceCaseData>() {
           @Override
           public void write(JsonWriter out, SourceCaseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SourceCaseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SourceCaseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SourceCaseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SourceCaseData
  * @throws IOException if the JSON string is invalid with respect to SourceCaseData
  */
  public static SourceCaseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SourceCaseData.class);
  }

 /**
  * Convert an instance of SourceCaseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

