/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.PreviewDocument;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CaseDocument
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CaseDocument {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ADDED_TO_LIBRARY_DATE = "addedToLibraryDate";
  @SerializedName(SERIALIZED_NAME_ADDED_TO_LIBRARY_DATE)
  private String addedToLibraryDate;

  public static final String SERIALIZED_NAME_CASE_DOCUMENT_ID = "caseDocumentId";
  @SerializedName(SERIALIZED_NAME_CASE_DOCUMENT_ID)
  private String caseDocumentId;

  public static final String SERIALIZED_NAME_CHILD_DOCUMENT_ID_ARRAY = "childDocumentIdArray";
  @SerializedName(SERIALIZED_NAME_CHILD_DOCUMENT_ID_ARRAY)
  private List<String> childDocumentIdArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_DOCUMENT_FILED_DATE = "documentFiledDate";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_FILED_DATE)
  private String documentFiledDate;

  public static final String SERIALIZED_NAME_DOWNLOAD_A_P_I = "downloadAPI";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_A_P_I)
  private String downloadAPI;

  /**
   * Estimated duration of a Order.
   */
  @JsonAdapter(EstimatedOrderDurationEnum.Adapter.class)
 public enum EstimatedOrderDurationEnum {
    ESTIMATEUNAVAILABLE("estimateUnavailable"),
    
    WITHINMINUTES("withinMinutes"),
    
    WITHINHOURS("withinHours"),
    
    WITHINDAYS("withinDays"),
    
    WITHINWEEKS("withinWeeks");

    private String value;

    EstimatedOrderDurationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EstimatedOrderDurationEnum fromValue(String value) {
      for (EstimatedOrderDurationEnum b : EstimatedOrderDurationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EstimatedOrderDurationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EstimatedOrderDurationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EstimatedOrderDurationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EstimatedOrderDurationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_ESTIMATED_ORDER_DURATION = "estimatedOrderDuration";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_ORDER_DURATION)
  private EstimatedOrderDurationEnum estimatedOrderDuration = EstimatedOrderDurationEnum.ESTIMATEUNAVAILABLE;

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private String firstFetchDate;

  public static final String SERIALIZED_NAME_IN_LIBRARY = "inLibrary";
  @SerializedName(SERIALIZED_NAME_IN_LIBRARY)
  private Boolean inLibrary;

  public static final String SERIALIZED_NAME_IS_PREVIEW_AVAILABLE = "isPreviewAvailable";
  @SerializedName(SERIALIZED_NAME_IS_PREVIEW_AVAILABLE)
  private Boolean isPreviewAvailable;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "CaseDocument";

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private Integer pages;

  public static final String SERIALIZED_NAME_PARENT_DOCUMENT_ID = "parentDocumentId";
  @SerializedName(SERIALIZED_NAME_PARENT_DOCUMENT_ID)
  private String parentDocumentId;

  public static final String SERIALIZED_NAME_PREVIEW_DOCUMENT = "previewDocument";
  @SerializedName(SERIALIZED_NAME_PREVIEW_DOCUMENT)
  private PreviewDocument previewDocument;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_SORT_ORDER = "sortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  /**
   * The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
   */
  @JsonAdapter(SourceDataStatusEnum.Adapter.class)
 public enum SourceDataStatusEnum {
    NO_LONGER_AVAILABLE_IN_COURT("NO_LONGER_AVAILABLE_IN_COURT"),
    
    SOURCE_DEPRECATED("SOURCE_DEPRECATED"),
    
    SEALED("SEALED"),
    
    NULL("null");

    private String value;

    SourceDataStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourceDataStatusEnum fromValue(String value) {
      for (SourceDataStatusEnum b : SourceDataStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SourceDataStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourceDataStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourceDataStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourceDataStatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_DATA_STATUS = "sourceDataStatus";
  @SerializedName(SERIALIZED_NAME_SOURCE_DATA_STATUS)
  private SourceDataStatusEnum sourceDataStatus;

  public CaseDocument() {
  }

  public CaseDocument description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Description of the document.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "Description of the document.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CaseDocument addedToLibraryDate(String addedToLibraryDate) {
    
    
    if (addedToLibraryDate != null && addedToLibraryDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for addedToLibraryDate. Length must be greater than or equal to 25.");
    }
    
    this.addedToLibraryDate = addedToLibraryDate;
    return this;
  }

   /**
   * Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.
   * @return addedToLibraryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-02-16T11:43:56.000Z", required = true, value = "Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.")

  public String getAddedToLibraryDate() {
    return addedToLibraryDate;
  }


  public void setAddedToLibraryDate(String addedToLibraryDate) {
    
    
    if (addedToLibraryDate != null && addedToLibraryDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for addedToLibraryDate. Length must be greater than or equal to 25.");
    }
    this.addedToLibraryDate = addedToLibraryDate;
  }


  public CaseDocument caseDocumentId(String caseDocumentId) {
    
    
    if (caseDocumentId != null && caseDocumentId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
    }
    
    this.caseDocumentId = caseDocumentId;
    return this;
  }

   /**
   * UniCourt&#39;s Case Document ID.
   * @return caseDocumentId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CDOCdg1e994374fda7", required = true, value = "UniCourt's Case Document ID.")

  public String getCaseDocumentId() {
    return caseDocumentId;
  }


  public void setCaseDocumentId(String caseDocumentId) {
    
    
    if (caseDocumentId != null && caseDocumentId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
    }
    this.caseDocumentId = caseDocumentId;
  }


  public CaseDocument childDocumentIdArray(List<String> childDocumentIdArray) {
    
    
    
    
    this.childDocumentIdArray = childDocumentIdArray;
    return this;
  }

  public CaseDocument addChildDocumentIdArrayItem(String childDocumentIdArrayItem) {
    this.childDocumentIdArray.add(childDocumentIdArrayItem);
    return this;
  }

   /**
   * List of child document ID&#39;s if exists or else it will be an empty lsit.
   * @return childDocumentIdArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "List of child document ID's if exists or else it will be an empty lsit.")

  public List<String> getChildDocumentIdArray() {
    return childDocumentIdArray;
  }


  public void setChildDocumentIdArray(List<String> childDocumentIdArray) {
    
    
    
    this.childDocumentIdArray = childDocumentIdArray;
  }


  public CaseDocument documentFiledDate(String documentFiledDate) {
    
    
    if (documentFiledDate != null && documentFiledDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for documentFiledDate. Length must be greater than or equal to 25.");
    }
    
    this.documentFiledDate = documentFiledDate;
    return this;
  }

   /**
   * Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.
   * @return documentFiledDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2021-10-10T10:10:24.000Z", required = true, value = "Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.")

  public String getDocumentFiledDate() {
    return documentFiledDate;
  }


  public void setDocumentFiledDate(String documentFiledDate) {
    
    
    if (documentFiledDate != null && documentFiledDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for documentFiledDate. Length must be greater than or equal to 25.");
    }
    this.documentFiledDate = documentFiledDate;
  }


  public CaseDocument downloadAPI(String downloadAPI) {
    
    
    
    
    this.downloadAPI = downloadAPI;
    return this;
  }

   /**
   * Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.
   * @return downloadAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/caseDocumentDownload/CDOC3Ygn47Yuteq3R", required = true, value = "Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.")

  public String getDownloadAPI() {
    return downloadAPI;
  }


  public void setDownloadAPI(String downloadAPI) {
    
    
    
    this.downloadAPI = downloadAPI;
  }


  public CaseDocument estimatedOrderDuration(EstimatedOrderDurationEnum estimatedOrderDuration) {
    
    
    if (estimatedOrderDuration != null && estimatedOrderDuration.length() < 10) {
      throw new IllegalArgumentException("Invalid value for estimatedOrderDuration. Length must be greater than or equal to 10.");
    }
    
    this.estimatedOrderDuration = estimatedOrderDuration;
    return this;
  }

   /**
   * Estimated duration of a Order.
   * @return estimatedOrderDuration
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "WITHINMINUTES", required = true, value = "Estimated duration of a Order.")

  public EstimatedOrderDurationEnum getEstimatedOrderDuration() {
    return estimatedOrderDuration;
  }


  public void setEstimatedOrderDuration(EstimatedOrderDurationEnum estimatedOrderDuration) {
    
    
    if (estimatedOrderDuration != null && estimatedOrderDuration.length() < 10) {
      throw new IllegalArgumentException("Invalid value for estimatedOrderDuration. Length must be greater than or equal to 10.");
    }
    this.estimatedOrderDuration = estimatedOrderDuration;
  }


  public CaseDocument firstFetchDate(String firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * Is the date when the document was first fetched from the court site.
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-10-10T10:10:24.000Z", required = true, value = "Is the date when the document was first fetched from the court site.")

  public String getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(String firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    this.firstFetchDate = firstFetchDate;
  }


  public CaseDocument inLibrary(Boolean inLibrary) {
    
    
    
    
    this.inLibrary = inLibrary;
    return this;
  }

   /**
   * Determines if the document is present in the UniCourt Library or not.
   * @return inLibrary
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Determines if the document is present in the UniCourt Library or not.")

  public Boolean getInLibrary() {
    return inLibrary;
  }


  public void setInLibrary(Boolean inLibrary) {
    
    
    
    this.inLibrary = inLibrary;
  }


  public CaseDocument isPreviewAvailable(Boolean isPreviewAvailable) {
    
    
    
    
    this.isPreviewAvailable = isPreviewAvailable;
    return this;
  }

   /**
   * Determines if a preview is available for the case document.
   * @return isPreviewAvailable
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Determines if a preview is available for the case document.")

  public Boolean getIsPreviewAvailable() {
    return isPreviewAvailable;
  }


  public void setIsPreviewAvailable(Boolean isPreviewAvailable) {
    
    
    
    this.isPreviewAvailable = isPreviewAvailable;
  }


  public CaseDocument name(String name) {
    
    
    
    
    this.name = name;
    return this;
  }

   /**
   * Document name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "204", required = true, value = "Document name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    
    this.name = name;
  }


  public CaseDocument _object(String _object) {
    
    
    if (_object != null && _object.length() < 12) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 12.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CaseDocument", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 12) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 12.");
    }
    this._object = _object;
  }


  public CaseDocument pages(Integer pages) {
    
    
    
    
    this.pages = pages;
    return this;
  }

   /**
   * Total number of pages in the document.
   * @return pages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2", required = true, value = "Total number of pages in the document.")

  public Integer getPages() {
    return pages;
  }


  public void setPages(Integer pages) {
    
    
    
    this.pages = pages;
  }


  public CaseDocument parentDocumentId(String parentDocumentId) {
    
    
    if (parentDocumentId != null && parentDocumentId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for parentDocumentId. Length must be greater than or equal to 18.");
    }
    
    this.parentDocumentId = parentDocumentId;
    return this;
  }

   /**
   * Document ID which is the parent document for the current document. This will be null if the current document is a parent document.
   * @return parentDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CDOC3Ygn4ooAvNjHv", required = true, value = "Document ID which is the parent document for the current document. This will be null if the current document is a parent document.")

  public String getParentDocumentId() {
    return parentDocumentId;
  }


  public void setParentDocumentId(String parentDocumentId) {
    
    
    if (parentDocumentId != null && parentDocumentId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for parentDocumentId. Length must be greater than or equal to 18.");
    }
    this.parentDocumentId = parentDocumentId;
  }


  public CaseDocument previewDocument(PreviewDocument previewDocument) {
    
    
    
    
    this.previewDocument = previewDocument;
    return this;
  }

   /**
   * Get previewDocument
   * @return previewDocument
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public PreviewDocument getPreviewDocument() {
    return previewDocument;
  }


  public void setPreviewDocument(PreviewDocument previewDocument) {
    
    
    
    this.previewDocument = previewDocument;
  }


  public CaseDocument price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

  public CaseDocument price(Integer price) {
    
    
    
    
    this.price = price.doubleValue();
    return this;
  }

   /**
   * Price of the document.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.8", required = true, value = "Price of the document.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public CaseDocument sortOrder(Integer sortOrder) {
    
    
    
    
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Order of documents how it is being stored in UniCourt.
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", required = true, value = "Order of documents how it is being stored in UniCourt.")

  public Integer getSortOrder() {
    return sortOrder;
  }


  public void setSortOrder(Integer sortOrder) {
    
    
    
    this.sortOrder = sortOrder;
  }


  public CaseDocument sourceDataStatus(SourceDataStatusEnum sourceDataStatus) {
    
    
    
    
    this.sourceDataStatus = sourceDataStatus;
    return this;
  }

   /**
   * The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.
   * @return sourceDataStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SOURCE_DEPRECATED", required = true, value = "The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.")

  public SourceDataStatusEnum getSourceDataStatus() {
    return sourceDataStatus;
  }


  public void setSourceDataStatus(SourceDataStatusEnum sourceDataStatus) {
    
    
    
    this.sourceDataStatus = sourceDataStatus;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CaseDocument instance itself
   */
  public CaseDocument putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaseDocument caseDocument = (CaseDocument) o;
    return Objects.equals(this.description, caseDocument.description) &&
        Objects.equals(this.addedToLibraryDate, caseDocument.addedToLibraryDate) &&
        Objects.equals(this.caseDocumentId, caseDocument.caseDocumentId) &&
        Objects.equals(this.childDocumentIdArray, caseDocument.childDocumentIdArray) &&
        Objects.equals(this.documentFiledDate, caseDocument.documentFiledDate) &&
        Objects.equals(this.downloadAPI, caseDocument.downloadAPI) &&
        Objects.equals(this.estimatedOrderDuration, caseDocument.estimatedOrderDuration) &&
        Objects.equals(this.firstFetchDate, caseDocument.firstFetchDate) &&
        Objects.equals(this.inLibrary, caseDocument.inLibrary) &&
        Objects.equals(this.isPreviewAvailable, caseDocument.isPreviewAvailable) &&
        Objects.equals(this.name, caseDocument.name) &&
        Objects.equals(this._object, caseDocument._object) &&
        Objects.equals(this.pages, caseDocument.pages) &&
        Objects.equals(this.parentDocumentId, caseDocument.parentDocumentId) &&
        Objects.equals(this.previewDocument, caseDocument.previewDocument) &&
        Objects.equals(this.price, caseDocument.price) &&
        Objects.equals(this.sortOrder, caseDocument.sortOrder) &&
        Objects.equals(this.sourceDataStatus, caseDocument.sourceDataStatus)&&
        Objects.equals(this.additionalProperties, caseDocument.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, addedToLibraryDate, caseDocumentId, childDocumentIdArray, documentFiledDate, downloadAPI, estimatedOrderDuration, firstFetchDate, inLibrary, isPreviewAvailable, name, _object, pages, parentDocumentId, previewDocument, price, sortOrder, sourceDataStatus, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaseDocument {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    addedToLibraryDate: ").append(toIndentedString(addedToLibraryDate)).append("\n");
    sb.append("    caseDocumentId: ").append(toIndentedString(caseDocumentId)).append("\n");
    sb.append("    childDocumentIdArray: ").append(toIndentedString(childDocumentIdArray)).append("\n");
    sb.append("    documentFiledDate: ").append(toIndentedString(documentFiledDate)).append("\n");
    sb.append("    downloadAPI: ").append(toIndentedString(downloadAPI)).append("\n");
    sb.append("    estimatedOrderDuration: ").append(toIndentedString(estimatedOrderDuration)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    inLibrary: ").append(toIndentedString(inLibrary)).append("\n");
    sb.append("    isPreviewAvailable: ").append(toIndentedString(isPreviewAvailable)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    parentDocumentId: ").append(toIndentedString(parentDocumentId)).append("\n");
    sb.append("    previewDocument: ").append(toIndentedString(previewDocument)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("    sourceDataStatus: ").append(toIndentedString(sourceDataStatus)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("addedToLibraryDate");
    openapiFields.add("caseDocumentId");
    openapiFields.add("childDocumentIdArray");
    openapiFields.add("documentFiledDate");
    openapiFields.add("downloadAPI");
    openapiFields.add("estimatedOrderDuration");
    openapiFields.add("firstFetchDate");
    openapiFields.add("inLibrary");
    openapiFields.add("isPreviewAvailable");
    openapiFields.add("name");
    openapiFields.add("object");
    openapiFields.add("pages");
    openapiFields.add("parentDocumentId");
    openapiFields.add("previewDocument");
    openapiFields.add("price");
    openapiFields.add("sortOrder");
    openapiFields.add("sourceDataStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("addedToLibraryDate");
    openapiRequiredFields.add("caseDocumentId");
    openapiRequiredFields.add("childDocumentIdArray");
    openapiRequiredFields.add("documentFiledDate");
    openapiRequiredFields.add("downloadAPI");
    openapiRequiredFields.add("estimatedOrderDuration");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("inLibrary");
    openapiRequiredFields.add("isPreviewAvailable");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("pages");
    openapiRequiredFields.add("parentDocumentId");
    openapiRequiredFields.add("previewDocument");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("sortOrder");
    openapiRequiredFields.add("sourceDataStatus");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CaseDocument
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CaseDocument.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaseDocument is not found in the empty JSON string", CaseDocument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CaseDocument.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("addedToLibraryDate").isJsonNull() && !jsonObj.get("addedToLibraryDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addedToLibraryDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addedToLibraryDate").toString()));
      }
      if (!jsonObj.get("caseDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseDocumentId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("childDocumentIdArray") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("childDocumentIdArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `childDocumentIdArray` to be an array in the JSON string but got `%s`", jsonObj.get("childDocumentIdArray").toString()));
      }
      if (!jsonObj.get("documentFiledDate").isJsonNull() && !jsonObj.get("documentFiledDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `documentFiledDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("documentFiledDate").toString()));
      }
      if (!jsonObj.get("downloadAPI").isJsonNull() && !jsonObj.get("downloadAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadAPI").toString()));
      }
      if (!jsonObj.get("estimatedOrderDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimatedOrderDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimatedOrderDuration").toString()));
      }
      if (!jsonObj.get("firstFetchDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstFetchDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstFetchDate").toString()));
      }
      if (!jsonObj.get("name").isJsonNull() && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("parentDocumentId").isJsonNull() && !jsonObj.get("parentDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentDocumentId").toString()));
      }
      // validate the required field `previewDocument`
      PreviewDocument.validateJsonObject(jsonObj.getAsJsonObject("previewDocument"));
      if (!jsonObj.get("sourceDataStatus").isJsonNull() && !jsonObj.get("sourceDataStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceDataStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceDataStatus").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaseDocument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaseDocument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaseDocument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaseDocument.class));

       return (TypeAdapter<T>) new TypeAdapter<CaseDocument>() {
           @Override
           public void write(JsonWriter out, CaseDocument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CaseDocument read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CaseDocument instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CaseDocument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CaseDocument
  * @throws IOException if the JSON string is invalid with respect to CaseDocument
  */
  public static CaseDocument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaseDocument.class);
  }

 /**
  * Convert an instance of CaseDocument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

