/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AdditionalLevels;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Court
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Court {
  public static final String SERIALIZED_NAME_ADDITIONAL_LEVELS = "additionalLevels";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_LEVELS)
  private AdditionalLevels additionalLevels;

  public static final String SERIALIZED_NAME_APPEAL_COURTS_FOR_COURT_A_P_I = "appealCourtsForCourtAPI";
  @SerializedName(SERIALIZED_NAME_APPEAL_COURTS_FOR_COURT_A_P_I)
  private URI appealCourtsForCourtAPI;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_CONTAINER_TYPE = "containerType";
  @SerializedName(SERIALIZED_NAME_CONTAINER_TYPE)
  private String containerType;

  public static final String SERIALIZED_NAME_COURT_ID = "courtId";
  @SerializedName(SERIALIZED_NAME_COURT_ID)
  private String courtId;

  public static final String SERIALIZED_NAME_COURT_LOCATIONS_FOR_COURT_A_P_I = "courtLocationsForCourtAPI";
  @SerializedName(SERIALIZED_NAME_COURT_LOCATIONS_FOR_COURT_A_P_I)
  private URI courtLocationsForCourtAPI;

  public static final String SERIALIZED_NAME_COURT_SERVICE_STATUS_A_P_I = "courtServiceStatusAPI";
  @SerializedName(SERIALIZED_NAME_COURT_SERVICE_STATUS_A_P_I)
  private URI courtServiceStatusAPI;

  public static final String SERIALIZED_NAME_COURT_SYSTEM_ID = "courtSystemId";
  @SerializedName(SERIALIZED_NAME_COURT_SYSTEM_ID)
  private String courtSystemId;

  public static final String SERIALIZED_NAME_COURT_TYPE_ID = "courtTypeId";
  @SerializedName(SERIALIZED_NAME_COURT_TYPE_ID)
  private String courtTypeId;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_JURISDICTION_GEO_FOR_COURT_A_P_I = "jurisdictionGeoForCourtAPI";
  @SerializedName(SERIALIZED_NAME_JURISDICTION_GEO_FOR_COURT_A_P_I)
  private URI jurisdictionGeoForCourtAPI;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_AKA = "nameAka";
  @SerializedName(SERIALIZED_NAME_NAME_AKA)
  private String nameAka;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "Court";

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private String system;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Court() {
  }

  public Court additionalLevels(AdditionalLevels additionalLevels) {
    
    
    
    
    this.additionalLevels = additionalLevels;
    return this;
  }

   /**
   * Get additionalLevels
   * @return additionalLevels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public AdditionalLevels getAdditionalLevels() {
    return additionalLevels;
  }


  public void setAdditionalLevels(AdditionalLevels additionalLevels) {
    
    
    
    this.additionalLevels = additionalLevels;
  }


  public Court appealCourtsForCourtAPI(URI appealCourtsForCourtAPI) {
    
    
    if (appealCourtsForCourtAPI != null && appealCourtsForCourtAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for appealCourtsForCourtAPI. Length must be greater than or equal to 1.");
    }
    
    this.appealCourtsForCourtAPI = appealCourtsForCourtAPI;
    return this;
  }

   /**
   * Get appealCourtsForCourtAPI
   * @return appealCourtsForCourtAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/court/CORTV4vCEaKrhystBz/appealCourts", required = true, value = "")

  public URI getAppealCourtsForCourtAPI() {
    return appealCourtsForCourtAPI;
  }


  public void setAppealCourtsForCourtAPI(URI appealCourtsForCourtAPI) {
    
    
    if (appealCourtsForCourtAPI != null && appealCourtsForCourtAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for appealCourtsForCourtAPI. Length must be greater than or equal to 1.");
    }
    this.appealCourtsForCourtAPI = appealCourtsForCourtAPI;
  }


  public Court container(String container) {
    
    
    if (container != null && container.length() < 1) {
      throw new IllegalArgumentException("Invalid value for container. Length must be greater than or equal to 1.");
    }
    
    this.container = container;
    return this;
  }

   /**
   * Get container
   * @return container
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getContainer() {
    return container;
  }


  public void setContainer(String container) {
    
    
    if (container != null && container.length() < 1) {
      throw new IllegalArgumentException("Invalid value for container. Length must be greater than or equal to 1.");
    }
    this.container = container;
  }


  public Court containerType(String containerType) {
    
    
    if (containerType != null && containerType.length() < 1) {
      throw new IllegalArgumentException("Invalid value for containerType. Length must be greater than or equal to 1.");
    }
    
    this.containerType = containerType;
    return this;
  }

   /**
   * Get containerType
   * @return containerType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getContainerType() {
    return containerType;
  }


  public void setContainerType(String containerType) {
    
    
    if (containerType != null && containerType.length() < 1) {
      throw new IllegalArgumentException("Invalid value for containerType. Length must be greater than or equal to 1.");
    }
    this.containerType = containerType;
  }


  public Court courtId(String courtId) {
    
    
    if (courtId != null && courtId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
    }
    
    this.courtId = courtId;
    return this;
  }

   /**
   * Get courtId
   * @return courtId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CORTV4vCEaKrhystBz", required = true, value = "")

  public String getCourtId() {
    return courtId;
  }


  public void setCourtId(String courtId) {
    
    
    if (courtId != null && courtId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
    }
    this.courtId = courtId;
  }


  public Court courtLocationsForCourtAPI(URI courtLocationsForCourtAPI) {
    
    
    if (courtLocationsForCourtAPI != null && courtLocationsForCourtAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtLocationsForCourtAPI. Length must be greater than or equal to 1.");
    }
    
    this.courtLocationsForCourtAPI = courtLocationsForCourtAPI;
    return this;
  }

   /**
   * Get courtLocationsForCourtAPI
   * @return courtLocationsForCourtAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/court/CORTV4vCEaKrhystBz/courtLocations", required = true, value = "")

  public URI getCourtLocationsForCourtAPI() {
    return courtLocationsForCourtAPI;
  }


  public void setCourtLocationsForCourtAPI(URI courtLocationsForCourtAPI) {
    
    
    if (courtLocationsForCourtAPI != null && courtLocationsForCourtAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtLocationsForCourtAPI. Length must be greater than or equal to 1.");
    }
    this.courtLocationsForCourtAPI = courtLocationsForCourtAPI;
  }


  public Court courtServiceStatusAPI(URI courtServiceStatusAPI) {
    
    
    if (courtServiceStatusAPI != null && courtServiceStatusAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtServiceStatusAPI. Length must be greater than or equal to 1.");
    }
    
    this.courtServiceStatusAPI = courtServiceStatusAPI;
    return this;
  }

   /**
   * Get courtServiceStatusAPI
   * @return courtServiceStatusAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/courtServiceStatus?q=(Court%3A(courtId%3A%22CORTV4vCEaKrhystBz%22))", required = true, value = "")

  public URI getCourtServiceStatusAPI() {
    return courtServiceStatusAPI;
  }


  public void setCourtServiceStatusAPI(URI courtServiceStatusAPI) {
    
    
    if (courtServiceStatusAPI != null && courtServiceStatusAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtServiceStatusAPI. Length must be greater than or equal to 1.");
    }
    this.courtServiceStatusAPI = courtServiceStatusAPI;
  }


  public Court courtSystemId(String courtSystemId) {
    
    
    if (courtSystemId != null && courtSystemId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtSystemId. Length must be greater than or equal to 18.");
    }
    
    this.courtSystemId = courtSystemId;
    return this;
  }

   /**
   * Get courtSystemId
   * @return courtSystemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COSYACHBdMewtaG5DY", required = true, value = "")

  public String getCourtSystemId() {
    return courtSystemId;
  }


  public void setCourtSystemId(String courtSystemId) {
    
    
    if (courtSystemId != null && courtSystemId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtSystemId. Length must be greater than or equal to 18.");
    }
    this.courtSystemId = courtSystemId;
  }


  public Court courtTypeId(String courtTypeId) {
    
    
    if (courtTypeId != null && courtTypeId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtTypeId. Length must be greater than or equal to 18.");
    }
    
    this.courtTypeId = courtTypeId;
    return this;
  }

   /**
   * Get courtTypeId
   * @return courtTypeId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COTPm8jjc2PAydpFhq", required = true, value = "")

  public String getCourtTypeId() {
    return courtTypeId;
  }


  public void setCourtTypeId(String courtTypeId) {
    
    
    if (courtTypeId != null && courtTypeId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtTypeId. Length must be greater than or equal to 18.");
    }
    this.courtTypeId = courtTypeId;
  }


  public Court createdDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-07T10:17:56Z", required = true, value = "The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    this.createdDate = createdDate;
  }


  public Court jurisdictionGeoForCourtAPI(URI jurisdictionGeoForCourtAPI) {
    
    
    if (jurisdictionGeoForCourtAPI != null && jurisdictionGeoForCourtAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for jurisdictionGeoForCourtAPI. Length must be greater than or equal to 1.");
    }
    
    this.jurisdictionGeoForCourtAPI = jurisdictionGeoForCourtAPI;
    return this;
  }

   /**
   * Get jurisdictionGeoForCourtAPI
   * @return jurisdictionGeoForCourtAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/court/CORTV4vCEaKrhystBz/jurisdictionGeo", required = true, value = "")

  public URI getJurisdictionGeoForCourtAPI() {
    return jurisdictionGeoForCourtAPI;
  }


  public void setJurisdictionGeoForCourtAPI(URI jurisdictionGeoForCourtAPI) {
    
    
    if (jurisdictionGeoForCourtAPI != null && jurisdictionGeoForCourtAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for jurisdictionGeoForCourtAPI. Length must be greater than or equal to 1.");
    }
    this.jurisdictionGeoForCourtAPI = jurisdictionGeoForCourtAPI;
  }


  public Court name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Los Angeles County Superior Court", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public Court nameAka(String nameAka) {
    
    
    if (nameAka != null && nameAka.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nameAka. Length must be greater than or equal to 1.");
    }
    
    this.nameAka = nameAka;
    return this;
  }

   /**
   * Get nameAka
   * @return nameAka
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Los Angeles County Superior Court of California", required = true, value = "")

  public String getNameAka() {
    return nameAka;
  }


  public void setNameAka(String nameAka) {
    
    
    if (nameAka != null && nameAka.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nameAka. Length must be greater than or equal to 1.");
    }
    this.nameAka = nameAka;
  }


  public Court _object(String _object) {
    
    
    if (_object != null && _object.length() < 5) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 5.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Court", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 5) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 5.");
    }
    this._object = _object;
  }


  public Court system(String system) {
    
    
    if (system != null && system.length() < 1) {
      throw new IllegalArgumentException("Invalid value for system. Length must be greater than or equal to 1.");
    }
    
    this.system = system;
    return this;
  }

   /**
   * Get system
   * @return system
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "California Superior Courts", required = true, value = "")

  public String getSystem() {
    return system;
  }


  public void setSystem(String system) {
    
    
    if (system != null && system.length() < 1) {
      throw new IllegalArgumentException("Invalid value for system. Length must be greater than or equal to 1.");
    }
    this.system = system;
  }


  public Court type(String type) {
    
    
    if (type != null && type.length() < 1) {
      throw new IllegalArgumentException("Invalid value for type. Length must be greater than or equal to 1.");
    }
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "State", required = true, value = "")

  public String getType() {
    return type;
  }


  public void setType(String type) {
    
    
    if (type != null && type.length() < 1) {
      throw new IllegalArgumentException("Invalid value for type. Length must be greater than or equal to 1.");
    }
    this.type = type;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Court instance itself
   */
  public Court putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Court court = (Court) o;
    return Objects.equals(this.additionalLevels, court.additionalLevels) &&
        Objects.equals(this.appealCourtsForCourtAPI, court.appealCourtsForCourtAPI) &&
        Objects.equals(this.container, court.container) &&
        Objects.equals(this.containerType, court.containerType) &&
        Objects.equals(this.courtId, court.courtId) &&
        Objects.equals(this.courtLocationsForCourtAPI, court.courtLocationsForCourtAPI) &&
        Objects.equals(this.courtServiceStatusAPI, court.courtServiceStatusAPI) &&
        Objects.equals(this.courtSystemId, court.courtSystemId) &&
        Objects.equals(this.courtTypeId, court.courtTypeId) &&
        Objects.equals(this.createdDate, court.createdDate) &&
        Objects.equals(this.jurisdictionGeoForCourtAPI, court.jurisdictionGeoForCourtAPI) &&
        Objects.equals(this.name, court.name) &&
        Objects.equals(this.nameAka, court.nameAka) &&
        Objects.equals(this._object, court._object) &&
        Objects.equals(this.system, court.system) &&
        Objects.equals(this.type, court.type)&&
        Objects.equals(this.additionalProperties, court.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalLevels, appealCourtsForCourtAPI, container, containerType, courtId, courtLocationsForCourtAPI, courtServiceStatusAPI, courtSystemId, courtTypeId, createdDate, jurisdictionGeoForCourtAPI, name, nameAka, _object, system, type, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Court {\n");
    sb.append("    additionalLevels: ").append(toIndentedString(additionalLevels)).append("\n");
    sb.append("    appealCourtsForCourtAPI: ").append(toIndentedString(appealCourtsForCourtAPI)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    containerType: ").append(toIndentedString(containerType)).append("\n");
    sb.append("    courtId: ").append(toIndentedString(courtId)).append("\n");
    sb.append("    courtLocationsForCourtAPI: ").append(toIndentedString(courtLocationsForCourtAPI)).append("\n");
    sb.append("    courtServiceStatusAPI: ").append(toIndentedString(courtServiceStatusAPI)).append("\n");
    sb.append("    courtSystemId: ").append(toIndentedString(courtSystemId)).append("\n");
    sb.append("    courtTypeId: ").append(toIndentedString(courtTypeId)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    jurisdictionGeoForCourtAPI: ").append(toIndentedString(jurisdictionGeoForCourtAPI)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nameAka: ").append(toIndentedString(nameAka)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalLevels");
    openapiFields.add("appealCourtsForCourtAPI");
    openapiFields.add("container");
    openapiFields.add("containerType");
    openapiFields.add("courtId");
    openapiFields.add("courtLocationsForCourtAPI");
    openapiFields.add("courtServiceStatusAPI");
    openapiFields.add("courtSystemId");
    openapiFields.add("courtTypeId");
    openapiFields.add("createdDate");
    openapiFields.add("jurisdictionGeoForCourtAPI");
    openapiFields.add("name");
    openapiFields.add("nameAka");
    openapiFields.add("object");
    openapiFields.add("system");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("additionalLevels");
    openapiRequiredFields.add("appealCourtsForCourtAPI");
    openapiRequiredFields.add("container");
    openapiRequiredFields.add("containerType");
    openapiRequiredFields.add("courtId");
    openapiRequiredFields.add("courtLocationsForCourtAPI");
    openapiRequiredFields.add("courtServiceStatusAPI");
    openapiRequiredFields.add("courtSystemId");
    openapiRequiredFields.add("courtTypeId");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("jurisdictionGeoForCourtAPI");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("nameAka");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("system");
    openapiRequiredFields.add("type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Court
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Court.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Court is not found in the empty JSON string", Court.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Court.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `additionalLevels`
      AdditionalLevels.validateJsonObject(jsonObj.getAsJsonObject("additionalLevels"));
      if (!jsonObj.get("appealCourtsForCourtAPI").isJsonNull() && !jsonObj.get("appealCourtsForCourtAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appealCourtsForCourtAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appealCourtsForCourtAPI").toString()));
      }
      if (!jsonObj.get("container").isJsonNull() && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if (!jsonObj.get("containerType").isJsonNull() && !jsonObj.get("containerType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containerType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containerType").toString()));
      }
      if (!jsonObj.get("courtId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtId").toString()));
      }
      if (!jsonObj.get("courtLocationsForCourtAPI").isJsonNull() && !jsonObj.get("courtLocationsForCourtAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtLocationsForCourtAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtLocationsForCourtAPI").toString()));
      }
      if (!jsonObj.get("courtServiceStatusAPI").isJsonNull() && !jsonObj.get("courtServiceStatusAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtServiceStatusAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtServiceStatusAPI").toString()));
      }
      if (!jsonObj.get("courtSystemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtSystemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtSystemId").toString()));
      }
      if (!jsonObj.get("courtTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtTypeId").toString()));
      }
      if (!jsonObj.get("jurisdictionGeoForCourtAPI").isJsonNull() && !jsonObj.get("jurisdictionGeoForCourtAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jurisdictionGeoForCourtAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jurisdictionGeoForCourtAPI").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("nameAka").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameAka` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameAka").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("system").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `system` to be a primitive type in the JSON string but got `%s`", jsonObj.get("system").toString()));
      }
      if (!jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Court.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Court' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Court> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Court.class));

       return (TypeAdapter<T>) new TypeAdapter<Court>() {
           @Override
           public void write(JsonWriter out, Court value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Court read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Court instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Court given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Court
  * @throws IOException if the JSON string is invalid with respect to Court
  */
  public static Court fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Court.class);
  }

 /**
  * Convert an instance of Court to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

