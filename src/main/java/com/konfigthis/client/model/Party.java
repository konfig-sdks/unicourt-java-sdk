/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AttorneyRepresentationType;
import com.konfigthis.client.model.Contact;
import com.konfigthis.client.model.PartyAttorneyAssociations;
import com.konfigthis.client.model.PartyRole;
import com.konfigthis.client.model.PossibleNormParty;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Party
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Party {
  public static final String SERIALIZED_NAME_ATTORNEY_REPRESENTATION_TYPE = "attorneyRepresentationType";
  @SerializedName(SERIALIZED_NAME_ATTORNEY_REPRESENTATION_TYPE)
  private AttorneyRepresentationType attorneyRepresentationType;

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private Contact contact;

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private OffsetDateTime firstFetchDate;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "isVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_MIDDLE_NAME = "middleName";
  @SerializedName(SERIALIZED_NAME_MIDDLE_NAME)
  private String middleName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NAME_PREFIX = "namePrefix";
  @SerializedName(SERIALIZED_NAME_NAME_PREFIX)
  private String namePrefix;

  public static final String SERIALIZED_NAME_NAME_SUFFIX = "nameSuffix";
  @SerializedName(SERIALIZED_NAME_NAME_SUFFIX)
  private String nameSuffix;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "Party";

  public static final String SERIALIZED_NAME_PARTY_ATTORNEY_ASSOCIATIONS = "partyAttorneyAssociations";
  @SerializedName(SERIALIZED_NAME_PARTY_ATTORNEY_ASSOCIATIONS)
  private PartyAttorneyAssociations partyAttorneyAssociations;

  /**
   * To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.
   */
  @JsonAdapter(PartyClassificationTypeEnum.Adapter.class)
 public enum PartyClassificationTypeEnum {
    INDIVIDUAL("INDIVIDUAL"),
    
    COMPANY("COMPANY"),
    
    OTHER("OTHER");

    private String value;

    PartyClassificationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PartyClassificationTypeEnum fromValue(String value) {
      for (PartyClassificationTypeEnum b : PartyClassificationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PartyClassificationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PartyClassificationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PartyClassificationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PartyClassificationTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_PARTY_CLASSIFICATION_TYPE = "partyClassificationType";
  @SerializedName(SERIALIZED_NAME_PARTY_CLASSIFICATION_TYPE)
  private PartyClassificationTypeEnum partyClassificationType;

  public static final String SERIALIZED_NAME_PARTY_ID = "partyId";
  @SerializedName(SERIALIZED_NAME_PARTY_ID)
  private String partyId;

  public static final String SERIALIZED_NAME_PARTY_ROLE = "partyRole";
  @SerializedName(SERIALIZED_NAME_PARTY_ROLE)
  private PartyRole partyRole;

  public static final String SERIALIZED_NAME_POSSIBLE_NORM_PARTY_ARRAY = "possibleNormPartyArray";
  @SerializedName(SERIALIZED_NAME_POSSIBLE_NORM_PARTY_ARRAY)
  private List<PossibleNormParty> possibleNormPartyArray = new ArrayList<>();

  public static final String SERIALIZED_NAME_SOURCE_PARTY_ROLE = "sourcePartyRole";
  @SerializedName(SERIALIZED_NAME_SOURCE_PARTY_ROLE)
  private String sourcePartyRole;

  public Party() {
  }

  public Party attorneyRepresentationType(AttorneyRepresentationType attorneyRepresentationType) {
    
    
    
    
    this.attorneyRepresentationType = attorneyRepresentationType;
    return this;
  }

   /**
   * Get attorneyRepresentationType
   * @return attorneyRepresentationType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public AttorneyRepresentationType getAttorneyRepresentationType() {
    return attorneyRepresentationType;
  }


  public void setAttorneyRepresentationType(AttorneyRepresentationType attorneyRepresentationType) {
    
    
    
    this.attorneyRepresentationType = attorneyRepresentationType;
  }


  public Party contact(Contact contact) {
    
    
    
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Contact getContact() {
    return contact;
  }


  public void setContact(Contact contact) {
    
    
    
    this.contact = contact;
  }


  public Party firstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * When was the party first fetched from the court site.
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-10-10T10:10:24Z", required = true, value = "When was the party first fetched from the court site.")

  public OffsetDateTime getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    this.firstFetchDate = firstFetchDate;
  }


  public Party firstName(String firstName) {
    
    
    
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name of the party. This is normalized by UniCourt.
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "LA", required = true, value = "First name of the party. This is normalized by UniCourt.")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    
    this.firstName = firstName;
  }


  public Party isVisible(Boolean isVisible) {
    
    
    
    
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Signifies if the party as this party type is currently isVisible or not for the case.
   * @return isVisible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "true", required = true, value = "Signifies if the party as this party type is currently isVisible or not for the case.")

  public Boolean getIsVisible() {
    return isVisible;
  }


  public void setIsVisible(Boolean isVisible) {
    
    
    
    this.isVisible = isVisible;
  }


  public Party lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * When was the party last fetched from the court site.
   * @return lastFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2021-10-10T10:10:24Z", required = true, value = "When was the party last fetched from the court site.")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    this.lastFetchDate = lastFetchDate;
  }


  public Party lastName(String lastName) {
    
    
    
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name of the party. This is normalized by UniCourt.
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "DE", required = true, value = "Last name of the party. This is normalized by UniCourt.")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    
    this.lastName = lastName;
  }


  public Party middleName(String middleName) {
    
    
    
    
    this.middleName = middleName;
    return this;
  }

   /**
   * Middle name of the party. This is normalized by UniCourt.
   * @return middleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "FUENTE JOE", required = true, value = "Middle name of the party. This is normalized by UniCourt.")

  public String getMiddleName() {
    return middleName;
  }


  public void setMiddleName(String middleName) {
    
    
    
    this.middleName = middleName;
  }


  public Party name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Name of the party as provided by Court.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "DE LA FUENTE JOE", required = true, value = "Name of the party as provided by Court.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public Party namePrefix(String namePrefix) {
    
    
    
    
    this.namePrefix = namePrefix;
    return this;
  }

   /**
   * Get namePrefix
   * @return namePrefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getNamePrefix() {
    return namePrefix;
  }


  public void setNamePrefix(String namePrefix) {
    
    
    
    this.namePrefix = namePrefix;
  }


  public Party nameSuffix(String nameSuffix) {
    
    
    
    
    this.nameSuffix = nameSuffix;
    return this;
  }

   /**
   * Get nameSuffix
   * @return nameSuffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getNameSuffix() {
    return nameSuffix;
  }


  public void setNameSuffix(String nameSuffix) {
    
    
    
    this.nameSuffix = nameSuffix;
  }


  public Party _object(String _object) {
    
    
    if (_object != null && _object.length() < 5) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 5.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Party", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 5) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 5.");
    }
    this._object = _object;
  }


  public Party partyAttorneyAssociations(PartyAttorneyAssociations partyAttorneyAssociations) {
    
    
    
    
    this.partyAttorneyAssociations = partyAttorneyAssociations;
    return this;
  }

   /**
   * Get partyAttorneyAssociations
   * @return partyAttorneyAssociations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public PartyAttorneyAssociations getPartyAttorneyAssociations() {
    return partyAttorneyAssociations;
  }


  public void setPartyAttorneyAssociations(PartyAttorneyAssociations partyAttorneyAssociations) {
    
    
    
    this.partyAttorneyAssociations = partyAttorneyAssociations;
  }


  public Party partyClassificationType(PartyClassificationTypeEnum partyClassificationType) {
    
    
    
    
    this.partyClassificationType = partyClassificationType;
    return this;
  }

   /**
   * To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.
   * @return partyClassificationType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.")

  public PartyClassificationTypeEnum getPartyClassificationType() {
    return partyClassificationType;
  }


  public void setPartyClassificationType(PartyClassificationTypeEnum partyClassificationType) {
    
    
    
    this.partyClassificationType = partyClassificationType;
  }


  public Party partyId(String partyId) {
    
    
    if (partyId != null && partyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for partyId. Length must be greater than or equal to 18.");
    }
    
    this.partyId = partyId;
    return this;
  }

   /**
   * ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.
   * @return partyId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "PRTYgu537f3901f406", required = true, value = "ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.")

  public String getPartyId() {
    return partyId;
  }


  public void setPartyId(String partyId) {
    
    
    if (partyId != null && partyId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for partyId. Length must be greater than or equal to 18.");
    }
    this.partyId = partyId;
  }


  public Party partyRole(PartyRole partyRole) {
    
    
    
    
    this.partyRole = partyRole;
    return this;
  }

   /**
   * Get partyRole
   * @return partyRole
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public PartyRole getPartyRole() {
    return partyRole;
  }


  public void setPartyRole(PartyRole partyRole) {
    
    
    
    this.partyRole = partyRole;
  }


  public Party possibleNormPartyArray(List<PossibleNormParty> possibleNormPartyArray) {
    
    
    
    
    this.possibleNormPartyArray = possibleNormPartyArray;
    return this;
  }

  public Party addPossibleNormPartyArrayItem(PossibleNormParty possibleNormPartyArrayItem) {
    this.possibleNormPartyArray.add(possibleNormPartyArrayItem);
    return this;
  }

   /**
   * Get possibleNormPartyArray
   * @return possibleNormPartyArray
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<PossibleNormParty> getPossibleNormPartyArray() {
    return possibleNormPartyArray;
  }


  public void setPossibleNormPartyArray(List<PossibleNormParty> possibleNormPartyArray) {
    
    
    
    this.possibleNormPartyArray = possibleNormPartyArray;
  }


  public Party sourcePartyRole(String sourcePartyRole) {
    
    
    
    
    this.sourcePartyRole = sourcePartyRole;
    return this;
  }

   /**
   * Party Type as provided by Court.
   * @return sourcePartyRole
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "ptf", required = true, value = "Party Type as provided by Court.")

  public String getSourcePartyRole() {
    return sourcePartyRole;
  }


  public void setSourcePartyRole(String sourcePartyRole) {
    
    
    
    this.sourcePartyRole = sourcePartyRole;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Party instance itself
   */
  public Party putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Party party = (Party) o;
    return Objects.equals(this.attorneyRepresentationType, party.attorneyRepresentationType) &&
        Objects.equals(this.contact, party.contact) &&
        Objects.equals(this.firstFetchDate, party.firstFetchDate) &&
        Objects.equals(this.firstName, party.firstName) &&
        Objects.equals(this.isVisible, party.isVisible) &&
        Objects.equals(this.lastFetchDate, party.lastFetchDate) &&
        Objects.equals(this.lastName, party.lastName) &&
        Objects.equals(this.middleName, party.middleName) &&
        Objects.equals(this.name, party.name) &&
        Objects.equals(this.namePrefix, party.namePrefix) &&
        Objects.equals(this.nameSuffix, party.nameSuffix) &&
        Objects.equals(this._object, party._object) &&
        Objects.equals(this.partyAttorneyAssociations, party.partyAttorneyAssociations) &&
        Objects.equals(this.partyClassificationType, party.partyClassificationType) &&
        Objects.equals(this.partyId, party.partyId) &&
        Objects.equals(this.partyRole, party.partyRole) &&
        Objects.equals(this.possibleNormPartyArray, party.possibleNormPartyArray) &&
        Objects.equals(this.sourcePartyRole, party.sourcePartyRole)&&
        Objects.equals(this.additionalProperties, party.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attorneyRepresentationType, contact, firstFetchDate, firstName, isVisible, lastFetchDate, lastName, middleName, name, namePrefix, nameSuffix, _object, partyAttorneyAssociations, partyClassificationType, partyId, partyRole, possibleNormPartyArray, sourcePartyRole, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Party {\n");
    sb.append("    attorneyRepresentationType: ").append(toIndentedString(attorneyRepresentationType)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    middleName: ").append(toIndentedString(middleName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    namePrefix: ").append(toIndentedString(namePrefix)).append("\n");
    sb.append("    nameSuffix: ").append(toIndentedString(nameSuffix)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    partyAttorneyAssociations: ").append(toIndentedString(partyAttorneyAssociations)).append("\n");
    sb.append("    partyClassificationType: ").append(toIndentedString(partyClassificationType)).append("\n");
    sb.append("    partyId: ").append(toIndentedString(partyId)).append("\n");
    sb.append("    partyRole: ").append(toIndentedString(partyRole)).append("\n");
    sb.append("    possibleNormPartyArray: ").append(toIndentedString(possibleNormPartyArray)).append("\n");
    sb.append("    sourcePartyRole: ").append(toIndentedString(sourcePartyRole)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attorneyRepresentationType");
    openapiFields.add("contact");
    openapiFields.add("firstFetchDate");
    openapiFields.add("firstName");
    openapiFields.add("isVisible");
    openapiFields.add("lastFetchDate");
    openapiFields.add("lastName");
    openapiFields.add("middleName");
    openapiFields.add("name");
    openapiFields.add("namePrefix");
    openapiFields.add("nameSuffix");
    openapiFields.add("object");
    openapiFields.add("partyAttorneyAssociations");
    openapiFields.add("partyClassificationType");
    openapiFields.add("partyId");
    openapiFields.add("partyRole");
    openapiFields.add("possibleNormPartyArray");
    openapiFields.add("sourcePartyRole");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("attorneyRepresentationType");
    openapiRequiredFields.add("contact");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("firstName");
    openapiRequiredFields.add("isVisible");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("lastName");
    openapiRequiredFields.add("middleName");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("namePrefix");
    openapiRequiredFields.add("nameSuffix");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("partyAttorneyAssociations");
    openapiRequiredFields.add("partyClassificationType");
    openapiRequiredFields.add("partyId");
    openapiRequiredFields.add("partyRole");
    openapiRequiredFields.add("possibleNormPartyArray");
    openapiRequiredFields.add("sourcePartyRole");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Party
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Party.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Party is not found in the empty JSON string", Party.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Party.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the required field `attorneyRepresentationType`
      AttorneyRepresentationType.validateJsonObject(jsonObj.getAsJsonObject("attorneyRepresentationType"));
      // validate the required field `contact`
      Contact.validateJsonObject(jsonObj.getAsJsonObject("contact"));
      if (!jsonObj.get("firstName").isJsonNull() && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if (!jsonObj.get("lastName").isJsonNull() && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if (!jsonObj.get("middleName").isJsonNull() && !jsonObj.get("middleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middleName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("namePrefix").isJsonNull() && !jsonObj.get("namePrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namePrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namePrefix").toString()));
      }
      if (!jsonObj.get("nameSuffix").isJsonNull() && !jsonObj.get("nameSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nameSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nameSuffix").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `partyAttorneyAssociations`
      PartyAttorneyAssociations.validateJsonObject(jsonObj.getAsJsonObject("partyAttorneyAssociations"));
      if (!jsonObj.get("partyClassificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partyClassificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partyClassificationType").toString()));
      }
      if (!jsonObj.get("partyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partyId").toString()));
      }
      // validate the required field `partyRole`
      PartyRole.validateJsonObject(jsonObj.getAsJsonObject("partyRole"));
      // ensure the json data is an array
      if (!jsonObj.get("possibleNormPartyArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `possibleNormPartyArray` to be an array in the JSON string but got `%s`", jsonObj.get("possibleNormPartyArray").toString()));
      }

      JsonArray jsonArraypossibleNormPartyArray = jsonObj.getAsJsonArray("possibleNormPartyArray");
      // validate the required field `possibleNormPartyArray` (array)
      for (int i = 0; i < jsonArraypossibleNormPartyArray.size(); i++) {
        PossibleNormParty.validateJsonObject(jsonArraypossibleNormPartyArray.get(i).getAsJsonObject());
      };
      if (!jsonObj.get("sourcePartyRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePartyRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePartyRole").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Party.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Party' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Party> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Party.class));

       return (TypeAdapter<T>) new TypeAdapter<Party>() {
           @Override
           public void write(JsonWriter out, Party value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Party read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Party instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Party given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Party
  * @throws IOException if the JSON string is invalid with respect to Party
  */
  public static Party fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Party.class);
  }

 /**
  * Convert an instance of Party to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

