/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CaseUpdatePacerOptionsResponse;
import com.konfigthis.client.model.LastTrackedDetails;
import com.konfigthis.client.model.Schedule;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CaseTrackPreview
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CaseTrackPreview {
  public static final String SERIALIZED_NAME_CASE_A_P_I = "caseAPI";
  @SerializedName(SERIALIZED_NAME_CASE_A_P_I)
  private URI caseAPI;

  public static final String SERIALIZED_NAME_CASE_ID = "caseId";
  @SerializedName(SERIALIZED_NAME_CASE_ID)
  private String caseId;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES = "lastFetchDateWithUpdates";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE_WITH_UPDATES)
  private OffsetDateTime lastFetchDateWithUpdates;

  public static final String SERIALIZED_NAME_LAST_TRACKED_DETAILS = "lastTrackedDetails";
  @SerializedName(SERIALIZED_NAME_LAST_TRACKED_DETAILS)
  private LastTrackedDetails lastTrackedDetails;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "CaseTrackPreview";

  public static final String SERIALIZED_NAME_PACER_OPTIONS = "pacerOptions";
  @SerializedName(SERIALIZED_NAME_PACER_OPTIONS)
  private CaseUpdatePacerOptionsResponse pacerOptions;

  public static final String SERIALIZED_NAME_SCHEDULE = "schedule";
  @SerializedName(SERIALIZED_NAME_SCHEDULE)
  private Schedule schedule;

  public CaseTrackPreview() {
  }

  public CaseTrackPreview caseAPI(URI caseAPI) {
    
    
    if (caseAPI != null && caseAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for caseAPI. Length must be greater than or equal to 1.");
    }
    
    this.caseAPI = caseAPI;
    return this;
  }

   /**
   * Get caseAPI
   * @return caseAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/case/CASEgq222a2d1239af", required = true, value = "")

  public URI getCaseAPI() {
    return caseAPI;
  }


  public void setCaseAPI(URI caseAPI) {
    
    
    if (caseAPI != null && caseAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for caseAPI. Length must be greater than or equal to 1.");
    }
    this.caseAPI = caseAPI;
  }


  public CaseTrackPreview caseId(String caseId) {
    
    
    if (caseId != null && caseId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
    }
    
    this.caseId = caseId;
    return this;
  }

   /**
   * Unique Id for a Case in UniCourt.
   * @return caseId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CASEhq9d8b72d0800c", required = true, value = "Unique Id for a Case in UniCourt.")

  public String getCaseId() {
    return caseId;
  }


  public void setCaseId(String caseId) {
    
    
    if (caseId != null && caseId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
    }
    this.caseId = caseId;
  }


  public CaseTrackPreview lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.
   * @return lastFetchDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    this.lastFetchDate = lastFetchDate;
  }


  public CaseTrackPreview lastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    if (lastFetchDateWithUpdates != null && lastFetchDateWithUpdates.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDateWithUpdates. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
    return this;
  }

   /**
   * The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,
   * @return lastFetchDateWithUpdates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2020-05-16T11:51:27Z", required = true, value = "The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,")

  public OffsetDateTime getLastFetchDateWithUpdates() {
    return lastFetchDateWithUpdates;
  }


  public void setLastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
    
    
    if (lastFetchDateWithUpdates != null && lastFetchDateWithUpdates.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDateWithUpdates. Length must be greater than or equal to 25.");
    }
    this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
  }


  public CaseTrackPreview lastTrackedDetails(LastTrackedDetails lastTrackedDetails) {
    
    
    
    
    this.lastTrackedDetails = lastTrackedDetails;
    return this;
  }

   /**
   * Get lastTrackedDetails
   * @return lastTrackedDetails
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LastTrackedDetails getLastTrackedDetails() {
    return lastTrackedDetails;
  }


  public void setLastTrackedDetails(LastTrackedDetails lastTrackedDetails) {
    
    
    
    this.lastTrackedDetails = lastTrackedDetails;
  }


  public CaseTrackPreview _object(String _object) {
    
    
    if (_object != null && _object.length() < 16) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 16.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object.
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CaseTrackPreview", required = true, value = "Name of the object.")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 16) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 16.");
    }
    this._object = _object;
  }


  public CaseTrackPreview pacerOptions(CaseUpdatePacerOptionsResponse pacerOptions) {
    
    
    
    
    this.pacerOptions = pacerOptions;
    return this;
  }

   /**
   * Get pacerOptions
   * @return pacerOptions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public CaseUpdatePacerOptionsResponse getPacerOptions() {
    return pacerOptions;
  }


  public void setPacerOptions(CaseUpdatePacerOptionsResponse pacerOptions) {
    
    
    
    this.pacerOptions = pacerOptions;
  }


  public CaseTrackPreview schedule(Schedule schedule) {
    
    
    
    
    this.schedule = schedule;
    return this;
  }

   /**
   * Get schedule
   * @return schedule
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Schedule getSchedule() {
    return schedule;
  }


  public void setSchedule(Schedule schedule) {
    
    
    
    this.schedule = schedule;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CaseTrackPreview instance itself
   */
  public CaseTrackPreview putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CaseTrackPreview caseTrackPreview = (CaseTrackPreview) o;
    return Objects.equals(this.caseAPI, caseTrackPreview.caseAPI) &&
        Objects.equals(this.caseId, caseTrackPreview.caseId) &&
        Objects.equals(this.lastFetchDate, caseTrackPreview.lastFetchDate) &&
        Objects.equals(this.lastFetchDateWithUpdates, caseTrackPreview.lastFetchDateWithUpdates) &&
        Objects.equals(this.lastTrackedDetails, caseTrackPreview.lastTrackedDetails) &&
        Objects.equals(this._object, caseTrackPreview._object) &&
        Objects.equals(this.pacerOptions, caseTrackPreview.pacerOptions) &&
        Objects.equals(this.schedule, caseTrackPreview.schedule)&&
        Objects.equals(this.additionalProperties, caseTrackPreview.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caseAPI, caseId, lastFetchDate, lastFetchDateWithUpdates, lastTrackedDetails, _object, pacerOptions, schedule, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CaseTrackPreview {\n");
    sb.append("    caseAPI: ").append(toIndentedString(caseAPI)).append("\n");
    sb.append("    caseId: ").append(toIndentedString(caseId)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    lastFetchDateWithUpdates: ").append(toIndentedString(lastFetchDateWithUpdates)).append("\n");
    sb.append("    lastTrackedDetails: ").append(toIndentedString(lastTrackedDetails)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    pacerOptions: ").append(toIndentedString(pacerOptions)).append("\n");
    sb.append("    schedule: ").append(toIndentedString(schedule)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caseAPI");
    openapiFields.add("caseId");
    openapiFields.add("lastFetchDate");
    openapiFields.add("lastFetchDateWithUpdates");
    openapiFields.add("lastTrackedDetails");
    openapiFields.add("object");
    openapiFields.add("pacerOptions");
    openapiFields.add("schedule");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("caseAPI");
    openapiRequiredFields.add("caseId");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("lastFetchDateWithUpdates");
    openapiRequiredFields.add("lastTrackedDetails");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("pacerOptions");
    openapiRequiredFields.add("schedule");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CaseTrackPreview
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CaseTrackPreview.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CaseTrackPreview is not found in the empty JSON string", CaseTrackPreview.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CaseTrackPreview.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("caseAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseAPI").toString()));
      }
      if (!jsonObj.get("caseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caseId").toString()));
      }
      // validate the required field `lastTrackedDetails`
      LastTrackedDetails.validateJsonObject(jsonObj.getAsJsonObject("lastTrackedDetails"));
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      // validate the required field `pacerOptions`
      CaseUpdatePacerOptionsResponse.validateJsonObject(jsonObj.getAsJsonObject("pacerOptions"));
      // validate the required field `schedule`
      Schedule.validateJsonObject(jsonObj.getAsJsonObject("schedule"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CaseTrackPreview.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CaseTrackPreview' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CaseTrackPreview> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CaseTrackPreview.class));

       return (TypeAdapter<T>) new TypeAdapter<CaseTrackPreview>() {
           @Override
           public void write(JsonWriter out, CaseTrackPreview value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CaseTrackPreview read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CaseTrackPreview instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CaseTrackPreview given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CaseTrackPreview
  * @throws IOException if the JSON string is invalid with respect to CaseTrackPreview
  */
  public static CaseTrackPreview fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CaseTrackPreview.class);
  }

 /**
  * Convert an instance of CaseTrackPreview to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

