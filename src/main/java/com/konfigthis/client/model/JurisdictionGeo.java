/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * JurisdictionGeo
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class JurisdictionGeo {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_COURTS_FOR_JURISDICTION_GEO_A_P_I = "courtsForJurisdictionGeoAPI";
  @SerializedName(SERIALIZED_NAME_COURTS_FOR_JURISDICTION_GEO_A_P_I)
  private URI courtsForJurisdictionGeoAPI;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_FIPS_CODE = "fipsCode";
  @SerializedName(SERIALIZED_NAME_FIPS_CODE)
  private String fipsCode;

  public static final String SERIALIZED_NAME_JURISDICTION_GEO_ID = "jurisdictionGeoId";
  @SerializedName(SERIALIZED_NAME_JURISDICTION_GEO_ID)
  private String jurisdictionGeoId;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "JurisdictionGeo";

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_ZIP_CODE_ARRAY = "zipCodeArray";
  @SerializedName(SERIALIZED_NAME_ZIP_CODE_ARRAY)
  private List<String> zipCodeArray = new ArrayList<>();

  public JurisdictionGeo() {
  }

  public JurisdictionGeo city(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    this.city = city;
  }


  public JurisdictionGeo country(String country) {
    
    
    if (country != null && country.length() < 1) {
      throw new IllegalArgumentException("Invalid value for country. Length must be greater than or equal to 1.");
    }
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "United States of America", required = true, value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    if (country != null && country.length() < 1) {
      throw new IllegalArgumentException("Invalid value for country. Length must be greater than or equal to 1.");
    }
    this.country = country;
  }


  public JurisdictionGeo county(String county) {
    
    
    if (county != null && county.length() < 1) {
      throw new IllegalArgumentException("Invalid value for county. Length must be greater than or equal to 1.");
    }
    
    this.county = county;
    return this;
  }

   /**
   * Get county
   * @return county
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Los Angeles", required = true, value = "")

  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    
    
    if (county != null && county.length() < 1) {
      throw new IllegalArgumentException("Invalid value for county. Length must be greater than or equal to 1.");
    }
    this.county = county;
  }


  public JurisdictionGeo courtsForJurisdictionGeoAPI(URI courtsForJurisdictionGeoAPI) {
    
    
    if (courtsForJurisdictionGeoAPI != null && courtsForJurisdictionGeoAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtsForJurisdictionGeoAPI. Length must be greater than or equal to 1.");
    }
    
    this.courtsForJurisdictionGeoAPI = courtsForJurisdictionGeoAPI;
    return this;
  }

   /**
   * Get courtsForJurisdictionGeoAPI
   * @return courtsForJurisdictionGeoAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/jurisdictionGeo/JUGO8Mep3ckEkD2SFk/courts?pageNumber=1", required = true, value = "")

  public URI getCourtsForJurisdictionGeoAPI() {
    return courtsForJurisdictionGeoAPI;
  }


  public void setCourtsForJurisdictionGeoAPI(URI courtsForJurisdictionGeoAPI) {
    
    
    if (courtsForJurisdictionGeoAPI != null && courtsForJurisdictionGeoAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtsForJurisdictionGeoAPI. Length must be greater than or equal to 1.");
    }
    this.courtsForJurisdictionGeoAPI = courtsForJurisdictionGeoAPI;
  }


  public JurisdictionGeo createdDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-07T10:17:56Z", required = true, value = "The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    this.createdDate = createdDate;
  }


  public JurisdictionGeo fipsCode(String fipsCode) {
    
    
    if (fipsCode != null && fipsCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fipsCode. Length must be greater than or equal to 1.");
    }
    
    this.fipsCode = fipsCode;
    return this;
  }

   /**
   * Get fipsCode
   * @return fipsCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "06037", required = true, value = "")

  public String getFipsCode() {
    return fipsCode;
  }


  public void setFipsCode(String fipsCode) {
    
    
    if (fipsCode != null && fipsCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fipsCode. Length must be greater than or equal to 1.");
    }
    this.fipsCode = fipsCode;
  }


  public JurisdictionGeo jurisdictionGeoId(String jurisdictionGeoId) {
    
    
    if (jurisdictionGeoId != null && jurisdictionGeoId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for jurisdictionGeoId. Length must be greater than or equal to 18.");
    }
    
    this.jurisdictionGeoId = jurisdictionGeoId;
    return this;
  }

   /**
   * Get jurisdictionGeoId
   * @return jurisdictionGeoId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "JUGO8Mep3ckEkD2SFk", required = true, value = "")

  public String getJurisdictionGeoId() {
    return jurisdictionGeoId;
  }


  public void setJurisdictionGeoId(String jurisdictionGeoId) {
    
    
    if (jurisdictionGeoId != null && jurisdictionGeoId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for jurisdictionGeoId. Length must be greater than or equal to 18.");
    }
    this.jurisdictionGeoId = jurisdictionGeoId;
  }


  public JurisdictionGeo _object(String _object) {
    
    
    if (_object != null && _object.length() < 15) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 15.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "JurisdictionGeo", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 15) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 15.");
    }
    this._object = _object;
  }


  public JurisdictionGeo state(String state) {
    
    
    if (state != null && state.length() < 1) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 1.");
    }
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "California", required = true, value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    if (state != null && state.length() < 1) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 1.");
    }
    this.state = state;
  }


  public JurisdictionGeo zipCodeArray(List<String> zipCodeArray) {
    
    
    
    
    this.zipCodeArray = zipCodeArray;
    return this;
  }

  public JurisdictionGeo addZipCodeArrayItem(String zipCodeArrayItem) {
    this.zipCodeArray.add(zipCodeArrayItem);
    return this;
  }

   /**
   * Get zipCodeArray
   * @return zipCodeArray
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", required = true, value = "")

  public List<String> getZipCodeArray() {
    return zipCodeArray;
  }


  public void setZipCodeArray(List<String> zipCodeArray) {
    
    
    
    this.zipCodeArray = zipCodeArray;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the JurisdictionGeo instance itself
   */
  public JurisdictionGeo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JurisdictionGeo jurisdictionGeo = (JurisdictionGeo) o;
    return Objects.equals(this.city, jurisdictionGeo.city) &&
        Objects.equals(this.country, jurisdictionGeo.country) &&
        Objects.equals(this.county, jurisdictionGeo.county) &&
        Objects.equals(this.courtsForJurisdictionGeoAPI, jurisdictionGeo.courtsForJurisdictionGeoAPI) &&
        Objects.equals(this.createdDate, jurisdictionGeo.createdDate) &&
        Objects.equals(this.fipsCode, jurisdictionGeo.fipsCode) &&
        Objects.equals(this.jurisdictionGeoId, jurisdictionGeo.jurisdictionGeoId) &&
        Objects.equals(this._object, jurisdictionGeo._object) &&
        Objects.equals(this.state, jurisdictionGeo.state) &&
        Objects.equals(this.zipCodeArray, jurisdictionGeo.zipCodeArray)&&
        Objects.equals(this.additionalProperties, jurisdictionGeo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, country, county, courtsForJurisdictionGeoAPI, createdDate, fipsCode, jurisdictionGeoId, _object, state, zipCodeArray, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JurisdictionGeo {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    courtsForJurisdictionGeoAPI: ").append(toIndentedString(courtsForJurisdictionGeoAPI)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    fipsCode: ").append(toIndentedString(fipsCode)).append("\n");
    sb.append("    jurisdictionGeoId: ").append(toIndentedString(jurisdictionGeoId)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    zipCodeArray: ").append(toIndentedString(zipCodeArray)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("county");
    openapiFields.add("courtsForJurisdictionGeoAPI");
    openapiFields.add("createdDate");
    openapiFields.add("fipsCode");
    openapiFields.add("jurisdictionGeoId");
    openapiFields.add("object");
    openapiFields.add("state");
    openapiFields.add("zipCodeArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country");
    openapiRequiredFields.add("county");
    openapiRequiredFields.add("courtsForJurisdictionGeoAPI");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("fipsCode");
    openapiRequiredFields.add("jurisdictionGeoId");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("zipCodeArray");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to JurisdictionGeo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!JurisdictionGeo.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JurisdictionGeo is not found in the empty JSON string", JurisdictionGeo.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JurisdictionGeo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("city").isJsonNull() && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if (!jsonObj.get("county").isJsonNull() && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if (!jsonObj.get("courtsForJurisdictionGeoAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtsForJurisdictionGeoAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtsForJurisdictionGeoAPI").toString()));
      }
      if (!jsonObj.get("fipsCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fipsCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fipsCode").toString()));
      }
      if (!jsonObj.get("jurisdictionGeoId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jurisdictionGeoId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jurisdictionGeoId").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("zipCodeArray") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("zipCodeArray").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `zipCodeArray` to be an array in the JSON string but got `%s`", jsonObj.get("zipCodeArray").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JurisdictionGeo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JurisdictionGeo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JurisdictionGeo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JurisdictionGeo.class));

       return (TypeAdapter<T>) new TypeAdapter<JurisdictionGeo>() {
           @Override
           public void write(JsonWriter out, JurisdictionGeo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public JurisdictionGeo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             JurisdictionGeo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of JurisdictionGeo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of JurisdictionGeo
  * @throws IOException if the JSON string is invalid with respect to JurisdictionGeo
  */
  public static JurisdictionGeo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JurisdictionGeo.class);
  }

 /**
  * Convert an instance of JurisdictionGeo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

