/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.SourceStructuredData;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Hearing
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Hearing {
  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private String firstFetchDate;

  public static final String SERIALIZED_NAME_HEARING_DATE = "hearingDate";
  @SerializedName(SERIALIZED_NAME_HEARING_DATE)
  private OffsetDateTime hearingDate;

  public static final String SERIALIZED_NAME_HEARING_DESCRIPTION = "hearingDescription";
  @SerializedName(SERIALIZED_NAME_HEARING_DESCRIPTION)
  private String hearingDescription;

  public static final String SERIALIZED_NAME_HEARING_STRUCTURED = "hearingStructured";
  @SerializedName(SERIALIZED_NAME_HEARING_STRUCTURED)
  private SourceStructuredData hearingStructured;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private String lastFetchDate;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "Hearing";

  public Hearing() {
  }

  public Hearing firstFetchDate(String firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * When this hearing was first fetched from the source.
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-04-28T11:51:27.000Z", required = true, value = "When this hearing was first fetched from the source.")

  public String getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(String firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    this.firstFetchDate = firstFetchDate;
  }


  public Hearing hearingDate(OffsetDateTime hearingDate) {
    
    
    if (hearingDate != null && hearingDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for hearingDate. Length must be greater than or equal to 25.");
    }
    
    this.hearingDate = hearingDate;
    return this;
  }

   /**
   * Hearing Date
   * @return hearingDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-04-28T11:51:27Z", required = true, value = "Hearing Date")

  public OffsetDateTime getHearingDate() {
    return hearingDate;
  }


  public void setHearingDate(OffsetDateTime hearingDate) {
    
    
    if (hearingDate != null && hearingDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for hearingDate. Length must be greater than or equal to 25.");
    }
    this.hearingDate = hearingDate;
  }


  public Hearing hearingDescription(String hearingDescription) {
    
    
    
    
    this.hearingDescription = hearingDescription;
    return this;
  }

   /**
   * Source Hearing Description Text
   * @return hearingDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STIPULATION for Extension of Time to File Answer to 01/15/2020 re Answer to Complaint (Attorney Civil Case Opening),,,,,, Crossclaim,,,,,, Counterclaim,,,,, #172 filed by Cross-Complainant TW Tedesco Properties, L.P.. (Attachments: #1 Proposed Order)(Hamrick, Alpheus) (Entered: 12/05/2019)", required = true, value = "Source Hearing Description Text")

  public String getHearingDescription() {
    return hearingDescription;
  }


  public void setHearingDescription(String hearingDescription) {
    
    
    
    this.hearingDescription = hearingDescription;
  }


  public Hearing hearingStructured(SourceStructuredData hearingStructured) {
    
    
    
    
    this.hearingStructured = hearingStructured;
    return this;
  }

   /**
   * Get hearingStructured
   * @return hearingStructured
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "")

  public SourceStructuredData getHearingStructured() {
    return hearingStructured;
  }


  public void setHearingStructured(SourceStructuredData hearingStructured) {
    
    
    
    this.hearingStructured = hearingStructured;
  }


  public Hearing lastFetchDate(String lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * When this hearing was last fetched from the source.
   * @return lastFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-04-28T11:51:27.000Z", required = true, value = "When this hearing was last fetched from the source.")

  public String getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(String lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    this.lastFetchDate = lastFetchDate;
  }


  public Hearing location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Location where the hearing will takeplace.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Los Angeles", required = true, value = "Location where the hearing will takeplace.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public Hearing _object(String _object) {
    
    
    if (_object != null && _object.length() < 7) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 7.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Name of the object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Hearing", required = true, value = "Name of the object")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 7) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 7.");
    }
    this._object = _object;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Hearing instance itself
   */
  public Hearing putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hearing hearing = (Hearing) o;
    return Objects.equals(this.firstFetchDate, hearing.firstFetchDate) &&
        Objects.equals(this.hearingDate, hearing.hearingDate) &&
        Objects.equals(this.hearingDescription, hearing.hearingDescription) &&
        Objects.equals(this.hearingStructured, hearing.hearingStructured) &&
        Objects.equals(this.lastFetchDate, hearing.lastFetchDate) &&
        Objects.equals(this.location, hearing.location) &&
        Objects.equals(this._object, hearing._object)&&
        Objects.equals(this.additionalProperties, hearing.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstFetchDate, hearingDate, hearingDescription, hearingStructured, lastFetchDate, location, _object, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hearing {\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    hearingDate: ").append(toIndentedString(hearingDate)).append("\n");
    sb.append("    hearingDescription: ").append(toIndentedString(hearingDescription)).append("\n");
    sb.append("    hearingStructured: ").append(toIndentedString(hearingStructured)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstFetchDate");
    openapiFields.add("hearingDate");
    openapiFields.add("hearingDescription");
    openapiFields.add("hearingStructured");
    openapiFields.add("lastFetchDate");
    openapiFields.add("location");
    openapiFields.add("object");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("hearingDate");
    openapiRequiredFields.add("hearingDescription");
    openapiRequiredFields.add("hearingStructured");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("location");
    openapiRequiredFields.add("object");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Hearing
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Hearing.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hearing is not found in the empty JSON string", Hearing.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Hearing.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("firstFetchDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstFetchDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstFetchDate").toString()));
      }
      if (!jsonObj.get("hearingDescription").isJsonNull() && !jsonObj.get("hearingDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hearingDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hearingDescription").toString()));
      }
      // validate the required field `hearingStructured`
      SourceStructuredData.validateJsonObject(jsonObj.getAsJsonObject("hearingStructured"));
      if (!jsonObj.get("lastFetchDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastFetchDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastFetchDate").toString()));
      }
      if (!jsonObj.get("location").isJsonNull() && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hearing.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hearing' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hearing> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hearing.class));

       return (TypeAdapter<T>) new TypeAdapter<Hearing>() {
           @Override
           public void write(JsonWriter out, Hearing value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Hearing read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Hearing instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Hearing given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Hearing
  * @throws IOException if the JSON string is invalid with respect to Hearing
  */
  public static Hearing fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hearing.class);
  }

 /**
  * Convert an instance of Hearing to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

