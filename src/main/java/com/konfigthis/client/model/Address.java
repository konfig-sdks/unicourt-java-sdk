/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Address object Data Schema
 */
@ApiModel(description = "Address object Data Schema")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Address {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_NAME = "countryName";
  @SerializedName(SERIALIZED_NAME_COUNTRY_NAME)
  private String countryName = "UNKNOWN";

  public static final String SERIALIZED_NAME_FIRST_FETCH_DATE = "firstFetchDate";
  @SerializedName(SERIALIZED_NAME_FIRST_FETCH_DATE)
  private OffsetDateTime firstFetchDate;

  public static final String SERIALIZED_NAME_IS_VISIBLE = "isVisible";
  @SerializedName(SERIALIZED_NAME_IS_VISIBLE)
  private Boolean isVisible;

  public static final String SERIALIZED_NAME_LAST_FETCH_DATE = "lastFetchDate";
  @SerializedName(SERIALIZED_NAME_LAST_FETCH_DATE)
  private OffsetDateTime lastFetchDate;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "Address";

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private String stateName = "UNKNOWN";

  public static final String SERIALIZED_NAME_STREET_ADDRESS1 = "streetAddress1";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS1)
  private String streetAddress1;

  public static final String SERIALIZED_NAME_STREET_ADDRESS2 = "streetAddress2";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS2)
  private String streetAddress2;

  public static final String SERIALIZED_NAME_ZIP = "zip";
  @SerializedName(SERIALIZED_NAME_ZIP)
  private String zip;

  public static final String SERIALIZED_NAME_ZIP4 = "zip4";
  @SerializedName(SERIALIZED_NAME_ZIP4)
  private String zip4;

  public Address() {
  }

  public Address city(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SPOKANE", required = true, value = "City")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    this.city = city;
  }


  public Address countryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
    }
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * ISO 3166-1 alpha-3 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements). Code of the country if country name is present.
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "USA", required = true, value = "ISO 3166-1 alpha-3 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements). Code of the country if country name is present.")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
    }
    this.countryCode = countryCode;
  }


  public Address countryName(String countryName) {
    
    
    if (countryName != null && countryName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for countryName. Length must be greater than or equal to 1.");
    }
    
    this.countryName = countryName;
    return this;
  }

   /**
   * Country Name if present else default value.
   * @return countryName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CANADA", required = true, value = "Country Name if present else default value.")

  public String getCountryName() {
    return countryName;
  }


  public void setCountryName(String countryName) {
    
    
    if (countryName != null && countryName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for countryName. Length must be greater than or equal to 1.");
    }
    this.countryName = countryName;
  }


  public Address firstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.firstFetchDate = firstFetchDate;
    return this;
  }

   /**
   * Date at which this record is created in UniCourt.
   * @return firstFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-07-21T17:32:28Z", required = true, value = "Date at which this record is created in UniCourt.")

  public OffsetDateTime getFirstFetchDate() {
    return firstFetchDate;
  }


  public void setFirstFetchDate(OffsetDateTime firstFetchDate) {
    
    
    if (firstFetchDate != null && firstFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for firstFetchDate. Length must be greater than or equal to 25.");
    }
    this.firstFetchDate = firstFetchDate;
  }


  public Address isVisible(Boolean isVisible) {
    
    
    
    
    this.isVisible = isVisible;
    return this;
  }

   /**
   * Boolean indicating if the address is visible or not.
   * @return isVisible
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "false", required = true, value = "Boolean indicating if the address is visible or not.")

  public Boolean getIsVisible() {
    return isVisible;
  }


  public void setIsVisible(Boolean isVisible) {
    
    
    
    this.isVisible = isVisible;
  }


  public Address lastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    
    this.lastFetchDate = lastFetchDate;
    return this;
  }

   /**
   * Date at which this record was updated in UniCourt.
   * @return lastFetchDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2017-07-21T17:32:28Z", required = true, value = "Date at which this record was updated in UniCourt.")

  public OffsetDateTime getLastFetchDate() {
    return lastFetchDate;
  }


  public void setLastFetchDate(OffsetDateTime lastFetchDate) {
    
    
    if (lastFetchDate != null && lastFetchDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for lastFetchDate. Length must be greater than or equal to 25.");
    }
    this.lastFetchDate = lastFetchDate;
  }


  public Address latitude(Double latitude) {
    if (latitude != null && latitude < -90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be greater than or equal to -90.");
    }
    if (latitude != null && latitude > 90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be less than or equal to 90.");
    }
    
    
    this.latitude = latitude;
    return this;
  }

  public Address latitude(Integer latitude) {
    if (latitude != null && latitude < -90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be greater than or equal to -90.");
    }
    if (latitude != null && latitude > 90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be less than or equal to 90.");
    }
    
    
    this.latitude = latitude.doubleValue();
    return this;
  }

   /**
   * Coordinates at geographic coordinate system.
   * minimum: -90
   * maximum: 90
   * @return latitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "26.93852", required = true, value = "Coordinates at geographic coordinate system.")

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    if (latitude != null && latitude < -90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be greater than or equal to -90.");
    }
    if (latitude != null && latitude > 90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be less than or equal to 90.");
    }
    
    this.latitude = latitude;
  }


  public Address longitude(Double longitude) {
    if (longitude != null && longitude < -180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be greater than or equal to -180.");
    }
    if (longitude != null && longitude > 180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be less than or equal to 180.");
    }
    
    
    this.longitude = longitude;
    return this;
  }

  public Address longitude(Integer longitude) {
    if (longitude != null && longitude < -180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be greater than or equal to -180.");
    }
    if (longitude != null && longitude > 180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be less than or equal to 180.");
    }
    
    
    this.longitude = longitude.doubleValue();
    return this;
  }

   /**
   * Coordinates at geographic coordinate system.
   * minimum: -180
   * maximum: 180
   * @return longitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "-82.04752", required = true, value = "Coordinates at geographic coordinate system.")

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    if (longitude != null && longitude < -180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be greater than or equal to -180.");
    }
    if (longitude != null && longitude > 180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be less than or equal to 180.");
    }
    
    this.longitude = longitude;
  }


  public Address _object(String _object) {
    
    
    if (_object != null && _object.length() < 7) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 7.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Address", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 7) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 7.");
    }
    this._object = _object;
  }


  public Address stateCode(String stateCode) {
    
    
    if (stateCode != null && stateCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for stateCode. Length must be greater than or equal to 2.");
    }
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * State Code if the state is a US state else contains null.
   * @return stateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "NY", required = true, value = "State Code if the state is a US state else contains null.")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    
    
    if (stateCode != null && stateCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for stateCode. Length must be greater than or equal to 2.");
    }
    this.stateCode = stateCode;
  }


  public Address stateName(String stateName) {
    
    
    if (stateName != null && stateName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for stateName. Length must be greater than or equal to 1.");
    }
    
    this.stateName = stateName;
    return this;
  }

   /**
   * State Name if present else default value.
   * @return stateName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NEW YORK", required = true, value = "State Name if present else default value.")

  public String getStateName() {
    return stateName;
  }


  public void setStateName(String stateName) {
    
    
    if (stateName != null && stateName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for stateName. Length must be greater than or equal to 1.");
    }
    this.stateName = stateName;
  }


  public Address streetAddress1(String streetAddress1) {
    
    
    if (streetAddress1 != null && streetAddress1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetAddress1. Length must be greater than or equal to 1.");
    }
    
    this.streetAddress1 = streetAddress1;
    return this;
  }

   /**
   * 1st part of the street address.
   * @return streetAddress1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4407 N DIVISION ST", required = true, value = "1st part of the street address.")

  public String getStreetAddress1() {
    return streetAddress1;
  }


  public void setStreetAddress1(String streetAddress1) {
    
    
    if (streetAddress1 != null && streetAddress1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetAddress1. Length must be greater than or equal to 1.");
    }
    this.streetAddress1 = streetAddress1;
  }


  public Address streetAddress2(String streetAddress2) {
    
    
    if (streetAddress2 != null && streetAddress2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetAddress2. Length must be greater than or equal to 1.");
    }
    
    this.streetAddress2 = streetAddress2;
    return this;
  }

   /**
   * 2nd part of the street address.
   * @return streetAddress2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STE 516", required = true, value = "2nd part of the street address.")

  public String getStreetAddress2() {
    return streetAddress2;
  }


  public void setStreetAddress2(String streetAddress2) {
    
    
    if (streetAddress2 != null && streetAddress2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetAddress2. Length must be greater than or equal to 1.");
    }
    this.streetAddress2 = streetAddress2;
  }


  public Address zip(String zip) {
    
    
    if (zip != null && zip.length() < 1) {
      throw new IllegalArgumentException("Invalid value for zip. Length must be greater than or equal to 1.");
    }
    
    this.zip = zip;
    return this;
  }

   /**
   * Zip code of the address.
   * @return zip
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "99207", required = true, value = "Zip code of the address.")

  public String getZip() {
    return zip;
  }


  public void setZip(String zip) {
    
    
    if (zip != null && zip.length() < 1) {
      throw new IllegalArgumentException("Invalid value for zip. Length must be greater than or equal to 1.");
    }
    this.zip = zip;
  }


  public Address zip4(String zip4) {
    
    
    if (zip4 != null && zip4.length() < 4) {
      throw new IllegalArgumentException("Invalid value for zip4. Length must be greater than or equal to 4.");
    }
    
    this.zip4 = zip4;
    return this;
  }

   /**
   * 4 digit extension of the zip code if the address is a US address.
   * @return zip4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1005", required = true, value = "4 digit extension of the zip code if the address is a US address.")

  public String getZip4() {
    return zip4;
  }


  public void setZip4(String zip4) {
    
    
    if (zip4 != null && zip4.length() < 4) {
      throw new IllegalArgumentException("Invalid value for zip4. Length must be greater than or equal to 4.");
    }
    this.zip4 = zip4;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Address instance itself
   */
  public Address putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Address address = (Address) o;
    return Objects.equals(this.city, address.city) &&
        Objects.equals(this.countryCode, address.countryCode) &&
        Objects.equals(this.countryName, address.countryName) &&
        Objects.equals(this.firstFetchDate, address.firstFetchDate) &&
        Objects.equals(this.isVisible, address.isVisible) &&
        Objects.equals(this.lastFetchDate, address.lastFetchDate) &&
        Objects.equals(this.latitude, address.latitude) &&
        Objects.equals(this.longitude, address.longitude) &&
        Objects.equals(this._object, address._object) &&
        Objects.equals(this.stateCode, address.stateCode) &&
        Objects.equals(this.stateName, address.stateName) &&
        Objects.equals(this.streetAddress1, address.streetAddress1) &&
        Objects.equals(this.streetAddress2, address.streetAddress2) &&
        Objects.equals(this.zip, address.zip) &&
        Objects.equals(this.zip4, address.zip4)&&
        Objects.equals(this.additionalProperties, address.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, countryCode, countryName, firstFetchDate, isVisible, lastFetchDate, latitude, longitude, _object, stateCode, stateName, streetAddress1, streetAddress2, zip, zip4, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Address {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryName: ").append(toIndentedString(countryName)).append("\n");
    sb.append("    firstFetchDate: ").append(toIndentedString(firstFetchDate)).append("\n");
    sb.append("    isVisible: ").append(toIndentedString(isVisible)).append("\n");
    sb.append("    lastFetchDate: ").append(toIndentedString(lastFetchDate)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    streetAddress1: ").append(toIndentedString(streetAddress1)).append("\n");
    sb.append("    streetAddress2: ").append(toIndentedString(streetAddress2)).append("\n");
    sb.append("    zip: ").append(toIndentedString(zip)).append("\n");
    sb.append("    zip4: ").append(toIndentedString(zip4)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("countryCode");
    openapiFields.add("countryName");
    openapiFields.add("firstFetchDate");
    openapiFields.add("isVisible");
    openapiFields.add("lastFetchDate");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("object");
    openapiFields.add("stateCode");
    openapiFields.add("stateName");
    openapiFields.add("streetAddress1");
    openapiFields.add("streetAddress2");
    openapiFields.add("zip");
    openapiFields.add("zip4");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("countryCode");
    openapiRequiredFields.add("countryName");
    openapiRequiredFields.add("firstFetchDate");
    openapiRequiredFields.add("isVisible");
    openapiRequiredFields.add("lastFetchDate");
    openapiRequiredFields.add("latitude");
    openapiRequiredFields.add("longitude");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("stateCode");
    openapiRequiredFields.add("stateName");
    openapiRequiredFields.add("streetAddress1");
    openapiRequiredFields.add("streetAddress2");
    openapiRequiredFields.add("zip");
    openapiRequiredFields.add("zip4");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Address
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Address.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Address is not found in the empty JSON string", Address.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Address.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("city").isJsonNull() && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("countryCode").isJsonNull() && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if (!jsonObj.get("countryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryName").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("stateCode").isJsonNull() && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if (!jsonObj.get("stateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateName").toString()));
      }
      if (!jsonObj.get("streetAddress1").isJsonNull() && !jsonObj.get("streetAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress1").toString()));
      }
      if (!jsonObj.get("streetAddress2").isJsonNull() && !jsonObj.get("streetAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress2").toString()));
      }
      if (!jsonObj.get("zip").isJsonNull() && !jsonObj.get("zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip").toString()));
      }
      if (!jsonObj.get("zip4").isJsonNull() && !jsonObj.get("zip4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zip4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zip4").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Address.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Address' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Address> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Address.class));

       return (TypeAdapter<T>) new TypeAdapter<Address>() {
           @Override
           public void write(JsonWriter out, Address value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Address read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Address instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Address given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Address
  * @throws IOException if the JSON string is invalid with respect to Address
  */
  public static Address fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Address.class);
  }

 /**
  * Convert an instance of Address to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

