/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.net.URI;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CourtLocation
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CourtLocation {
  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COURT_LOCATION_ID = "courtLocationId";
  @SerializedName(SERIALIZED_NAME_COURT_LOCATION_ID)
  private String courtLocationId;

  public static final String SERIALIZED_NAME_COURT_SERVICE_STATUS_A_P_I = "courtServiceStatusAPI";
  @SerializedName(SERIALIZED_NAME_COURT_SERVICE_STATUS_A_P_I)
  private URI courtServiceStatusAPI;

  public static final String SERIALIZED_NAME_COURTS_FOR_COURT_LOCATION_A_P_I = "courtsForCourtLocationAPI";
  @SerializedName(SERIALIZED_NAME_COURTS_FOR_COURT_LOCATION_A_P_I)
  private URI courtsForCourtLocationAPI;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OBJECT = "object";
  @SerializedName(SERIALIZED_NAME_OBJECT)
  private String _object = "CourtLocation";

  public static final String SERIALIZED_NAME_STATE_NAME = "stateName";
  @SerializedName(SERIALIZED_NAME_STATE_NAME)
  private String stateName = "UNKNOWN";

  public static final String SERIALIZED_NAME_STREET_ADDRESS1 = "streetAddress1";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS1)
  private String streetAddress1;

  public static final String SERIALIZED_NAME_STREET_ADDRESS2 = "streetAddress2";
  @SerializedName(SERIALIZED_NAME_STREET_ADDRESS2)
  private String streetAddress2;

  public CourtLocation() {
  }

  public CourtLocation city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SPOKANE", required = true, value = "City")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public CourtLocation courtLocationId(String courtLocationId) {
    
    
    if (courtLocationId != null && courtLocationId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtLocationId. Length must be greater than or equal to 18.");
    }
    
    this.courtLocationId = courtLocationId;
    return this;
  }

   /**
   * Get courtLocationId
   * @return courtLocationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "COLOV75AKgqMqnfVhM", required = true, value = "")

  public String getCourtLocationId() {
    return courtLocationId;
  }


  public void setCourtLocationId(String courtLocationId) {
    
    
    if (courtLocationId != null && courtLocationId.length() < 18) {
      throw new IllegalArgumentException("Invalid value for courtLocationId. Length must be greater than or equal to 18.");
    }
    this.courtLocationId = courtLocationId;
  }


  public CourtLocation courtServiceStatusAPI(URI courtServiceStatusAPI) {
    
    
    if (courtServiceStatusAPI != null && courtServiceStatusAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtServiceStatusAPI. Length must be greater than or equal to 1.");
    }
    
    this.courtServiceStatusAPI = courtServiceStatusAPI;
    return this;
  }

   /**
   * Get courtServiceStatusAPI
   * @return courtServiceStatusAPI
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/courtServiceStatus?q=(CourtLocation%3A(courtLocationId%3A%22COLOV75AKgqMqnfVhM%22))", required = true, value = "")

  public URI getCourtServiceStatusAPI() {
    return courtServiceStatusAPI;
  }


  public void setCourtServiceStatusAPI(URI courtServiceStatusAPI) {
    
    
    if (courtServiceStatusAPI != null && courtServiceStatusAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtServiceStatusAPI. Length must be greater than or equal to 1.");
    }
    this.courtServiceStatusAPI = courtServiceStatusAPI;
  }


  public CourtLocation courtsForCourtLocationAPI(URI courtsForCourtLocationAPI) {
    
    
    if (courtsForCourtLocationAPI != null && courtsForCourtLocationAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtsForCourtLocationAPI. Length must be greater than or equal to 1.");
    }
    
    this.courtsForCourtLocationAPI = courtsForCourtLocationAPI;
    return this;
  }

   /**
   * Get courtsForCourtLocationAPI
   * @return courtsForCourtLocationAPI
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://enterpriseapi.unicourt.com/masterData/courtLocation/COLOV75AKgqMqnfVhM/courts", required = true, value = "")

  public URI getCourtsForCourtLocationAPI() {
    return courtsForCourtLocationAPI;
  }


  public void setCourtsForCourtLocationAPI(URI courtsForCourtLocationAPI) {
    
    
    if (courtsForCourtLocationAPI != null && courtsForCourtLocationAPI.length() < 1) {
      throw new IllegalArgumentException("Invalid value for courtsForCourtLocationAPI. Length must be greater than or equal to 1.");
    }
    this.courtsForCourtLocationAPI = courtsForCourtLocationAPI;
  }


  public CourtLocation createdDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-05-07T10:17:56Z", required = true, value = "The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.")

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  public void setCreatedDate(OffsetDateTime createdDate) {
    
    
    if (createdDate != null && createdDate.length() < 25) {
      throw new IllegalArgumentException("Invalid value for createdDate. Length must be greater than or equal to 25.");
    }
    this.createdDate = createdDate;
  }


  public CourtLocation name(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Airport Courthouse", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    
    
    if (name != null && name.length() < 1) {
      throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
    }
    this.name = name;
  }


  public CourtLocation _object(String _object) {
    
    
    if (_object != null && _object.length() < 13) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 13.");
    }
    
    this._object = _object;
    return this;
  }

   /**
   * Get _object
   * @return _object
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "CourtLocation", required = true, value = "")

  public String getObject() {
    return _object;
  }


  public void setObject(String _object) {
    
    
    if (_object != null && _object.length() < 13) {
      throw new IllegalArgumentException("Invalid value for _object. Length must be greater than or equal to 13.");
    }
    this._object = _object;
  }


  public CourtLocation stateName(String stateName) {
    
    
    if (stateName != null && stateName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for stateName. Length must be greater than or equal to 1.");
    }
    
    this.stateName = stateName;
    return this;
  }

   /**
   * State Name if present else default value.
   * @return stateName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "NEW YORK", required = true, value = "State Name if present else default value.")

  public String getStateName() {
    return stateName;
  }


  public void setStateName(String stateName) {
    
    
    if (stateName != null && stateName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for stateName. Length must be greater than or equal to 1.");
    }
    this.stateName = stateName;
  }


  public CourtLocation streetAddress1(String streetAddress1) {
    
    
    if (streetAddress1 != null && streetAddress1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetAddress1. Length must be greater than or equal to 1.");
    }
    
    this.streetAddress1 = streetAddress1;
    return this;
  }

   /**
   * 1st part of the street address.
   * @return streetAddress1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "4407 N DIVISION ST", required = true, value = "1st part of the street address.")

  public String getStreetAddress1() {
    return streetAddress1;
  }


  public void setStreetAddress1(String streetAddress1) {
    
    
    if (streetAddress1 != null && streetAddress1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for streetAddress1. Length must be greater than or equal to 1.");
    }
    this.streetAddress1 = streetAddress1;
  }


  public CourtLocation streetAddress2(String streetAddress2) {
    
    
    
    
    this.streetAddress2 = streetAddress2;
    return this;
  }

   /**
   * 2nd part of the street address.
   * @return streetAddress2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "STE 516", required = true, value = "2nd part of the street address.")

  public String getStreetAddress2() {
    return streetAddress2;
  }


  public void setStreetAddress2(String streetAddress2) {
    
    
    
    this.streetAddress2 = streetAddress2;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CourtLocation instance itself
   */
  public CourtLocation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourtLocation courtLocation = (CourtLocation) o;
    return Objects.equals(this.city, courtLocation.city) &&
        Objects.equals(this.courtLocationId, courtLocation.courtLocationId) &&
        Objects.equals(this.courtServiceStatusAPI, courtLocation.courtServiceStatusAPI) &&
        Objects.equals(this.courtsForCourtLocationAPI, courtLocation.courtsForCourtLocationAPI) &&
        Objects.equals(this.createdDate, courtLocation.createdDate) &&
        Objects.equals(this.name, courtLocation.name) &&
        Objects.equals(this._object, courtLocation._object) &&
        Objects.equals(this.stateName, courtLocation.stateName) &&
        Objects.equals(this.streetAddress1, courtLocation.streetAddress1) &&
        Objects.equals(this.streetAddress2, courtLocation.streetAddress2)&&
        Objects.equals(this.additionalProperties, courtLocation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(city, courtLocationId, courtServiceStatusAPI, courtsForCourtLocationAPI, createdDate, name, _object, stateName, streetAddress1, streetAddress2, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourtLocation {\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    courtLocationId: ").append(toIndentedString(courtLocationId)).append("\n");
    sb.append("    courtServiceStatusAPI: ").append(toIndentedString(courtServiceStatusAPI)).append("\n");
    sb.append("    courtsForCourtLocationAPI: ").append(toIndentedString(courtsForCourtLocationAPI)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    stateName: ").append(toIndentedString(stateName)).append("\n");
    sb.append("    streetAddress1: ").append(toIndentedString(streetAddress1)).append("\n");
    sb.append("    streetAddress2: ").append(toIndentedString(streetAddress2)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("city");
    openapiFields.add("courtLocationId");
    openapiFields.add("courtServiceStatusAPI");
    openapiFields.add("courtsForCourtLocationAPI");
    openapiFields.add("createdDate");
    openapiFields.add("name");
    openapiFields.add("object");
    openapiFields.add("stateName");
    openapiFields.add("streetAddress1");
    openapiFields.add("streetAddress2");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("courtLocationId");
    openapiRequiredFields.add("courtServiceStatusAPI");
    openapiRequiredFields.add("courtsForCourtLocationAPI");
    openapiRequiredFields.add("createdDate");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("object");
    openapiRequiredFields.add("stateName");
    openapiRequiredFields.add("streetAddress1");
    openapiRequiredFields.add("streetAddress2");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CourtLocation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CourtLocation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourtLocation is not found in the empty JSON string", CourtLocation.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CourtLocation.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("city").isJsonNull() && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("courtLocationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtLocationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtLocationId").toString()));
      }
      if (!jsonObj.get("courtServiceStatusAPI").isJsonNull() && !jsonObj.get("courtServiceStatusAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtServiceStatusAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtServiceStatusAPI").toString()));
      }
      if (!jsonObj.get("courtsForCourtLocationAPI").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courtsForCourtLocationAPI` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courtsForCourtLocationAPI").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("object").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `object` to be a primitive type in the JSON string but got `%s`", jsonObj.get("object").toString()));
      }
      if (!jsonObj.get("stateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateName").toString()));
      }
      if (!jsonObj.get("streetAddress1").isJsonNull() && !jsonObj.get("streetAddress1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress1").toString()));
      }
      if (!jsonObj.get("streetAddress2").isJsonNull() && !jsonObj.get("streetAddress2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `streetAddress2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("streetAddress2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourtLocation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourtLocation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourtLocation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourtLocation.class));

       return (TypeAdapter<T>) new TypeAdapter<CourtLocation>() {
           @Override
           public void write(JsonWriter out, CourtLocation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CourtLocation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CourtLocation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CourtLocation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CourtLocation
  * @throws IOException if the JSON string is invalid with respect to CourtLocation
  */
  public static CourtLocation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourtLocation.class);
  }

 /**
  * Convert an instance of CourtLocation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

