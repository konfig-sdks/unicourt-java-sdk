/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssociatedNormAttorneyResponse;
import com.konfigthis.client.model.AssociatedNormLawFirmResponse;
import com.konfigthis.client.model.AssociatedNormPartyResponse;
import com.konfigthis.client.model.NormJudge;
import com.konfigthis.client.model.NormJudgeSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class JudgeAnalyticsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JudgeAnalyticsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public JudgeAnalyticsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssociatedNormPartiesCall(String normJudgeId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normJudge/{normJudgeId}/associatedNormParties"
            .replace("{" + "normJudgeId" + "}", localVarApiClient.escapeString(normJudgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociatedNormPartiesValidateBeforeCall(String normJudgeId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normJudgeId' is set
        if (normJudgeId == null) {
            throw new ApiException("Missing the required parameter 'normJudgeId' when calling getAssociatedNormParties(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getAssociatedNormParties(Async)");
        }

        return getAssociatedNormPartiesCall(normJudgeId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormPartyResponse> getAssociatedNormPartiesWithHttpInfo(String normJudgeId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getAssociatedNormPartiesValidateBeforeCall(normJudgeId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormPartyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssociatedNormPartiesAsync(String normJudgeId, Integer pageNumber, String q, final ApiCallback<AssociatedNormPartyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociatedNormPartiesValidateBeforeCall(normJudgeId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormPartyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssociatedNormPartiesRequestBuilder {
        private final String normJudgeId;
        private final Integer pageNumber;
        private String q;

        private GetAssociatedNormPartiesRequestBuilder(String normJudgeId, Integer pageNumber) {
            this.normJudgeId = normJudgeId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetAssociatedNormPartiesRequestBuilder
         */
        public GetAssociatedNormPartiesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getAssociatedNormParties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssociatedNormPartiesCall(normJudgeId, pageNumber, q, _callback);
        }


        /**
         * Execute getAssociatedNormParties request
         * @return AssociatedNormPartyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormPartyResponse execute() throws ApiException {
            ApiResponse<AssociatedNormPartyResponse> localVarResp = getAssociatedNormPartiesWithHttpInfo(normJudgeId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssociatedNormParties request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormPartyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormPartyResponse> executeWithHttpInfo() throws ApiException {
            return getAssociatedNormPartiesWithHttpInfo(normJudgeId, pageNumber, q);
        }

        /**
         * Execute getAssociatedNormParties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormPartyResponse> _callback) throws ApiException {
            return getAssociatedNormPartiesAsync(normJudgeId, pageNumber, q, _callback);
        }
    }

    /**
     * Parties Associated with the Judge.
     * Returns a list of Parties A Judge has seen. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN (\&quot;COLODj4BBVTho3pKpz\&quot;,\&quot;COLOPUfJRhw5yPxgRi\&quot;)**| | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all Parties associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normJudgeId Norm  ID of the Judge.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetAssociatedNormPartiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssociatedNormPartiesRequestBuilder getAssociatedNormParties(String normJudgeId, Integer pageNumber) throws IllegalArgumentException {
        if (normJudgeId == null) throw new IllegalArgumentException("\"normJudgeId\" is required but got null");
            if (normJudgeId != null && normJudgeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normJudgeId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetAssociatedNormPartiesRequestBuilder(normJudgeId, pageNumber);
    }
    private okhttp3.Call getNormJudgeDetailsCall(String normJudgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normJudge/{normJudgeId}"
            .replace("{" + "normJudgeId" + "}", localVarApiClient.escapeString(normJudgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormJudgeDetailsValidateBeforeCall(String normJudgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normJudgeId' is set
        if (normJudgeId == null) {
            throw new ApiException("Missing the required parameter 'normJudgeId' when calling getNormJudgeDetails(Async)");
        }

        return getNormJudgeDetailsCall(normJudgeId, _callback);

    }


    private ApiResponse<NormJudge> getNormJudgeDetailsWithHttpInfo(String normJudgeId) throws ApiException {
        okhttp3.Call localVarCall = getNormJudgeDetailsValidateBeforeCall(normJudgeId, null);
        Type localVarReturnType = new TypeToken<NormJudge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormJudgeDetailsAsync(String normJudgeId, final ApiCallback<NormJudge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormJudgeDetailsValidateBeforeCall(normJudgeId, _callback);
        Type localVarReturnType = new TypeToken<NormJudge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormJudgeDetailsRequestBuilder {
        private final String normJudgeId;

        private GetNormJudgeDetailsRequestBuilder(String normJudgeId) {
            this.normJudgeId = normJudgeId;
        }

        /**
         * Build call for getNormJudgeDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormJudgeDetailsCall(normJudgeId, _callback);
        }


        /**
         * Execute getNormJudgeDetails request
         * @return NormJudge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public NormJudge execute() throws ApiException {
            ApiResponse<NormJudge> localVarResp = getNormJudgeDetailsWithHttpInfo(normJudgeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormJudgeDetails request with HTTP info returned
         * @return ApiResponse&lt;NormJudge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormJudge> executeWithHttpInfo() throws ApiException {
            return getNormJudgeDetailsWithHttpInfo(normJudgeId);
        }

        /**
         * Execute getNormJudgeDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormJudge> _callback) throws ApiException {
            return getNormJudgeDetailsAsync(normJudgeId, _callback);
        }
    }

    /**
     * Norm Judge Details.
     * The Judge API allows you to look up Judge Details by normJudgeId. 
     * @param normJudgeId Norm  ID of the Judge.   - minimum: 18   - maximum: 18  (required)
     * @return GetNormJudgeDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetNormJudgeDetailsRequestBuilder getNormJudgeDetails(String normJudgeId) throws IllegalArgumentException {
        if (normJudgeId == null) throw new IllegalArgumentException("\"normJudgeId\" is required but got null");
            if (normJudgeId != null && normJudgeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normJudgeId. Length must be greater than or equal to 18.");
            }

        return new GetNormJudgeDetailsRequestBuilder(normJudgeId);
    }
    private okhttp3.Call getNormJudgeSearchResultsByIdCall(String normJudgeSearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normJudgeSearch/{normJudgeSearchId}"
            .replace("{" + "normJudgeSearchId" + "}", localVarApiClient.escapeString(normJudgeSearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormJudgeSearchResultsByIdValidateBeforeCall(String normJudgeSearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normJudgeSearchId' is set
        if (normJudgeSearchId == null) {
            throw new ApiException("Missing the required parameter 'normJudgeSearchId' when calling getNormJudgeSearchResultsById(Async)");
        }

        return getNormJudgeSearchResultsByIdCall(normJudgeSearchId, pageNumber, _callback);

    }


    private ApiResponse<NormJudgeSearchResponse> getNormJudgeSearchResultsByIdWithHttpInfo(String normJudgeSearchId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getNormJudgeSearchResultsByIdValidateBeforeCall(normJudgeSearchId, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormJudgeSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormJudgeSearchResultsByIdAsync(String normJudgeSearchId, Integer pageNumber, final ApiCallback<NormJudgeSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormJudgeSearchResultsByIdValidateBeforeCall(normJudgeSearchId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormJudgeSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormJudgeSearchResultsByIdRequestBuilder {
        private final String normJudgeSearchId;
        private Integer pageNumber;

        private GetNormJudgeSearchResultsByIdRequestBuilder(String normJudgeSearchId) {
            this.normJudgeSearchId = normJudgeSearchId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return GetNormJudgeSearchResultsByIdRequestBuilder
         */
        public GetNormJudgeSearchResultsByIdRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getNormJudgeSearchResultsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormJudgeSearchResultsByIdCall(normJudgeSearchId, pageNumber, _callback);
        }


        /**
         * Execute getNormJudgeSearchResultsById request
         * @return NormJudgeSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormJudgeSearchResponse execute() throws ApiException {
            ApiResponse<NormJudgeSearchResponse> localVarResp = getNormJudgeSearchResultsByIdWithHttpInfo(normJudgeSearchId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormJudgeSearchResultsById request with HTTP info returned
         * @return ApiResponse&lt;NormJudgeSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormJudgeSearchResponse> executeWithHttpInfo() throws ApiException {
            return getNormJudgeSearchResultsByIdWithHttpInfo(normJudgeSearchId, pageNumber);
        }

        /**
         * Execute getNormJudgeSearchResultsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormJudgeSearchResponse> _callback) throws ApiException {
            return getNormJudgeSearchResultsByIdAsync(normJudgeSearchId, pageNumber, _callback);
        }
    }

    /**
     * Norm judge search results for a given normJudgeSearchId.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormJudgeSearchQueryObject 
     * @param normJudgeSearchId Norm judge Search information for the given normJudgeSearchId. (required)
     * @return GetNormJudgeSearchResultsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetNormJudgeSearchResultsByIdRequestBuilder getNormJudgeSearchResultsById(String normJudgeSearchId) throws IllegalArgumentException {
        if (normJudgeSearchId == null) throw new IllegalArgumentException("\"normJudgeSearchId\" is required but got null");
            if (normJudgeSearchId != null && normJudgeSearchId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normJudgeSearchId. Length must be greater than or equal to 18.");
            }

        return new GetNormJudgeSearchResultsByIdRequestBuilder(normJudgeSearchId);
    }
    private okhttp3.Call listAssociatedNormAttorneysCall(String normJudgeId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normJudge/{normJudgeId}/associatedNormAttorneys"
            .replace("{" + "normJudgeId" + "}", localVarApiClient.escapeString(normJudgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssociatedNormAttorneysValidateBeforeCall(String normJudgeId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normJudgeId' is set
        if (normJudgeId == null) {
            throw new ApiException("Missing the required parameter 'normJudgeId' when calling listAssociatedNormAttorneys(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAssociatedNormAttorneys(Async)");
        }

        return listAssociatedNormAttorneysCall(normJudgeId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormAttorneyResponse> listAssociatedNormAttorneysWithHttpInfo(String normJudgeId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listAssociatedNormAttorneysValidateBeforeCall(normJudgeId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormAttorneyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssociatedNormAttorneysAsync(String normJudgeId, Integer pageNumber, String q, final ApiCallback<AssociatedNormAttorneyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssociatedNormAttorneysValidateBeforeCall(normJudgeId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormAttorneyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssociatedNormAttorneysRequestBuilder {
        private final String normJudgeId;
        private final Integer pageNumber;
        private String q;

        private ListAssociatedNormAttorneysRequestBuilder(String normJudgeId, Integer pageNumber) {
            this.normJudgeId = normJudgeId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListAssociatedNormAttorneysRequestBuilder
         */
        public ListAssociatedNormAttorneysRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listAssociatedNormAttorneys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssociatedNormAttorneysCall(normJudgeId, pageNumber, q, _callback);
        }


        /**
         * Execute listAssociatedNormAttorneys request
         * @return AssociatedNormAttorneyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormAttorneyResponse execute() throws ApiException {
            ApiResponse<AssociatedNormAttorneyResponse> localVarResp = listAssociatedNormAttorneysWithHttpInfo(normJudgeId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssociatedNormAttorneys request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormAttorneyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormAttorneyResponse> executeWithHttpInfo() throws ApiException {
            return listAssociatedNormAttorneysWithHttpInfo(normJudgeId, pageNumber, q);
        }

        /**
         * Execute listAssociatedNormAttorneys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormAttorneyResponse> _callback) throws ApiException {
            return listAssociatedNormAttorneysAsync(normJudgeId, pageNumber, q, _callback);
        }
    }

    /**
     * Attorneys Associated with the Judge.
     * Returns a list of attorneys associated with a judge. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN (\&quot;COLODj4BBVTho3pKpz\&quot;,\&quot;COLOPUfJRhw5yPxgRi\&quot;)**| | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all attorneys associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normJudgeId Norm  ID of the Judge.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListAssociatedNormAttorneysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssociatedNormAttorneysRequestBuilder listAssociatedNormAttorneys(String normJudgeId, Integer pageNumber) throws IllegalArgumentException {
        if (normJudgeId == null) throw new IllegalArgumentException("\"normJudgeId\" is required but got null");
            if (normJudgeId != null && normJudgeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normJudgeId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListAssociatedNormAttorneysRequestBuilder(normJudgeId, pageNumber);
    }
    private okhttp3.Call listLawFirmsAssociatedWithJudgeCall(String normJudgeId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normJudge/{normJudgeId}/associatedNormLawFirms"
            .replace("{" + "normJudgeId" + "}", localVarApiClient.escapeString(normJudgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listLawFirmsAssociatedWithJudgeValidateBeforeCall(String normJudgeId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normJudgeId' is set
        if (normJudgeId == null) {
            throw new ApiException("Missing the required parameter 'normJudgeId' when calling listLawFirmsAssociatedWithJudge(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listLawFirmsAssociatedWithJudge(Async)");
        }

        return listLawFirmsAssociatedWithJudgeCall(normJudgeId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormLawFirmResponse> listLawFirmsAssociatedWithJudgeWithHttpInfo(String normJudgeId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listLawFirmsAssociatedWithJudgeValidateBeforeCall(normJudgeId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormLawFirmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listLawFirmsAssociatedWithJudgeAsync(String normJudgeId, Integer pageNumber, String q, final ApiCallback<AssociatedNormLawFirmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listLawFirmsAssociatedWithJudgeValidateBeforeCall(normJudgeId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormLawFirmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListLawFirmsAssociatedWithJudgeRequestBuilder {
        private final String normJudgeId;
        private final Integer pageNumber;
        private String q;

        private ListLawFirmsAssociatedWithJudgeRequestBuilder(String normJudgeId, Integer pageNumber) {
            this.normJudgeId = normJudgeId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListLawFirmsAssociatedWithJudgeRequestBuilder
         */
        public ListLawFirmsAssociatedWithJudgeRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listLawFirmsAssociatedWithJudge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listLawFirmsAssociatedWithJudgeCall(normJudgeId, pageNumber, q, _callback);
        }


        /**
         * Execute listLawFirmsAssociatedWithJudge request
         * @return AssociatedNormLawFirmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormLawFirmResponse execute() throws ApiException {
            ApiResponse<AssociatedNormLawFirmResponse> localVarResp = listLawFirmsAssociatedWithJudgeWithHttpInfo(normJudgeId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listLawFirmsAssociatedWithJudge request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormLawFirmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormLawFirmResponse> executeWithHttpInfo() throws ApiException {
            return listLawFirmsAssociatedWithJudgeWithHttpInfo(normJudgeId, pageNumber, q);
        }

        /**
         * Execute listLawFirmsAssociatedWithJudge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormLawFirmResponse> _callback) throws ApiException {
            return listLawFirmsAssociatedWithJudgeAsync(normJudgeId, pageNumber, q, _callback);
        }
    }

    /**
     * Law Firms Associated With the Judge.
     * Returns a list of Law Firms a Judge has heard. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLOPUfJRhw5yPxgRi\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN (\&quot;COLODj4BBVTho3pKpz\&quot;,\&quot;COLOPUfJRhw5yPxgRi\&quot;)**| | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all Law Firms associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normJudgeId Norm  ID of the Judge.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListLawFirmsAssociatedWithJudgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListLawFirmsAssociatedWithJudgeRequestBuilder listLawFirmsAssociatedWithJudge(String normJudgeId, Integer pageNumber) throws IllegalArgumentException {
        if (normJudgeId == null) throw new IllegalArgumentException("\"normJudgeId\" is required but got null");
            if (normJudgeId != null && normJudgeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normJudgeId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListLawFirmsAssociatedWithJudgeRequestBuilder(normJudgeId, pageNumber);
    }
    private okhttp3.Call searchNormJudgesCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normJudgeSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchNormJudgesValidateBeforeCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return searchNormJudgesCall(q, pageNumber, _callback);

    }


    private ApiResponse<NormJudgeSearchResponse> searchNormJudgesWithHttpInfo(String q, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchNormJudgesValidateBeforeCall(q, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormJudgeSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchNormJudgesAsync(String q, Integer pageNumber, final ApiCallback<NormJudgeSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchNormJudgesValidateBeforeCall(q, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormJudgeSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchNormJudgesRequestBuilder {
        private String q;
        private Integer pageNumber;

        private SearchNormJudgesRequestBuilder() {
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters.&lt;/a&gt;  (optional)
         * @return SearchNormJudgesRequestBuilder
         */
        public SearchNormJudgesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return SearchNormJudgesRequestBuilder
         */
        public SearchNormJudgesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchNormJudges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchNormJudgesCall(q, pageNumber, _callback);
        }


        /**
         * Execute searchNormJudges request
         * @return NormJudgeSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormJudgeSearchResponse execute() throws ApiException {
            ApiResponse<NormJudgeSearchResponse> localVarResp = searchNormJudgesWithHttpInfo(q, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchNormJudges request with HTTP info returned
         * @return ApiResponse&lt;NormJudgeSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormJudgeSearchResponse> executeWithHttpInfo() throws ApiException {
            return searchNormJudgesWithHttpInfo(q, pageNumber);
        }

        /**
         * Execute searchNormJudges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormJudgeSearchResponse> _callback) throws ApiException {
            return searchNormJudgesAsync(q, pageNumber, _callback);
        }
    }

    /**
     * Judge search.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormJudgeSearchQueryObject 
     * @return SearchNormJudgesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchNormJudgesRequestBuilder searchNormJudges() throws IllegalArgumentException {
        return new SearchNormJudgesRequestBuilder();
    }
}
