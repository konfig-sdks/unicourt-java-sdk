/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssociatedNormJudgeResponse;
import com.konfigthis.client.model.AssociatedNormLawFirmResponse;
import com.konfigthis.client.model.AssociatedNormPartyResponse;
import com.konfigthis.client.model.NormAttorney;
import com.konfigthis.client.model.NormAttorneySearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AttorneyAnalyticsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttorneyAnalyticsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AttorneyAnalyticsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssociatedLawFirmsCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorney/{normAttorneyId}/associatedNormLawFirms"
            .replace("{" + "normAttorneyId" + "}", localVarApiClient.escapeString(normAttorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociatedLawFirmsValidateBeforeCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normAttorneyId' is set
        if (normAttorneyId == null) {
            throw new ApiException("Missing the required parameter 'normAttorneyId' when calling getAssociatedLawFirms(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getAssociatedLawFirms(Async)");
        }

        return getAssociatedLawFirmsCall(normAttorneyId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormLawFirmResponse> getAssociatedLawFirmsWithHttpInfo(String normAttorneyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getAssociatedLawFirmsValidateBeforeCall(normAttorneyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormLawFirmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssociatedLawFirmsAsync(String normAttorneyId, Integer pageNumber, String q, final ApiCallback<AssociatedNormLawFirmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociatedLawFirmsValidateBeforeCall(normAttorneyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormLawFirmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssociatedLawFirmsRequestBuilder {
        private final String normAttorneyId;
        private final Integer pageNumber;
        private String q;

        private GetAssociatedLawFirmsRequestBuilder(String normAttorneyId, Integer pageNumber) {
            this.normAttorneyId = normAttorneyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetAssociatedLawFirmsRequestBuilder
         */
        public GetAssociatedLawFirmsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getAssociatedLawFirms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssociatedLawFirmsCall(normAttorneyId, pageNumber, q, _callback);
        }


        /**
         * Execute getAssociatedLawFirms request
         * @return AssociatedNormLawFirmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormLawFirmResponse execute() throws ApiException {
            ApiResponse<AssociatedNormLawFirmResponse> localVarResp = getAssociatedLawFirmsWithHttpInfo(normAttorneyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssociatedLawFirms request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormLawFirmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormLawFirmResponse> executeWithHttpInfo() throws ApiException {
            return getAssociatedLawFirmsWithHttpInfo(normAttorneyId, pageNumber, q);
        }

        /**
         * Execute getAssociatedLawFirms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormLawFirmResponse> _callback) throws ApiException {
            return getAssociatedLawFirmsAsync(normAttorneyId, pageNumber, q, _callback);
        }
    }

    /**
     * Law Firms the attorney has worked for.
     * Returns a list of Law Firms the norm Attorney has worked for. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot;  AND  courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTV4vCEaKrhystBz\&quot;, \&quot;CORTKQiA4LJuv54tEj\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all LawFirms associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normAttorneyId Norm ID of Attorney.    - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetAssociatedLawFirmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssociatedLawFirmsRequestBuilder getAssociatedLawFirms(String normAttorneyId, Integer pageNumber) throws IllegalArgumentException {
        if (normAttorneyId == null) throw new IllegalArgumentException("\"normAttorneyId\" is required but got null");
            if (normAttorneyId != null && normAttorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetAssociatedLawFirmsRequestBuilder(normAttorneyId, pageNumber);
    }
    private okhttp3.Call getJudgesAssociatedWithAttorneyCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorney/{normAttorneyId}/associatedNormJudges"
            .replace("{" + "normAttorneyId" + "}", localVarApiClient.escapeString(normAttorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJudgesAssociatedWithAttorneyValidateBeforeCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normAttorneyId' is set
        if (normAttorneyId == null) {
            throw new ApiException("Missing the required parameter 'normAttorneyId' when calling getJudgesAssociatedWithAttorney(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getJudgesAssociatedWithAttorney(Async)");
        }

        return getJudgesAssociatedWithAttorneyCall(normAttorneyId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormJudgeResponse> getJudgesAssociatedWithAttorneyWithHttpInfo(String normAttorneyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getJudgesAssociatedWithAttorneyValidateBeforeCall(normAttorneyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormJudgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJudgesAssociatedWithAttorneyAsync(String normAttorneyId, Integer pageNumber, String q, final ApiCallback<AssociatedNormJudgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJudgesAssociatedWithAttorneyValidateBeforeCall(normAttorneyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormJudgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJudgesAssociatedWithAttorneyRequestBuilder {
        private final String normAttorneyId;
        private final Integer pageNumber;
        private String q;

        private GetJudgesAssociatedWithAttorneyRequestBuilder(String normAttorneyId, Integer pageNumber) {
            this.normAttorneyId = normAttorneyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetJudgesAssociatedWithAttorneyRequestBuilder
         */
        public GetJudgesAssociatedWithAttorneyRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getJudgesAssociatedWithAttorney
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJudgesAssociatedWithAttorneyCall(normAttorneyId, pageNumber, q, _callback);
        }


        /**
         * Execute getJudgesAssociatedWithAttorney request
         * @return AssociatedNormJudgeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormJudgeResponse execute() throws ApiException {
            ApiResponse<AssociatedNormJudgeResponse> localVarResp = getJudgesAssociatedWithAttorneyWithHttpInfo(normAttorneyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJudgesAssociatedWithAttorney request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormJudgeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormJudgeResponse> executeWithHttpInfo() throws ApiException {
            return getJudgesAssociatedWithAttorneyWithHttpInfo(normAttorneyId, pageNumber, q);
        }

        /**
         * Execute getJudgesAssociatedWithAttorney request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormJudgeResponse> _callback) throws ApiException {
            return getJudgesAssociatedWithAttorneyAsync(normAttorneyId, pageNumber, q, _callback);
        }
    }

    /**
     * Judges faced by the Attorney.
     * This endpoint returns information on all judges which have appeared in cases with the attorney specified by the normAttorneyId. The returned judges are ordered in descending order of number of cases shared with the relevant attorney. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot;  AND  courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTV4vCEaKrhystBz\&quot;, \&quot;CORTKQiA4LJuv54tEj\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all judges associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normAttorneyId Norm ID of Attorney.    - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetJudgesAssociatedWithAttorneyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetJudgesAssociatedWithAttorneyRequestBuilder getJudgesAssociatedWithAttorney(String normAttorneyId, Integer pageNumber) throws IllegalArgumentException {
        if (normAttorneyId == null) throw new IllegalArgumentException("\"normAttorneyId\" is required but got null");
            if (normAttorneyId != null && normAttorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetJudgesAssociatedWithAttorneyRequestBuilder(normAttorneyId, pageNumber);
    }
    private okhttp3.Call getNormAttorneyByIdCall(String normAttorneyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorney/{normAttorneyId}"
            .replace("{" + "normAttorneyId" + "}", localVarApiClient.escapeString(normAttorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormAttorneyByIdValidateBeforeCall(String normAttorneyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normAttorneyId' is set
        if (normAttorneyId == null) {
            throw new ApiException("Missing the required parameter 'normAttorneyId' when calling getNormAttorneyById(Async)");
        }

        return getNormAttorneyByIdCall(normAttorneyId, _callback);

    }


    private ApiResponse<NormAttorney> getNormAttorneyByIdWithHttpInfo(String normAttorneyId) throws ApiException {
        okhttp3.Call localVarCall = getNormAttorneyByIdValidateBeforeCall(normAttorneyId, null);
        Type localVarReturnType = new TypeToken<NormAttorney>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormAttorneyByIdAsync(String normAttorneyId, final ApiCallback<NormAttorney> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormAttorneyByIdValidateBeforeCall(normAttorneyId, _callback);
        Type localVarReturnType = new TypeToken<NormAttorney>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormAttorneyByIdRequestBuilder {
        private final String normAttorneyId;

        private GetNormAttorneyByIdRequestBuilder(String normAttorneyId) {
            this.normAttorneyId = normAttorneyId;
        }

        /**
         * Build call for getNormAttorneyById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormAttorneyByIdCall(normAttorneyId, _callback);
        }


        /**
         * Execute getNormAttorneyById request
         * @return NormAttorney
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public NormAttorney execute() throws ApiException {
            ApiResponse<NormAttorney> localVarResp = getNormAttorneyByIdWithHttpInfo(normAttorneyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormAttorneyById request with HTTP info returned
         * @return ApiResponse&lt;NormAttorney&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormAttorney> executeWithHttpInfo() throws ApiException {
            return getNormAttorneyByIdWithHttpInfo(normAttorneyId);
        }

        /**
         * Execute getNormAttorneyById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormAttorney> _callback) throws ApiException {
            return getNormAttorneyByIdAsync(normAttorneyId, _callback);
        }
    }

    /**
     * Norm Attorney Details.
     * This endpoint retrieves information on the attorney in our normalized attorney database which matches the normAttorneyId specified in the request.
     * @param normAttorneyId Norm ID of Attorney.    - minimum: 18   - maximum: 18  (required)
     * @return GetNormAttorneyByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetNormAttorneyByIdRequestBuilder getNormAttorneyById(String normAttorneyId) throws IllegalArgumentException {
        if (normAttorneyId == null) throw new IllegalArgumentException("\"normAttorneyId\" is required but got null");
            if (normAttorneyId != null && normAttorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
            }

        return new GetNormAttorneyByIdRequestBuilder(normAttorneyId);
    }
    private okhttp3.Call getNormAttorneySearchResultsCall(String normAttorneySearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorneySearch/{normAttorneySearchId}"
            .replace("{" + "normAttorneySearchId" + "}", localVarApiClient.escapeString(normAttorneySearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormAttorneySearchResultsValidateBeforeCall(String normAttorneySearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normAttorneySearchId' is set
        if (normAttorneySearchId == null) {
            throw new ApiException("Missing the required parameter 'normAttorneySearchId' when calling getNormAttorneySearchResults(Async)");
        }

        return getNormAttorneySearchResultsCall(normAttorneySearchId, pageNumber, _callback);

    }


    private ApiResponse<NormAttorneySearchResponse> getNormAttorneySearchResultsWithHttpInfo(String normAttorneySearchId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getNormAttorneySearchResultsValidateBeforeCall(normAttorneySearchId, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormAttorneySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormAttorneySearchResultsAsync(String normAttorneySearchId, Integer pageNumber, final ApiCallback<NormAttorneySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormAttorneySearchResultsValidateBeforeCall(normAttorneySearchId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormAttorneySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormAttorneySearchResultsRequestBuilder {
        private final String normAttorneySearchId;
        private Integer pageNumber;

        private GetNormAttorneySearchResultsRequestBuilder(String normAttorneySearchId) {
            this.normAttorneySearchId = normAttorneySearchId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return GetNormAttorneySearchResultsRequestBuilder
         */
        public GetNormAttorneySearchResultsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getNormAttorneySearchResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormAttorneySearchResultsCall(normAttorneySearchId, pageNumber, _callback);
        }


        /**
         * Execute getNormAttorneySearchResults request
         * @return NormAttorneySearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormAttorneySearchResponse execute() throws ApiException {
            ApiResponse<NormAttorneySearchResponse> localVarResp = getNormAttorneySearchResultsWithHttpInfo(normAttorneySearchId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormAttorneySearchResults request with HTTP info returned
         * @return ApiResponse&lt;NormAttorneySearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormAttorneySearchResponse> executeWithHttpInfo() throws ApiException {
            return getNormAttorneySearchResultsWithHttpInfo(normAttorneySearchId, pageNumber);
        }

        /**
         * Execute getNormAttorneySearchResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormAttorneySearchResponse> _callback) throws ApiException {
            return getNormAttorneySearchResultsAsync(normAttorneySearchId, pageNumber, _callback);
        }
    }

    /**
     * Norm attorney search results for a given normAttorneySearchId.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormAttorneySearchQueryObject 
     * @param normAttorneySearchId Norm Attorney Search information for the given normAttorneySearchId. (required)
     * @return GetNormAttorneySearchResultsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetNormAttorneySearchResultsRequestBuilder getNormAttorneySearchResults(String normAttorneySearchId) throws IllegalArgumentException {
        if (normAttorneySearchId == null) throw new IllegalArgumentException("\"normAttorneySearchId\" is required but got null");
            if (normAttorneySearchId != null && normAttorneySearchId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normAttorneySearchId. Length must be greater than or equal to 18.");
            }

        return new GetNormAttorneySearchResultsRequestBuilder(normAttorneySearchId);
    }
    private okhttp3.Call listAssociatedNormPartiesCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorney/{normAttorneyId}/associatedNormParties"
            .replace("{" + "normAttorneyId" + "}", localVarApiClient.escapeString(normAttorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssociatedNormPartiesValidateBeforeCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normAttorneyId' is set
        if (normAttorneyId == null) {
            throw new ApiException("Missing the required parameter 'normAttorneyId' when calling listAssociatedNormParties(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAssociatedNormParties(Async)");
        }

        return listAssociatedNormPartiesCall(normAttorneyId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormPartyResponse> listAssociatedNormPartiesWithHttpInfo(String normAttorneyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listAssociatedNormPartiesValidateBeforeCall(normAttorneyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormPartyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssociatedNormPartiesAsync(String normAttorneyId, Integer pageNumber, String q, final ApiCallback<AssociatedNormPartyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssociatedNormPartiesValidateBeforeCall(normAttorneyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormPartyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssociatedNormPartiesRequestBuilder {
        private final String normAttorneyId;
        private final Integer pageNumber;
        private String q;

        private ListAssociatedNormPartiesRequestBuilder(String normAttorneyId, Integer pageNumber) {
            this.normAttorneyId = normAttorneyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListAssociatedNormPartiesRequestBuilder
         */
        public ListAssociatedNormPartiesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listAssociatedNormParties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssociatedNormPartiesCall(normAttorneyId, pageNumber, q, _callback);
        }


        /**
         * Execute listAssociatedNormParties request
         * @return AssociatedNormPartyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormPartyResponse execute() throws ApiException {
            ApiResponse<AssociatedNormPartyResponse> localVarResp = listAssociatedNormPartiesWithHttpInfo(normAttorneyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssociatedNormParties request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormPartyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormPartyResponse> executeWithHttpInfo() throws ApiException {
            return listAssociatedNormPartiesWithHttpInfo(normAttorneyId, pageNumber, q);
        }

        /**
         * Execute listAssociatedNormParties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormPartyResponse> _callback) throws ApiException {
            return listAssociatedNormPartiesAsync(normAttorneyId, pageNumber, q, _callback);
        }
    }

    /**
     * Parties Represented By the Attorney.
     * Returns a list of Parties the Attorney has represented. &lt;br&gt;&lt;br&gt; ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot;  AND  courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTV4vCEaKrhystBz\&quot;, \&quot;CORTKQiA4LJuv54tEj\&quot;)**| | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object.. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all parties associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normAttorneyId Norm ID of Attorney.    - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListAssociatedNormPartiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssociatedNormPartiesRequestBuilder listAssociatedNormParties(String normAttorneyId, Integer pageNumber) throws IllegalArgumentException {
        if (normAttorneyId == null) throw new IllegalArgumentException("\"normAttorneyId\" is required but got null");
            if (normAttorneyId != null && normAttorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListAssociatedNormPartiesRequestBuilder(normAttorneyId, pageNumber);
    }
    private okhttp3.Call searchAttorneyInfoCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorneySearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAttorneyInfoValidateBeforeCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return searchAttorneyInfoCall(q, pageNumber, _callback);

    }


    private ApiResponse<NormAttorneySearchResponse> searchAttorneyInfoWithHttpInfo(String q, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchAttorneyInfoValidateBeforeCall(q, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormAttorneySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAttorneyInfoAsync(String q, Integer pageNumber, final ApiCallback<NormAttorneySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAttorneyInfoValidateBeforeCall(q, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormAttorneySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAttorneyInfoRequestBuilder {
        private String q;
        private Integer pageNumber;

        private SearchAttorneyInfoRequestBuilder() {
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters.&lt;/a&gt;  (optional)
         * @return SearchAttorneyInfoRequestBuilder
         */
        public SearchAttorneyInfoRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return SearchAttorneyInfoRequestBuilder
         */
        public SearchAttorneyInfoRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchAttorneyInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAttorneyInfoCall(q, pageNumber, _callback);
        }


        /**
         * Execute searchAttorneyInfo request
         * @return NormAttorneySearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormAttorneySearchResponse execute() throws ApiException {
            ApiResponse<NormAttorneySearchResponse> localVarResp = searchAttorneyInfoWithHttpInfo(q, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAttorneyInfo request with HTTP info returned
         * @return ApiResponse&lt;NormAttorneySearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormAttorneySearchResponse> executeWithHttpInfo() throws ApiException {
            return searchAttorneyInfoWithHttpInfo(q, pageNumber);
        }

        /**
         * Execute searchAttorneyInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormAttorneySearchResponse> _callback) throws ApiException {
            return searchAttorneyInfoAsync(q, pageNumber, _callback);
        }
    }

    /**
     * Attorney search.
     * ### This endpoint retrieves information, including the normAttorneyId, on all attorneys in our normalized attorney database which match the request parameters. All query parameters supported by this API can be found in the schema section below. 
     * @return SearchAttorneyInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchAttorneyInfoRequestBuilder searchAttorneyInfo() throws IllegalArgumentException {
        return new SearchAttorneyInfoRequestBuilder();
    }
}
