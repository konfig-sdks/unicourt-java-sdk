/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CaseCountAnalyticsByAreaOfLawResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCaseClassResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCaseFiledDateResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCaseTypeGroupResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCaseTypeResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCourtLocationResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCourtResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCourtSystemResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByCourtTypeResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByJurisdictionGeoResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByNormAttorneyResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByNormJudgeResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByNormLawFirmResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByNormPartyResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByPartyRoleGroupResponse;
import com.konfigthis.client.model.CaseCountAnalyticsByPartyRoleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaseAnalyticsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaseAnalyticsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaseAnalyticsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCaseCountAnalyticsByCaseClassCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCaseClass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCaseClassValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCaseClass(Async)");
        }

        return getCaseCountAnalyticsByCaseClassCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCaseClassResponse> getCaseCountAnalyticsByCaseClassWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCaseClassValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseClassResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCaseClassAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCaseClassResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCaseClassValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseClassResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCaseClassRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByCaseClassRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCaseClassRequestBuilder
         */
        public GetCaseCountAnalyticsByCaseClassRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCaseClass
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCaseClassCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCaseClass request
         * @return CaseCountAnalyticsByCaseClassResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCaseClassResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCaseClassResponse> localVarResp = getCaseCountAnalyticsByCaseClassWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCaseClass request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCaseClassResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCaseClassResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCaseClassWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCaseClass request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCaseClassResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCaseClassAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Case Class.
     * Get Analytics by Case Class. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by Case Class  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByCaseClassRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCaseClassRequestBuilder getCaseCountAnalyticsByCaseClass(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByCaseClassRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByCaseFiledDateCall(Integer pageNumber, String groupBy, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCaseFiledDate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (groupBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupBy", groupBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCaseFiledDateValidateBeforeCall(Integer pageNumber, String groupBy, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCaseFiledDate(Async)");
        }

        // verify the required parameter 'groupBy' is set
        if (groupBy == null) {
            throw new ApiException("Missing the required parameter 'groupBy' when calling getCaseCountAnalyticsByCaseFiledDate(Async)");
        }

        return getCaseCountAnalyticsByCaseFiledDateCall(pageNumber, groupBy, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCaseFiledDateResponse> getCaseCountAnalyticsByCaseFiledDateWithHttpInfo(Integer pageNumber, String groupBy, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCaseFiledDateValidateBeforeCall(pageNumber, groupBy, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseFiledDateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCaseFiledDateAsync(Integer pageNumber, String groupBy, String q, final ApiCallback<CaseCountAnalyticsByCaseFiledDateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCaseFiledDateValidateBeforeCall(pageNumber, groupBy, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseFiledDateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCaseFiledDateRequestBuilder {
        private final Integer pageNumber;
        private final String groupBy;
        private String q;

        private GetCaseCountAnalyticsByCaseFiledDateRequestBuilder(Integer pageNumber, String groupBy) {
            this.pageNumber = pageNumber;
            this.groupBy = groupBy;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCaseFiledDateRequestBuilder
         */
        public GetCaseCountAnalyticsByCaseFiledDateRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCaseFiledDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCaseFiledDateCall(pageNumber, groupBy, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCaseFiledDate request
         * @return CaseCountAnalyticsByCaseFiledDateResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCaseFiledDateResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCaseFiledDateResponse> localVarResp = getCaseCountAnalyticsByCaseFiledDateWithHttpInfo(pageNumber, groupBy, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCaseFiledDate request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCaseFiledDateResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCaseFiledDateResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCaseFiledDateWithHttpInfo(pageNumber, groupBy, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCaseFiledDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCaseFiledDateResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCaseFiledDateAsync(pageNumber, groupBy, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Case Filed Date.
     * Get Case Count Analytics grouped by Filing Date. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by case filed date of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @param groupBy GroupBy (required)
     * @return GetCaseCountAnalyticsByCaseFiledDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCaseFiledDateRequestBuilder getCaseCountAnalyticsByCaseFiledDate(Integer pageNumber, String groupBy) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        if (groupBy == null) throw new IllegalArgumentException("\"groupBy\" is required but got null");
            

        return new GetCaseCountAnalyticsByCaseFiledDateRequestBuilder(pageNumber, groupBy);
    }
    private okhttp3.Call getCaseCountAnalyticsByCaseTypeGroupCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCaseTypeGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCaseTypeGroupValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCaseTypeGroup(Async)");
        }

        return getCaseCountAnalyticsByCaseTypeGroupCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCaseTypeGroupResponse> getCaseCountAnalyticsByCaseTypeGroupWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCaseTypeGroupValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseTypeGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCaseTypeGroupAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCaseTypeGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCaseTypeGroupValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseTypeGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder
         */
        public GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCaseTypeGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCaseTypeGroupCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCaseTypeGroup request
         * @return CaseCountAnalyticsByCaseTypeGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCaseTypeGroupResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCaseTypeGroupResponse> localVarResp = getCaseCountAnalyticsByCaseTypeGroupWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCaseTypeGroup request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCaseTypeGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCaseTypeGroupResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCaseTypeGroupWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCaseTypeGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCaseTypeGroupResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCaseTypeGroupAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Case Type Group.
     * Get Analytics by Case Type Group. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by case type catgeory of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder getCaseCountAnalyticsByCaseTypeGroup(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByCaseTypeGroupRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByCourtCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCourt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCourtValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCourt(Async)");
        }

        return getCaseCountAnalyticsByCourtCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCourtResponse> getCaseCountAnalyticsByCourtWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCourtAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCourtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCourtRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByCourtRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCourtRequestBuilder
         */
        public GetCaseCountAnalyticsByCourtRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCourt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCourt request
         * @return CaseCountAnalyticsByCourtResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCourtResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCourtResponse> localVarResp = getCaseCountAnalyticsByCourtWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCourt request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCourtResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCourtResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCourtWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCourt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCourtResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Court.
     * Get Case Count Analytics grouped by Court. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by Court of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByCourtRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCourtRequestBuilder getCaseCountAnalyticsByCourt(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByCourtRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByCourtLocationCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCourtLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCourtLocationValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCourtLocation(Async)");
        }

        return getCaseCountAnalyticsByCourtLocationCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCourtLocationResponse> getCaseCountAnalyticsByCourtLocationWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtLocationValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCourtLocationAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCourtLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtLocationValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCourtLocationRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByCourtLocationRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCourtLocationRequestBuilder
         */
        public GetCaseCountAnalyticsByCourtLocationRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCourtLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtLocationCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCourtLocation request
         * @return CaseCountAnalyticsByCourtLocationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCourtLocationResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCourtLocationResponse> localVarResp = getCaseCountAnalyticsByCourtLocationWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCourtLocation request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCourtLocationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCourtLocationResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCourtLocationWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCourtLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCourtLocationResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtLocationAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Court Location.
     * Get Case Count Analytics grouped by Court Location. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by court location  of all cases with court id CORTV4vCEaKrhystBz and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByCourtLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCourtLocationRequestBuilder getCaseCountAnalyticsByCourtLocation(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByCourtLocationRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByCourtSystemCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCourtSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCourtSystemValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCourtSystem(Async)");
        }

        return getCaseCountAnalyticsByCourtSystemCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCourtSystemResponse> getCaseCountAnalyticsByCourtSystemWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtSystemValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtSystemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCourtSystemAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCourtSystemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtSystemValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtSystemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCourtSystemRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByCourtSystemRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCourtSystemRequestBuilder
         */
        public GetCaseCountAnalyticsByCourtSystemRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCourtSystem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtSystemCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCourtSystem request
         * @return CaseCountAnalyticsByCourtSystemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCourtSystemResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCourtSystemResponse> localVarResp = getCaseCountAnalyticsByCourtSystemWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCourtSystem request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCourtSystemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCourtSystemResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCourtSystemWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCourtSystem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCourtSystemResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtSystemAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Court System.
     * Get Case Count Analytics grouped by Court System. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by court system of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByCourtSystemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCourtSystemRequestBuilder getCaseCountAnalyticsByCourtSystem(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByCourtSystemRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByCourtTypeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCourtType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByCourtTypeValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByCourtType(Async)");
        }

        return getCaseCountAnalyticsByCourtTypeCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCourtTypeResponse> getCaseCountAnalyticsByCourtTypeWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtTypeValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByCourtTypeAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCourtTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByCourtTypeValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCourtTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByCourtTypeRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByCourtTypeRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByCourtTypeRequestBuilder
         */
        public GetCaseCountAnalyticsByCourtTypeRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByCourtType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtTypeCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByCourtType request
         * @return CaseCountAnalyticsByCourtTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCourtTypeResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCourtTypeResponse> localVarResp = getCaseCountAnalyticsByCourtTypeWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByCourtType request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCourtTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCourtTypeResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByCourtTypeWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByCourtType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCourtTypeResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByCourtTypeAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by CourtType.
     * Get Case Count Analytics grouped by Court Type. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by court type  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByCourtTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByCourtTypeRequestBuilder getCaseCountAnalyticsByCourtType(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByCourtTypeRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByJurisdictionGeoCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByJurisdictionGeo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByJurisdictionGeoValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByJurisdictionGeo(Async)");
        }

        return getCaseCountAnalyticsByJurisdictionGeoCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByJurisdictionGeoResponse> getCaseCountAnalyticsByJurisdictionGeoWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByJurisdictionGeoValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByJurisdictionGeoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByJurisdictionGeoAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByJurisdictionGeoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByJurisdictionGeoValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByJurisdictionGeoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder
         */
        public GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByJurisdictionGeo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByJurisdictionGeoCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByJurisdictionGeo request
         * @return CaseCountAnalyticsByJurisdictionGeoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByJurisdictionGeoResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByJurisdictionGeoResponse> localVarResp = getCaseCountAnalyticsByJurisdictionGeoWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByJurisdictionGeo request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByJurisdictionGeoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByJurisdictionGeoResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByJurisdictionGeoWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByJurisdictionGeo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByJurisdictionGeoResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByJurisdictionGeoAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Jurisdiction Geo.
     * Get Case Count Analytics grouped by Jurisdiction Geo. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by jurisdiction geo of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder getCaseCountAnalyticsByJurisdictionGeo(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByJurisdictionGeoRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByNormAttorneyCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByNormAttorney";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByNormAttorneyValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByNormAttorney(Async)");
        }

        return getCaseCountAnalyticsByNormAttorneyCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormAttorneyResponse> getCaseCountAnalyticsByNormAttorneyWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormAttorneyValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormAttorneyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByNormAttorneyAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormAttorneyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormAttorneyValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormAttorneyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByNormAttorneyRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByNormAttorneyRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByNormAttorneyRequestBuilder
         */
        public GetCaseCountAnalyticsByNormAttorneyRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByNormAttorney
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByNormAttorneyCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByNormAttorney request
         * @return CaseCountAnalyticsByNormAttorneyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormAttorneyResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormAttorneyResponse> localVarResp = getCaseCountAnalyticsByNormAttorneyWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByNormAttorney request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormAttorneyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormAttorneyResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByNormAttorneyWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByNormAttorney request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormAttorneyResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByNormAttorneyAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Attorney.
     * Returns Case Analytics by Attorney. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm attorney of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByNormAttorneyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByNormAttorneyRequestBuilder getCaseCountAnalyticsByNormAttorney(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByNormAttorneyRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByNormJudgeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByNormJudge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByNormJudgeValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByNormJudge(Async)");
        }

        return getCaseCountAnalyticsByNormJudgeCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormJudgeResponse> getCaseCountAnalyticsByNormJudgeWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormJudgeValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormJudgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByNormJudgeAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormJudgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormJudgeValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormJudgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByNormJudgeRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByNormJudgeRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByNormJudgeRequestBuilder
         */
        public GetCaseCountAnalyticsByNormJudgeRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByNormJudge
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByNormJudgeCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByNormJudge request
         * @return CaseCountAnalyticsByNormJudgeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormJudgeResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormJudgeResponse> localVarResp = getCaseCountAnalyticsByNormJudgeWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByNormJudge request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormJudgeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormJudgeResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByNormJudgeWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByNormJudge request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormJudgeResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByNormJudgeAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Judge.
     * Returns Case Analytics by Judge. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm judge of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByNormJudgeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByNormJudgeRequestBuilder getCaseCountAnalyticsByNormJudge(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByNormJudgeRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByNormLawFirmCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByNormLawFirm";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByNormLawFirmValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByNormLawFirm(Async)");
        }

        return getCaseCountAnalyticsByNormLawFirmCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormLawFirmResponse> getCaseCountAnalyticsByNormLawFirmWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormLawFirmValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormLawFirmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByNormLawFirmAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormLawFirmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormLawFirmValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormLawFirmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByNormLawFirmRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByNormLawFirmRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByNormLawFirmRequestBuilder
         */
        public GetCaseCountAnalyticsByNormLawFirmRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByNormLawFirm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByNormLawFirmCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByNormLawFirm request
         * @return CaseCountAnalyticsByNormLawFirmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormLawFirmResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormLawFirmResponse> localVarResp = getCaseCountAnalyticsByNormLawFirmWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByNormLawFirm request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormLawFirmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormLawFirmResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByNormLawFirmWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByNormLawFirm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormLawFirmResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByNormLawFirmAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Norm Law Firm.
     * Returns Case Analytics by Norm Law Firm. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm lawfirm  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByNormLawFirmRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByNormLawFirmRequestBuilder getCaseCountAnalyticsByNormLawFirm(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByNormLawFirmRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByNormPartyCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByNormParty";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByNormPartyValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByNormParty(Async)");
        }

        return getCaseCountAnalyticsByNormPartyCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormPartyResponse> getCaseCountAnalyticsByNormPartyWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormPartyValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormPartyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByNormPartyAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormPartyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByNormPartyValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormPartyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByNormPartyRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByNormPartyRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByNormPartyRequestBuilder
         */
        public GetCaseCountAnalyticsByNormPartyRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByNormParty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByNormPartyCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByNormParty request
         * @return CaseCountAnalyticsByNormPartyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormPartyResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormPartyResponse> localVarResp = getCaseCountAnalyticsByNormPartyWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByNormParty request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormPartyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormPartyResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByNormPartyWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByNormParty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormPartyResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByNormPartyAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Party.
     * Returns Case Analytics by Party. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm party of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByNormPartyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByNormPartyRequestBuilder getCaseCountAnalyticsByNormParty(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByNormPartyRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normAttorney/{normAttorneyId}/caseCountAnalyticsByOpposingNormAttorney"
            .replace("{" + "normAttorneyId" + "}", localVarApiClient.escapeString(normAttorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyValidateBeforeCall(String normAttorneyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normAttorneyId' is set
        if (normAttorneyId == null) {
            throw new ApiException("Missing the required parameter 'normAttorneyId' when calling getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney(Async)");
        }

        return getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyCall(normAttorneyId, pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormAttorneyResponse> getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyWithHttpInfo(String normAttorneyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyValidateBeforeCall(normAttorneyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormAttorneyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyAsync(String normAttorneyId, Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormAttorneyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyValidateBeforeCall(normAttorneyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormAttorneyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder {
        private final String normAttorneyId;
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder(String normAttorneyId, Integer pageNumber) {
            this.normAttorneyId = normAttorneyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder
         */
        public GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyCall(normAttorneyId, pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney request
         * @return CaseCountAnalyticsByNormAttorneyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormAttorneyResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormAttorneyResponse> localVarResp = getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyWithHttpInfo(normAttorneyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormAttorneyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormAttorneyResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyWithHttpInfo(normAttorneyId, pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormAttorneyResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyAsync(normAttorneyId, pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Opposing Norm Attorney.
     * Returns Case Analytics by Attorney. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normPartyId** | Single Allowed  |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Single Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDiNU45NWikKVxSH\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm attorney with norm id NATYY29p78c7UoyJJ of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param normAttorneyId Norm ID of Attorney.    - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder getCaseCountAnalyticsByOpposingNormAttorneyForNormAttorney(String normAttorneyId, Integer pageNumber) throws IllegalArgumentException {
        if (normAttorneyId == null) throw new IllegalArgumentException("\"normAttorneyId\" is required but got null");
            if (normAttorneyId != null && normAttorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normAttorneyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByOpposingNormAttorneyForNormAttorneyRequestBuilder(normAttorneyId, pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirm/{normLawFirmId}/caseCountAnalyticsByOpposingNormLawFirm"
            .replace("{" + "normLawFirmId" + "}", localVarApiClient.escapeString(normLawFirmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmValidateBeforeCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normLawFirmId' is set
        if (normLawFirmId == null) {
            throw new ApiException("Missing the required parameter 'normLawFirmId' when calling getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm(Async)");
        }

        return getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmCall(normLawFirmId, pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormLawFirmResponse> getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmWithHttpInfo(String normLawFirmId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmValidateBeforeCall(normLawFirmId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormLawFirmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmAsync(String normLawFirmId, Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormLawFirmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmValidateBeforeCall(normLawFirmId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormLawFirmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder {
        private final String normLawFirmId;
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder(String normLawFirmId, Integer pageNumber) {
            this.normLawFirmId = normLawFirmId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder
         */
        public GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmCall(normLawFirmId, pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm request
         * @return CaseCountAnalyticsByNormLawFirmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormLawFirmResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormLawFirmResponse> localVarResp = getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmWithHttpInfo(normLawFirmId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormLawFirmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormLawFirmResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmWithHttpInfo(normLawFirmId, pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormLawFirmResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmAsync(normLawFirmId, pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Opposing Norm Law Firm.
     * Returns Case Analytics by Norm Law Firm. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYp7kmEQtt8jQ3eQ\&quot;** | | **normPartyId** | Single Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm lawfirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param normLawFirmId Norm  ID of the Law Firm.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder getCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirm(String normLawFirmId, Integer pageNumber) throws IllegalArgumentException {
        if (normLawFirmId == null) throw new IllegalArgumentException("\"normLawFirmId\" is required but got null");
            if (normLawFirmId != null && normLawFirmId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normLawFirmId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByOpposingNormLawFirmForANormLawFirmRequestBuilder(normLawFirmId, pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByOpposingNormPartyForANormPartyCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normParty/{normPartyId}/caseCountAnalyticsByOpposingNormParty"
            .replace("{" + "normPartyId" + "}", localVarApiClient.escapeString(normPartyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByOpposingNormPartyForANormPartyValidateBeforeCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normPartyId' is set
        if (normPartyId == null) {
            throw new ApiException("Missing the required parameter 'normPartyId' when calling getCaseCountAnalyticsByOpposingNormPartyForANormParty(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByOpposingNormPartyForANormParty(Async)");
        }

        return getCaseCountAnalyticsByOpposingNormPartyForANormPartyCall(normPartyId, pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByNormPartyResponse> getCaseCountAnalyticsByOpposingNormPartyForANormPartyWithHttpInfo(String normPartyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByOpposingNormPartyForANormPartyValidateBeforeCall(normPartyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormPartyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByOpposingNormPartyForANormPartyAsync(String normPartyId, Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByNormPartyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByOpposingNormPartyForANormPartyValidateBeforeCall(normPartyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByNormPartyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder {
        private final String normPartyId;
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder(String normPartyId, Integer pageNumber) {
            this.normPartyId = normPartyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder
         */
        public GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByOpposingNormPartyForANormParty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByOpposingNormPartyForANormPartyCall(normPartyId, pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByOpposingNormPartyForANormParty request
         * @return CaseCountAnalyticsByNormPartyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByNormPartyResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByNormPartyResponse> localVarResp = getCaseCountAnalyticsByOpposingNormPartyForANormPartyWithHttpInfo(normPartyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByOpposingNormPartyForANormParty request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByNormPartyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByNormPartyResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByOpposingNormPartyForANormPartyWithHttpInfo(normPartyId, pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByOpposingNormPartyForANormParty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByNormPartyResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByOpposingNormPartyForANormPartyAsync(normPartyId, pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Opposing Norm Party.
     * Returns Case Analytics by Opposing Norm Party. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by norm party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param normPartyId Norm ID of the Party.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder getCaseCountAnalyticsByOpposingNormPartyForANormParty(String normPartyId, Integer pageNumber) throws IllegalArgumentException {
        if (normPartyId == null) throw new IllegalArgumentException("\"normPartyId\" is required but got null");
            if (normPartyId != null && normPartyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByOpposingNormPartyForANormPartyRequestBuilder(normPartyId, pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByPartyRoleCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByPartyRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByPartyRoleValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByPartyRole(Async)");
        }

        return getCaseCountAnalyticsByPartyRoleCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByPartyRoleResponse> getCaseCountAnalyticsByPartyRoleWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByPartyRoleValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByPartyRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByPartyRoleAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByPartyRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByPartyRoleValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByPartyRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByPartyRoleRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByPartyRoleRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByPartyRoleRequestBuilder
         */
        public GetCaseCountAnalyticsByPartyRoleRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByPartyRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByPartyRoleCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByPartyRole request
         * @return CaseCountAnalyticsByPartyRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByPartyRoleResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByPartyRoleResponse> localVarResp = getCaseCountAnalyticsByPartyRoleWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByPartyRole request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByPartyRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByPartyRoleResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByPartyRoleWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByPartyRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByPartyRoleResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByPartyRoleAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Party Role.
     * Returns Case Analytics by Party Type. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by party role of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByPartyRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByPartyRoleRequestBuilder getCaseCountAnalyticsByPartyRole(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByPartyRoleRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountAnalyticsByPartyRoleGroupCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByPartyRoleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountAnalyticsByPartyRoleGroupValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountAnalyticsByPartyRoleGroup(Async)");
        }

        return getCaseCountAnalyticsByPartyRoleGroupCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByPartyRoleGroupResponse> getCaseCountAnalyticsByPartyRoleGroupWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountAnalyticsByPartyRoleGroupValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByPartyRoleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountAnalyticsByPartyRoleGroupAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByPartyRoleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountAnalyticsByPartyRoleGroupValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByPartyRoleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder
         */
        public GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountAnalyticsByPartyRoleGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountAnalyticsByPartyRoleGroupCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountAnalyticsByPartyRoleGroup request
         * @return CaseCountAnalyticsByPartyRoleGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByPartyRoleGroupResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByPartyRoleGroupResponse> localVarResp = getCaseCountAnalyticsByPartyRoleGroupWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountAnalyticsByPartyRoleGroup request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByPartyRoleGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByPartyRoleGroupResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountAnalyticsByPartyRoleGroupWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountAnalyticsByPartyRoleGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByPartyRoleGroupResponse> _callback) throws ApiException {
            return getCaseCountAnalyticsByPartyRoleGroupAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Party Role Group.
     * Returns Case Analytics by Party Type Group. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by Party Role Group of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder getCaseCountAnalyticsByPartyRoleGroup(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountAnalyticsByPartyRoleGroupRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountByAreaOfLawCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByAreaOfLaw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountByAreaOfLawValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountByAreaOfLaw(Async)");
        }

        return getCaseCountByAreaOfLawCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByAreaOfLawResponse> getCaseCountByAreaOfLawWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountByAreaOfLawValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByAreaOfLawResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountByAreaOfLawAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByAreaOfLawResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountByAreaOfLawValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByAreaOfLawResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountByAreaOfLawRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountByAreaOfLawRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountByAreaOfLawRequestBuilder
         */
        public GetCaseCountByAreaOfLawRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountByAreaOfLaw
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountByAreaOfLawCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountByAreaOfLaw request
         * @return CaseCountAnalyticsByAreaOfLawResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByAreaOfLawResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByAreaOfLawResponse> localVarResp = getCaseCountByAreaOfLawWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountByAreaOfLaw request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByAreaOfLawResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByAreaOfLawResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountByAreaOfLawWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountByAreaOfLaw request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByAreaOfLawResponse> _callback) throws ApiException {
            return getCaseCountByAreaOfLawAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Area Of Law.
     * Get Case Count Analytics by Area Of Law. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by Area Of Law of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountByAreaOfLawRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountByAreaOfLawRequestBuilder getCaseCountByAreaOfLaw(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountByAreaOfLawRequestBuilder(pageNumber);
    }
    private okhttp3.Call getCaseCountByCaseTypeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseCountAnalyticsByCaseType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseCountByCaseTypeValidateBeforeCall(Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getCaseCountByCaseType(Async)");
        }

        return getCaseCountByCaseTypeCall(pageNumber, q, _callback);

    }


    private ApiResponse<CaseCountAnalyticsByCaseTypeResponse> getCaseCountByCaseTypeWithHttpInfo(Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getCaseCountByCaseTypeValidateBeforeCall(pageNumber, q, null);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseCountByCaseTypeAsync(Integer pageNumber, String q, final ApiCallback<CaseCountAnalyticsByCaseTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseCountByCaseTypeValidateBeforeCall(pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<CaseCountAnalyticsByCaseTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseCountByCaseTypeRequestBuilder {
        private final Integer pageNumber;
        private String q;

        private GetCaseCountByCaseTypeRequestBuilder(Integer pageNumber) {
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetCaseCountByCaseTypeRequestBuilder
         */
        public GetCaseCountByCaseTypeRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getCaseCountByCaseType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseCountByCaseTypeCall(pageNumber, q, _callback);
        }


        /**
         * Execute getCaseCountByCaseType request
         * @return CaseCountAnalyticsByCaseTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseCountAnalyticsByCaseTypeResponse execute() throws ApiException {
            ApiResponse<CaseCountAnalyticsByCaseTypeResponse> localVarResp = getCaseCountByCaseTypeWithHttpInfo(pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseCountByCaseType request with HTTP info returned
         * @return ApiResponse&lt;CaseCountAnalyticsByCaseTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseCountAnalyticsByCaseTypeResponse> executeWithHttpInfo() throws ApiException {
            return getCaseCountByCaseTypeWithHttpInfo(pageNumber, q);
        }

        /**
         * Execute getCaseCountByCaseType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseCountAnalyticsByCaseTypeResponse> _callback) throws ApiException {
            return getCaseCountByCaseTypeAsync(pageNumber, q, _callback);
        }
    }

    /**
     * Case Count Analytics by Case Type.
     * Get Case Count Analytics by Case Type. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:\&quot;NATYfwmXwRHS279WPY\&quot;** | | **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:\&quot;NORGrPmQyLdx9NGHcT\&quot;** | | **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:\&quot;NJUDT7jCZyFNeLGpRq\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get case count grouped by case types  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetCaseCountByCaseTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseCountByCaseTypeRequestBuilder getCaseCountByCaseType(Integer pageNumber) throws IllegalArgumentException {
        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetCaseCountByCaseTypeRequestBuilder(pageNumber);
    }
}
