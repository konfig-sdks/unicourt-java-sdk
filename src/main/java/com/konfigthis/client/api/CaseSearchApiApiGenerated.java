/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CaseSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaseSearchApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaseSearchApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaseSearchApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getSearchResultsByCaseSearchIdCall(String caseSearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseSearch/{caseSearchId}"
            .replace("{" + "caseSearchId" + "}", localVarApiClient.escapeString(caseSearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSearchResultsByCaseSearchIdValidateBeforeCall(String caseSearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseSearchId' is set
        if (caseSearchId == null) {
            throw new ApiException("Missing the required parameter 'caseSearchId' when calling getSearchResultsByCaseSearchId(Async)");
        }

        return getSearchResultsByCaseSearchIdCall(caseSearchId, pageNumber, _callback);

    }


    private ApiResponse<CaseSearchResponse> getSearchResultsByCaseSearchIdWithHttpInfo(String caseSearchId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getSearchResultsByCaseSearchIdValidateBeforeCall(caseSearchId, pageNumber, null);
        Type localVarReturnType = new TypeToken<CaseSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSearchResultsByCaseSearchIdAsync(String caseSearchId, Integer pageNumber, final ApiCallback<CaseSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSearchResultsByCaseSearchIdValidateBeforeCall(caseSearchId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<CaseSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSearchResultsByCaseSearchIdRequestBuilder {
        private final String caseSearchId;
        private Integer pageNumber;

        private GetSearchResultsByCaseSearchIdRequestBuilder(String caseSearchId) {
            this.caseSearchId = caseSearchId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return GetSearchResultsByCaseSearchIdRequestBuilder
         */
        public GetSearchResultsByCaseSearchIdRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getSearchResultsByCaseSearchId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSearchResultsByCaseSearchIdCall(caseSearchId, pageNumber, _callback);
        }


        /**
         * Execute getSearchResultsByCaseSearchId request
         * @return CaseSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseSearchResponse execute() throws ApiException {
            ApiResponse<CaseSearchResponse> localVarResp = getSearchResultsByCaseSearchIdWithHttpInfo(caseSearchId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSearchResultsByCaseSearchId request with HTTP info returned
         * @return ApiResponse&lt;CaseSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseSearchResponse> executeWithHttpInfo() throws ApiException {
            return getSearchResultsByCaseSearchIdWithHttpInfo(caseSearchId, pageNumber);
        }

        /**
         * Execute getSearchResultsByCaseSearchId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseSearchResponse> _callback) throws ApiException {
            return getSearchResultsByCaseSearchIdAsync(caseSearchId, pageNumber, _callback);
        }
    }

    /**
     * Case search results for a given caseSearchId.
     * Retrieve the search results corresponding to the specified caseSearchId value. 
     * @param caseSearchId Case Search information for the given caseSearchId. (required)
     * @return GetSearchResultsByCaseSearchIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetSearchResultsByCaseSearchIdRequestBuilder getSearchResultsByCaseSearchId(String caseSearchId) throws IllegalArgumentException {
        if (caseSearchId == null) throw new IllegalArgumentException("\"caseSearchId\" is required but got null");
            if (caseSearchId != null && caseSearchId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseSearchId. Length must be greater than or equal to 18.");
            }

        return new GetSearchResultsByCaseSearchIdRequestBuilder(caseSearchId);
    }
    private okhttp3.Call searchByKeywordExpressionsCall(String q, String sort, String order, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchByKeywordExpressionsValidateBeforeCall(String q, String sort, String order, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchByKeywordExpressions(Async)");
        }

        return searchByKeywordExpressionsCall(q, sort, order, pageNumber, _callback);

    }


    private ApiResponse<CaseSearchResponse> searchByKeywordExpressionsWithHttpInfo(String q, String sort, String order, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchByKeywordExpressionsValidateBeforeCall(q, sort, order, pageNumber, null);
        Type localVarReturnType = new TypeToken<CaseSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchByKeywordExpressionsAsync(String q, String sort, String order, Integer pageNumber, final ApiCallback<CaseSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchByKeywordExpressionsValidateBeforeCall(q, sort, order, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<CaseSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchByKeywordExpressionsRequestBuilder {
        private final String q;
        private String sort;
        private String order;
        private Integer pageNumber;

        private SearchByKeywordExpressionsRequestBuilder(String q) {
            this.q = q;
        }

        /**
         * Set sort
         * @param sort Query parameter specifying how results are to be sorted. Results can be sorted according to filedDate or relevancy. (optional, default to filedDate)
         * @return SearchByKeywordExpressionsRequestBuilder
         */
        public SearchByKeywordExpressionsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Query parameter specifying whether search result are sorted in ascending or descending order. (optional, default to desc)
         * @return SearchByKeywordExpressionsRequestBuilder
         */
        public SearchByKeywordExpressionsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return SearchByKeywordExpressionsRequestBuilder
         */
        public SearchByKeywordExpressionsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchByKeywordExpressions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchByKeywordExpressionsCall(q, sort, order, pageNumber, _callback);
        }


        /**
         * Execute searchByKeywordExpressions request
         * @return CaseSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseSearchResponse execute() throws ApiException {
            ApiResponse<CaseSearchResponse> localVarResp = searchByKeywordExpressionsWithHttpInfo(q, sort, order, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchByKeywordExpressions request with HTTP info returned
         * @return ApiResponse&lt;CaseSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseSearchResponse> executeWithHttpInfo() throws ApiException {
            return searchByKeywordExpressionsWithHttpInfo(q, sort, order, pageNumber);
        }

        /**
         * Execute searchByKeywordExpressions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseSearchResponse> _callback) throws ApiException {
            return searchByKeywordExpressionsAsync(q, sort, order, pageNumber, _callback);
        }
    }

    /**
     * Case search.
     * This endpoint retrieves cases according to keyword expressions you provide. &lt;br&gt; Keyword expressions are constructed according to the rules described below. &lt;br&gt;&lt;br&gt; This API supports multiple use cases:   - Search for multiple keywords  &#x60;Google OR Facebook&#x60;.   - Search within particular attributes.   - Relational search using terms and connectors.   - And much more. ----  ## Allowed Connectors in Keyword Expressions | Connector | Description  | Example | | ------| ------|------| | **AND** |Find cases containing each of the terms joined by AND connectors.|**personal AND injury**| | **OR**  |Find cases containing any of the terms joined by OR connectors.|**order OR decision**| | **NOT** |Find cases that do not contain the specified term.|**personal AND NOT injury**.  Find cases with the word “personal” and not “injury”.| | **“[phrase]”** |Find the exact phrase placed between the quotation marks.|**\&quot;personal injury”**| | **~**  |Find cases in which the specified words appear near each other. For example, \&quot;personal injury\&quot; ~ 5 targets cases in which the word \&quot;personal\&quot; appears within 5 words of the word \&quot;injury\&quot;.|**“personal injury” ~ 5** - Find cases with “personal” within five words of “injury”. | | **( … )** |Specifies the order in which connectors are to be appliied in a keyword expression.| **personal AND (injury OR fall)** - Find cases with the word personal injury or personal fall.|  &lt;br&gt;&lt;br&gt; ## Fields and Connectors Searching | Filed | Description  | Example | | ------| ------|------| |**caseNumber** |Find cases with the specified case number (i.e., docket number).| **caseNumber:\&quot;2020-L-007212\&quot;** - Find cases whose case number matches given case number number.| |**caseName** |Find cases with the specified case title.| **caseName:\&quot;THOMAS P. CARNEY, INC. VS BEHLER JAMES Et Al\&quot;** - Find cases whose case name matches given terms.| |**Court**|Find cases in the specified court.|**(Court:(name:(New York)))** - Find cases in New York state.&lt;br&gt;| |**CaseStatus**|Find cases witih the specified case status.|**(CaseStatus:(name:Disposed))** - All disposed cases.&lt;br&gt;| |**CaseType**|Find cases of the specified case type. | **(CaseType:(name:Property))** - Cases with case type “property”.| |**Party** | Find cases involving the specified party.| **(Party:(name:Apple))** - Find cases involving Apple. | |**partyId**|Find cases involving a party with the specified partyId value.|**(Party:(partyId:\&quot;PRTYgu1ffe866484c2\&quot;))**| |**PartyRole** | Find cases in which at least one party has the specified party role. | **(Party:((PartyRole:(name:\&quot;plaintiff\&quot;))))** - Find cases with party role “plaintiff”.&lt;br&gt;&lt;br&gt; **(Party:((PartyRole:(name:defendant)) AND (AttorneyRepresentationType:(name:(Attorney represented)))))** - Find cases where a party is acting as defendant and represented by an attorney.| |**AttorneyRepresentationType**| Find cases in which at least one party has the specified attorney representation type.|**(Party:(AttorneyRepresentationType:(name:\&quot;attorney represented\&quot;)))** - Find cases where a party is represented by an attorney. | |**Attorney** | Find cases involving the specified attorney. | **(Attorney:(name:\&quot;David Boies\&quot;))** - Find cases involving the attorney David Boies. | |**AttorneyType**|Find cases involving at least one attorney of the specified attorney type.|**(Attorney:((AttorneyType:(name:\&quot;Lead Attorney\&quot;))))**| |**Judge** |Find cases involving the specified judge. | **(Judge:(name:\&quot;Posner\&quot;))** - Find cases involving Judge Posner.| |**JudgeType**|Find cases involving at least one judge of the specified judge type.|**(Judge:((JudgeType:(name:\&quot;Magistrate\&quot;))))**| |**CaseStats**|Find cases with the specified case statistics.|**(CaseStats:(partyCount:[10 TO 100]))** - Find cases involving 10 to 100 parties.&lt;br&gt;**(CaseStats:(attorneyCount:[2 TO 40]))** - Find cases involving 2 to 40 attorneys.&lt;br&gt;**(CaseStats:(judgeCount:[\\* TO 2]))** - Find cases involving up to 2 judges. &lt;br&gt;**(CaseStats:(docketEntryCount:[10 TO 100]))** - Find cases having 10 to 100 docket_entries. &lt;br&gt;**(CaseStats:(allCaseDocumentCount:[10 TO 100]))** - Find cases having 10 to 100 documents. | |**filedDate** | Find cases that were filed on the specified date or within the specified date range. | **filedDate:[2020-03-15 TO 2021-12-01]** - Find the most recently filed cases between March 15, 2020 and December 1, 2021 (inclusive). | |**lastFetchDate**| Find cases in which UniCourt last checked for updates on the specified date or within the specified date range. |**(lastFetchDate:[now-60d TO \\*\\])** - Find cases that were updated by UniCourt in the last 60 days. | |**lastFetchDateWithUpdates**|Find cases in which UniCourt last detected an update on the specified date or within the specified date range.|**(lastFetchDateWithUpdates:[now-6d TO \\*\\])** - Find cases for the changes found on court site in last 6 days.| |**participantsLastFetchDate**|Find cases in which information cocnerning participants was last updated on the specified date or within the specified date range.|**(participantsLastFetchDate:[now-6d TO \\*\\])** - Find cases where the participant&#39;s information was updated in last 6 days.| |**DocketEntry**|Find cases in which at least one docket entry contains the specified text.|**(DocketEntry:(text:(Motion to Compel Responses) AND docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00]))** - Find cases with docket text “Motion to Compel Responses” and action date between 2020-01-01 and 2020-05-01.| |**docketEntryDate**|Find cases in which at least one docket entry was made on the specified date or within the specified date range.|**(DocketEntry:(docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00])) AND (CaseStats:(allCaseDocumentCount:[0 TO 10]))** - Find cases with docket action date between 2020-01-01 and 2020-05-01 having up to 10 documents associated with it.| |**HearingDate**| Find cases with at least one hearing scheduled for the specified date or within the specified date range.|**(Hearing:(hearingDate:[now TO now+10d]))** - Find cases where hearing is scheduled in next 10 days.| |**HearingDate**| Search for cases where hearing is going to happen in 10 to 20days.|**(Hearing:(hearingDate:[now+10d TO now+20d]))** - Find cases where hearing is scheduled in next 10 to 20 days.| |**JurisdictionGeo**|Find cases in which the law of the specified state governs.|**(JurisdictionGeo:(state:\&quot;New York\&quot;))**- Find cases where Jurisdiction is New York state.| |**Party Address Exists**|Find cases with Party addresses.|**(Party:(Contact:(Address:(stateName:\\*))))**- Returns only those cases that have addresses for parties.| |**Document**|Find cases with specific document name and preview is available for the document.|**(CaseDocument:(name:\&quot;civil case cover sheet\&quot; AND isPreviewAvailable:true))**- Returns cases with document civil case cover sheet and preview is available.|  &lt;br&gt;&lt;br&gt; --- ## Party Sub Filter Examples |Example |Explanation | |---|---| |**(Party:(name:google AND (PartyRole:(name:\&quot;plaintiff\&quot;))))**|Find cases involving at least one plaintiff whose name contains the term \&quot;Google\&quot;.| |**(Party:(name:\&quot;OTELIA PEREIDA\&quot; AND (AttorneyRepresentationType:(name:\&quot;Attorney represented\&quot;)))) AND (Attorney:(name:\&quot;Law Offices of Todd M Friedman\&quot;))**|Find cases where the Party is *OTELIA PEREIDA* and is represented by the attorney *Law Offices of Todd M Friedman*.|  --- ### All query parameters supported for this API can be found in below schema section. Schema --&gt;  CaseSearchQueryObject 
     * @param q Query parameter for keyword expressions.&lt;/a&gt;  (required)
     * @return SearchByKeywordExpressionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchByKeywordExpressionsRequestBuilder searchByKeywordExpressions(String q) throws IllegalArgumentException {
        if (q == null) throw new IllegalArgumentException("\"q\" is required but got null");
            if (q != null && q.length() < 3) {
              throw new IllegalArgumentException("Invalid value for q. Length must be greater than or equal to 3.");
            }

        return new SearchByKeywordExpressionsRequestBuilder(q);
    }
}
