/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AreaOfLaw;
import com.konfigthis.client.model.AreaOfLawResponse;
import com.konfigthis.client.model.AttorneyRepresentationType;
import com.konfigthis.client.model.AttorneyRepresentationTypeResponse;
import com.konfigthis.client.model.AttorneyType;
import com.konfigthis.client.model.AttorneyTypeResponse;
import com.konfigthis.client.model.CaseClass;
import com.konfigthis.client.model.CaseClassResponse;
import com.konfigthis.client.model.CaseRelationshipType;
import com.konfigthis.client.model.CaseRelationshipTypeResponse;
import com.konfigthis.client.model.CaseStatus;
import com.konfigthis.client.model.CaseStatusGroup;
import com.konfigthis.client.model.CaseStatusGroupResponse;
import com.konfigthis.client.model.CaseStatusResponse;
import com.konfigthis.client.model.CaseType;
import com.konfigthis.client.model.CaseTypeGroup;
import com.konfigthis.client.model.CaseTypeGroupResponse;
import com.konfigthis.client.model.CaseTypeResponse;
import com.konfigthis.client.model.CauseOfAction;
import com.konfigthis.client.model.CauseOfActionAdditionalData;
import com.konfigthis.client.model.CauseOfActionAdditionalDataResponse;
import com.konfigthis.client.model.CauseOfActionGroup;
import com.konfigthis.client.model.CauseOfActionGroupResponse;
import com.konfigthis.client.model.CauseOfActionResponse;
import com.konfigthis.client.model.Charge;
import com.konfigthis.client.model.ChargeAdditionalData;
import com.konfigthis.client.model.ChargeAdditionalDataResponse;
import com.konfigthis.client.model.ChargeDegree;
import com.konfigthis.client.model.ChargeDegreeResponse;
import com.konfigthis.client.model.ChargeGroup;
import com.konfigthis.client.model.ChargeGroupResponse;
import com.konfigthis.client.model.ChargeResponse;
import com.konfigthis.client.model.ChargeSeverity;
import com.konfigthis.client.model.ChargeSeverityResponse;
import com.konfigthis.client.model.Court;
import com.konfigthis.client.model.CourtLocation;
import com.konfigthis.client.model.CourtLocationResponse;
import com.konfigthis.client.model.CourtResponse;
import com.konfigthis.client.model.CourtServiceStatus;
import com.konfigthis.client.model.CourtServiceStatusResponse;
import com.konfigthis.client.model.CourtSystem;
import com.konfigthis.client.model.CourtSystemResponse;
import com.konfigthis.client.model.CourtType;
import com.konfigthis.client.model.CourtTypeResponse;
import com.konfigthis.client.model.JudgeType;
import com.konfigthis.client.model.JudgeTypeResponse;
import com.konfigthis.client.model.JurisdictionGeo;
import com.konfigthis.client.model.JurisdictionGeoResponse;
import com.konfigthis.client.model.PartyRole;
import com.konfigthis.client.model.PartyRoleGroup;
import com.konfigthis.client.model.PartyRoleGroupResponse;
import com.konfigthis.client.model.PartyRoleResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CourtStandardsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CourtStandardsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CourtStandardsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call associatedCourtForJurisdictionGeoCall(String jurisdictionGeoId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/jurisdictionGeo/{jurisdictionGeoId}/courts"
            .replace("{" + "jurisdictionGeoId" + "}", localVarApiClient.escapeString(jurisdictionGeoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call associatedCourtForJurisdictionGeoValidateBeforeCall(String jurisdictionGeoId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jurisdictionGeoId' is set
        if (jurisdictionGeoId == null) {
            throw new ApiException("Missing the required parameter 'jurisdictionGeoId' when calling associatedCourtForJurisdictionGeo(Async)");
        }

        return associatedCourtForJurisdictionGeoCall(jurisdictionGeoId, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtResponse> associatedCourtForJurisdictionGeoWithHttpInfo(String jurisdictionGeoId, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = associatedCourtForJurisdictionGeoValidateBeforeCall(jurisdictionGeoId, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call associatedCourtForJurisdictionGeoAsync(String jurisdictionGeoId, Integer pageNumber, String sort, String order, final ApiCallback<CourtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = associatedCourtForJurisdictionGeoValidateBeforeCall(jurisdictionGeoId, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AssociatedCourtForJurisdictionGeoRequestBuilder {
        private final String jurisdictionGeoId;
        private Integer pageNumber;
        private String sort;
        private String order;

        private AssociatedCourtForJurisdictionGeoRequestBuilder(String jurisdictionGeoId) {
            this.jurisdictionGeoId = jurisdictionGeoId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Page number. - minimum: 1 - maximum: 100  (optional)
         * @return AssociatedCourtForJurisdictionGeoRequestBuilder
         */
        public AssociatedCourtForJurisdictionGeoRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort Sort field. (optional, default to name)
         * @return AssociatedCourtForJurisdictionGeoRequestBuilder
         */
        public AssociatedCourtForJurisdictionGeoRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Sort order. (optional, default to asc)
         * @return AssociatedCourtForJurisdictionGeoRequestBuilder
         */
        public AssociatedCourtForJurisdictionGeoRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for associatedCourtForJurisdictionGeo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return associatedCourtForJurisdictionGeoCall(jurisdictionGeoId, pageNumber, sort, order, _callback);
        }


        /**
         * Execute associatedCourtForJurisdictionGeo request
         * @return CourtResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtResponse execute() throws ApiException {
            ApiResponse<CourtResponse> localVarResp = associatedCourtForJurisdictionGeoWithHttpInfo(jurisdictionGeoId, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute associatedCourtForJurisdictionGeo request with HTTP info returned
         * @return ApiResponse&lt;CourtResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtResponse> executeWithHttpInfo() throws ApiException {
            return associatedCourtForJurisdictionGeoWithHttpInfo(jurisdictionGeoId, pageNumber, sort, order);
        }

        /**
         * Execute associatedCourtForJurisdictionGeo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtResponse> _callback) throws ApiException {
            return associatedCourtForJurisdictionGeoAsync(jurisdictionGeoId, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Associated Court for given Jurisdiction Geo.
     * Returns Associated Court for given Jurisdiction Geo. 
     * @param jurisdictionGeoId jurisdictionGeoId (required)
     * @return AssociatedCourtForJurisdictionGeoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public AssociatedCourtForJurisdictionGeoRequestBuilder associatedCourtForJurisdictionGeo(String jurisdictionGeoId) throws IllegalArgumentException {
        if (jurisdictionGeoId == null) throw new IllegalArgumentException("\"jurisdictionGeoId\" is required but got null");
            if (jurisdictionGeoId != null && jurisdictionGeoId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for jurisdictionGeoId. Length must be greater than or equal to 18.");
            }

        return new AssociatedCourtForJurisdictionGeoRequestBuilder(jurisdictionGeoId);
    }
    private okhttp3.Call getAdditionalChargeInfoCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeAdditionalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAdditionalChargeInfoValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getAdditionalChargeInfoCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<ChargeAdditionalDataResponse> getAdditionalChargeInfoWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getAdditionalChargeInfoValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<ChargeAdditionalDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAdditionalChargeInfoAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<ChargeAdditionalDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAdditionalChargeInfoValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ChargeAdditionalDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAdditionalChargeInfoRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetAdditionalChargeInfoRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired charge additional data.&lt;/a&gt;  (optional)
         * @return GetAdditionalChargeInfoRequestBuilder
         */
        public GetAdditionalChargeInfoRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetAdditionalChargeInfoRequestBuilder
         */
        public GetAdditionalChargeInfoRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetAdditionalChargeInfoRequestBuilder
         */
        public GetAdditionalChargeInfoRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetAdditionalChargeInfoRequestBuilder
         */
        public GetAdditionalChargeInfoRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getAdditionalChargeInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAdditionalChargeInfoCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getAdditionalChargeInfo request
         * @return ChargeAdditionalDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeAdditionalDataResponse execute() throws ApiException {
            ApiResponse<ChargeAdditionalDataResponse> localVarResp = getAdditionalChargeInfoWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAdditionalChargeInfo request with HTTP info returned
         * @return ApiResponse&lt;ChargeAdditionalDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeAdditionalDataResponse> executeWithHttpInfo() throws ApiException {
            return getAdditionalChargeInfoWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getAdditionalChargeInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeAdditionalDataResponse> _callback) throws ApiException {
            return getAdditionalChargeInfoAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Charge Additional Data Object.
     * Retrieve additional information on a charge using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeAdditionalDataQueryObject 
     * @return GetAdditionalChargeInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAdditionalChargeInfoRequestBuilder getAdditionalChargeInfo() throws IllegalArgumentException {
        return new GetAdditionalChargeInfoRequestBuilder();
    }
    private okhttp3.Call getAppealCourtsForCourtCall(String courtId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/court/{courtId}/appealCourts"
            .replace("{" + "courtId" + "}", localVarApiClient.escapeString(courtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAppealCourtsForCourtValidateBeforeCall(String courtId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling getAppealCourtsForCourt(Async)");
        }

        return getAppealCourtsForCourtCall(courtId, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtResponse> getAppealCourtsForCourtWithHttpInfo(String courtId, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getAppealCourtsForCourtValidateBeforeCall(courtId, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAppealCourtsForCourtAsync(String courtId, Integer pageNumber, String sort, String order, final ApiCallback<CourtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAppealCourtsForCourtValidateBeforeCall(courtId, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAppealCourtsForCourtRequestBuilder {
        private final String courtId;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetAppealCourtsForCourtRequestBuilder(String courtId) {
            this.courtId = courtId;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetAppealCourtsForCourtRequestBuilder
         */
        public GetAppealCourtsForCourtRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetAppealCourtsForCourtRequestBuilder
         */
        public GetAppealCourtsForCourtRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetAppealCourtsForCourtRequestBuilder
         */
        public GetAppealCourtsForCourtRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getAppealCourtsForCourt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAppealCourtsForCourtCall(courtId, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getAppealCourtsForCourt request
         * @return CourtResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtResponse execute() throws ApiException {
            ApiResponse<CourtResponse> localVarResp = getAppealCourtsForCourtWithHttpInfo(courtId, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAppealCourtsForCourt request with HTTP info returned
         * @return ApiResponse&lt;CourtResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtResponse> executeWithHttpInfo() throws ApiException {
            return getAppealCourtsForCourtWithHttpInfo(courtId, pageNumber, sort, order);
        }

        /**
         * Execute getAppealCourtsForCourt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtResponse> _callback) throws ApiException {
            return getAppealCourtsForCourtAsync(courtId, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Appeal Court Objects for given courtId.
     * Retrieve the appeals courts associated with the specified court. 
     * @param courtId The courtId value of the target court. (required)
     * @return GetAppealCourtsForCourtRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAppealCourtsForCourtRequestBuilder getAppealCourtsForCourt(String courtId) throws IllegalArgumentException {
        if (courtId == null) throw new IllegalArgumentException("\"courtId\" is required but got null");
            if (courtId != null && courtId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
            }

        return new GetAppealCourtsForCourtRequestBuilder(courtId);
    }
    private okhttp3.Call getAreaOfLawCall(String areaOfLawId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/areaOfLaw/{areaOfLawId}"
            .replace("{" + "areaOfLawId" + "}", localVarApiClient.escapeString(areaOfLawId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAreaOfLawValidateBeforeCall(String areaOfLawId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'areaOfLawId' is set
        if (areaOfLawId == null) {
            throw new ApiException("Missing the required parameter 'areaOfLawId' when calling getAreaOfLaw(Async)");
        }

        return getAreaOfLawCall(areaOfLawId, _callback);

    }


    private ApiResponse<AreaOfLaw> getAreaOfLawWithHttpInfo(String areaOfLawId) throws ApiException {
        okhttp3.Call localVarCall = getAreaOfLawValidateBeforeCall(areaOfLawId, null);
        Type localVarReturnType = new TypeToken<AreaOfLaw>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAreaOfLawAsync(String areaOfLawId, final ApiCallback<AreaOfLaw> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAreaOfLawValidateBeforeCall(areaOfLawId, _callback);
        Type localVarReturnType = new TypeToken<AreaOfLaw>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAreaOfLawRequestBuilder {
        private final String areaOfLawId;

        private GetAreaOfLawRequestBuilder(String areaOfLawId) {
            this.areaOfLawId = areaOfLawId;
        }

        /**
         * Build call for getAreaOfLaw
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAreaOfLawCall(areaOfLawId, _callback);
        }


        /**
         * Execute getAreaOfLaw request
         * @return AreaOfLaw
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AreaOfLaw execute() throws ApiException {
            ApiResponse<AreaOfLaw> localVarResp = getAreaOfLawWithHttpInfo(areaOfLawId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAreaOfLaw request with HTTP info returned
         * @return ApiResponse&lt;AreaOfLaw&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AreaOfLaw> executeWithHttpInfo() throws ApiException {
            return getAreaOfLawWithHttpInfo(areaOfLawId);
        }

        /**
         * Execute getAreaOfLaw request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AreaOfLaw> _callback) throws ApiException {
            return getAreaOfLawAsync(areaOfLawId, _callback);
        }
    }

    /**
     * AreaOfLaw Object for the given AreaOfLaw Id.
     * Retrieve the specified area of law. 
     * @param areaOfLawId The areaOfLawId value of the desired area of law. (required)
     * @return GetAreaOfLawRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAreaOfLawRequestBuilder getAreaOfLaw(String areaOfLawId) throws IllegalArgumentException {
        if (areaOfLawId == null) throw new IllegalArgumentException("\"areaOfLawId\" is required but got null");
            if (areaOfLawId != null && areaOfLawId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for areaOfLawId. Length must be greater than or equal to 18.");
            }

        return new GetAreaOfLawRequestBuilder(areaOfLawId);
    }
    private okhttp3.Call getAttorneyRepTypeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/attorneyRepresentationType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttorneyRepTypeValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getAttorneyRepTypeCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<AttorneyRepresentationTypeResponse> getAttorneyRepTypeWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getAttorneyRepTypeValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<AttorneyRepresentationTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttorneyRepTypeAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<AttorneyRepresentationTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttorneyRepTypeValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<AttorneyRepresentationTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttorneyRepTypeRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetAttorneyRepTypeRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the attorney representation type.&lt;/a&gt;  (optional)
         * @return GetAttorneyRepTypeRequestBuilder
         */
        public GetAttorneyRepTypeRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetAttorneyRepTypeRequestBuilder
         */
        public GetAttorneyRepTypeRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetAttorneyRepTypeRequestBuilder
         */
        public GetAttorneyRepTypeRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetAttorneyRepTypeRequestBuilder
         */
        public GetAttorneyRepTypeRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getAttorneyRepType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttorneyRepTypeCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getAttorneyRepType request
         * @return AttorneyRepresentationTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AttorneyRepresentationTypeResponse execute() throws ApiException {
            ApiResponse<AttorneyRepresentationTypeResponse> localVarResp = getAttorneyRepTypeWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttorneyRepType request with HTTP info returned
         * @return ApiResponse&lt;AttorneyRepresentationTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttorneyRepresentationTypeResponse> executeWithHttpInfo() throws ApiException {
            return getAttorneyRepTypeWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getAttorneyRepType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttorneyRepresentationTypeResponse> _callback) throws ApiException {
            return getAttorneyRepTypeAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Attorney Representation Type Object.
     * Retrieve an attorney representation type using a keyword expression. Keyword expressions should be constructed according to the rules given above. ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --&gt; AttorneyRepresentationTypeQueryObject 
     * @return GetAttorneyRepTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAttorneyRepTypeRequestBuilder getAttorneyRepType() throws IllegalArgumentException {
        return new GetAttorneyRepTypeRequestBuilder();
    }
    private okhttp3.Call getAttorneyRepType_0Call(String attorneyRepresentationTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}"
            .replace("{" + "attorneyRepresentationTypeId" + "}", localVarApiClient.escapeString(attorneyRepresentationTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttorneyRepType_0ValidateBeforeCall(String attorneyRepresentationTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attorneyRepresentationTypeId' is set
        if (attorneyRepresentationTypeId == null) {
            throw new ApiException("Missing the required parameter 'attorneyRepresentationTypeId' when calling getAttorneyRepType_0(Async)");
        }

        return getAttorneyRepType_0Call(attorneyRepresentationTypeId, _callback);

    }


    private ApiResponse<AttorneyRepresentationType> getAttorneyRepType_0WithHttpInfo(String attorneyRepresentationTypeId) throws ApiException {
        okhttp3.Call localVarCall = getAttorneyRepType_0ValidateBeforeCall(attorneyRepresentationTypeId, null);
        Type localVarReturnType = new TypeToken<AttorneyRepresentationType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttorneyRepType_0Async(String attorneyRepresentationTypeId, final ApiCallback<AttorneyRepresentationType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttorneyRepType_0ValidateBeforeCall(attorneyRepresentationTypeId, _callback);
        Type localVarReturnType = new TypeToken<AttorneyRepresentationType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttorneyRepType0RequestBuilder {
        private final String attorneyRepresentationTypeId;

        private GetAttorneyRepType0RequestBuilder(String attorneyRepresentationTypeId) {
            this.attorneyRepresentationTypeId = attorneyRepresentationTypeId;
        }

        /**
         * Build call for getAttorneyRepType_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttorneyRepType_0Call(attorneyRepresentationTypeId, _callback);
        }


        /**
         * Execute getAttorneyRepType_0 request
         * @return AttorneyRepresentationType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AttorneyRepresentationType execute() throws ApiException {
            ApiResponse<AttorneyRepresentationType> localVarResp = getAttorneyRepType_0WithHttpInfo(attorneyRepresentationTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttorneyRepType_0 request with HTTP info returned
         * @return ApiResponse&lt;AttorneyRepresentationType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttorneyRepresentationType> executeWithHttpInfo() throws ApiException {
            return getAttorneyRepType_0WithHttpInfo(attorneyRepresentationTypeId);
        }

        /**
         * Execute getAttorneyRepType_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttorneyRepresentationType> _callback) throws ApiException {
            return getAttorneyRepType_0Async(attorneyRepresentationTypeId, _callback);
        }
    }

    /**
     * Attorney Representation Type Object for the given attorneyRepresentationTypeId.
     * Retrieve the specified attorney representation type. 
     * @param attorneyRepresentationTypeId The attorneyRepresentationTypeId value of the desired attorney representation type. (required)
     * @return GetAttorneyRepType0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAttorneyRepType0RequestBuilder getAttorneyRepType_0(String attorneyRepresentationTypeId) throws IllegalArgumentException {
        if (attorneyRepresentationTypeId == null) throw new IllegalArgumentException("\"attorneyRepresentationTypeId\" is required but got null");
            if (attorneyRepresentationTypeId != null && attorneyRepresentationTypeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for attorneyRepresentationTypeId. Length must be greater than or equal to 18.");
            }

        return new GetAttorneyRepType0RequestBuilder(attorneyRepresentationTypeId);
    }
    private okhttp3.Call getAttorneyTypeObjectCall(String attorneyTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/attorneyType/{attorneyTypeId}"
            .replace("{" + "attorneyTypeId" + "}", localVarApiClient.escapeString(attorneyTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttorneyTypeObjectValidateBeforeCall(String attorneyTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attorneyTypeId' is set
        if (attorneyTypeId == null) {
            throw new ApiException("Missing the required parameter 'attorneyTypeId' when calling getAttorneyTypeObject(Async)");
        }

        return getAttorneyTypeObjectCall(attorneyTypeId, _callback);

    }


    private ApiResponse<AttorneyType> getAttorneyTypeObjectWithHttpInfo(String attorneyTypeId) throws ApiException {
        okhttp3.Call localVarCall = getAttorneyTypeObjectValidateBeforeCall(attorneyTypeId, null);
        Type localVarReturnType = new TypeToken<AttorneyType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttorneyTypeObjectAsync(String attorneyTypeId, final ApiCallback<AttorneyType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttorneyTypeObjectValidateBeforeCall(attorneyTypeId, _callback);
        Type localVarReturnType = new TypeToken<AttorneyType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttorneyTypeObjectRequestBuilder {
        private final String attorneyTypeId;

        private GetAttorneyTypeObjectRequestBuilder(String attorneyTypeId) {
            this.attorneyTypeId = attorneyTypeId;
        }

        /**
         * Build call for getAttorneyTypeObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttorneyTypeObjectCall(attorneyTypeId, _callback);
        }


        /**
         * Execute getAttorneyTypeObject request
         * @return AttorneyType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AttorneyType execute() throws ApiException {
            ApiResponse<AttorneyType> localVarResp = getAttorneyTypeObjectWithHttpInfo(attorneyTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttorneyTypeObject request with HTTP info returned
         * @return ApiResponse&lt;AttorneyType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttorneyType> executeWithHttpInfo() throws ApiException {
            return getAttorneyTypeObjectWithHttpInfo(attorneyTypeId);
        }

        /**
         * Execute getAttorneyTypeObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttorneyType> _callback) throws ApiException {
            return getAttorneyTypeObjectAsync(attorneyTypeId, _callback);
        }
    }

    /**
     * Attorney Type Object for given Attorney Type Id.
     * Retrieve a specified attorney type object. 
     * @param attorneyTypeId The attorneyTypeId value of the desired attorney type. (required)
     * @return GetAttorneyTypeObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAttorneyTypeObjectRequestBuilder getAttorneyTypeObject(String attorneyTypeId) throws IllegalArgumentException {
        if (attorneyTypeId == null) throw new IllegalArgumentException("\"attorneyTypeId\" is required but got null");
            if (attorneyTypeId != null && attorneyTypeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for attorneyTypeId. Length must be greater than or equal to 18.");
            }

        return new GetAttorneyTypeObjectRequestBuilder(attorneyTypeId);
    }
    private okhttp3.Call getAttorneyTypeUsingKeywordExpressionCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/attorneyType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttorneyTypeUsingKeywordExpressionValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getAttorneyTypeUsingKeywordExpressionCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<AttorneyTypeResponse> getAttorneyTypeUsingKeywordExpressionWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getAttorneyTypeUsingKeywordExpressionValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<AttorneyTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttorneyTypeUsingKeywordExpressionAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<AttorneyTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttorneyTypeUsingKeywordExpressionValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<AttorneyTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttorneyTypeUsingKeywordExpressionRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetAttorneyTypeUsingKeywordExpressionRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the attorney type.&lt;/a&gt;  (optional)
         * @return GetAttorneyTypeUsingKeywordExpressionRequestBuilder
         */
        public GetAttorneyTypeUsingKeywordExpressionRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetAttorneyTypeUsingKeywordExpressionRequestBuilder
         */
        public GetAttorneyTypeUsingKeywordExpressionRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetAttorneyTypeUsingKeywordExpressionRequestBuilder
         */
        public GetAttorneyTypeUsingKeywordExpressionRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetAttorneyTypeUsingKeywordExpressionRequestBuilder
         */
        public GetAttorneyTypeUsingKeywordExpressionRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getAttorneyTypeUsingKeywordExpression
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttorneyTypeUsingKeywordExpressionCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getAttorneyTypeUsingKeywordExpression request
         * @return AttorneyTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AttorneyTypeResponse execute() throws ApiException {
            ApiResponse<AttorneyTypeResponse> localVarResp = getAttorneyTypeUsingKeywordExpressionWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttorneyTypeUsingKeywordExpression request with HTTP info returned
         * @return ApiResponse&lt;AttorneyTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttorneyTypeResponse> executeWithHttpInfo() throws ApiException {
            return getAttorneyTypeUsingKeywordExpressionWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getAttorneyTypeUsingKeywordExpression request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttorneyTypeResponse> _callback) throws ApiException {
            return getAttorneyTypeUsingKeywordExpressionAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Attorney Type Object.
     * Retrieve an attorney type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --&gt; AttorneyTypeQueryObject 
     * @return GetAttorneyTypeUsingKeywordExpressionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetAttorneyTypeUsingKeywordExpressionRequestBuilder getAttorneyTypeUsingKeywordExpression() throws IllegalArgumentException {
        return new GetAttorneyTypeUsingKeywordExpressionRequestBuilder();
    }
    private okhttp3.Call getCaseClassByIdCall(String caseClassId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseClass/{caseClassId}"
            .replace("{" + "caseClassId" + "}", localVarApiClient.escapeString(caseClassId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseClassByIdValidateBeforeCall(String caseClassId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseClassId' is set
        if (caseClassId == null) {
            throw new ApiException("Missing the required parameter 'caseClassId' when calling getCaseClassById(Async)");
        }

        return getCaseClassByIdCall(caseClassId, _callback);

    }


    private ApiResponse<CaseClass> getCaseClassByIdWithHttpInfo(String caseClassId) throws ApiException {
        okhttp3.Call localVarCall = getCaseClassByIdValidateBeforeCall(caseClassId, null);
        Type localVarReturnType = new TypeToken<CaseClass>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseClassByIdAsync(String caseClassId, final ApiCallback<CaseClass> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseClassByIdValidateBeforeCall(caseClassId, _callback);
        Type localVarReturnType = new TypeToken<CaseClass>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseClassByIdRequestBuilder {
        private final String caseClassId;

        private GetCaseClassByIdRequestBuilder(String caseClassId) {
            this.caseClassId = caseClassId;
        }

        /**
         * Build call for getCaseClassById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseClassByIdCall(caseClassId, _callback);
        }


        /**
         * Execute getCaseClassById request
         * @return CaseClass
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseClass execute() throws ApiException {
            ApiResponse<CaseClass> localVarResp = getCaseClassByIdWithHttpInfo(caseClassId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseClassById request with HTTP info returned
         * @return ApiResponse&lt;CaseClass&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseClass> executeWithHttpInfo() throws ApiException {
            return getCaseClassByIdWithHttpInfo(caseClassId);
        }

        /**
         * Execute getCaseClassById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseClass> _callback) throws ApiException {
            return getCaseClassByIdAsync(caseClassId, _callback);
        }
    }

    /**
     * Case Class Object for the given Case Class Id.
     * Retrieve the specified case class. 
     * @param caseClassId The caseClassId value of the desired case class. (required)
     * @return GetCaseClassByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseClassByIdRequestBuilder getCaseClassById(String caseClassId) throws IllegalArgumentException {
        if (caseClassId == null) throw new IllegalArgumentException("\"caseClassId\" is required but got null");
            if (caseClassId != null && caseClassId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseClassId. Length must be greater than or equal to 18.");
            }

        return new GetCaseClassByIdRequestBuilder(caseClassId);
    }
    private okhttp3.Call getCaseClassByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseClass";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseClassByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCaseClassByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CaseClassResponse> getCaseClassByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCaseClassByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CaseClassResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseClassByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CaseClassResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseClassByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CaseClassResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseClassByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCaseClassByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired case class.&lt;/a&gt;  (optional)
         * @return GetCaseClassByKeywordRequestBuilder
         */
        public GetCaseClassByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCaseClassByKeywordRequestBuilder
         */
        public GetCaseClassByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCaseClassByKeywordRequestBuilder
         */
        public GetCaseClassByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCaseClassByKeywordRequestBuilder
         */
        public GetCaseClassByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCaseClassByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseClassByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCaseClassByKeyword request
         * @return CaseClassResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseClassResponse execute() throws ApiException {
            ApiResponse<CaseClassResponse> localVarResp = getCaseClassByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseClassByKeyword request with HTTP info returned
         * @return ApiResponse&lt;CaseClassResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseClassResponse> executeWithHttpInfo() throws ApiException {
            return getCaseClassByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCaseClassByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseClassResponse> _callback) throws ApiException {
            return getCaseClassByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Case Class Object.
     * Retrieve one or more case classes using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseClassQueryObject 
     * @return GetCaseClassByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseClassByKeywordRequestBuilder getCaseClassByKeyword() throws IllegalArgumentException {
        return new GetCaseClassByKeywordRequestBuilder();
    }
    private okhttp3.Call getCaseRelationshipTypeByIdCall(String caseRelationshipTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseRelationshipType/{caseRelationshipTypeId}"
            .replace("{" + "caseRelationshipTypeId" + "}", localVarApiClient.escapeString(caseRelationshipTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseRelationshipTypeByIdValidateBeforeCall(String caseRelationshipTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseRelationshipTypeId' is set
        if (caseRelationshipTypeId == null) {
            throw new ApiException("Missing the required parameter 'caseRelationshipTypeId' when calling getCaseRelationshipTypeById(Async)");
        }

        return getCaseRelationshipTypeByIdCall(caseRelationshipTypeId, _callback);

    }


    private ApiResponse<CaseRelationshipType> getCaseRelationshipTypeByIdWithHttpInfo(String caseRelationshipTypeId) throws ApiException {
        okhttp3.Call localVarCall = getCaseRelationshipTypeByIdValidateBeforeCall(caseRelationshipTypeId, null);
        Type localVarReturnType = new TypeToken<CaseRelationshipType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseRelationshipTypeByIdAsync(String caseRelationshipTypeId, final ApiCallback<CaseRelationshipType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseRelationshipTypeByIdValidateBeforeCall(caseRelationshipTypeId, _callback);
        Type localVarReturnType = new TypeToken<CaseRelationshipType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseRelationshipTypeByIdRequestBuilder {
        private final String caseRelationshipTypeId;

        private GetCaseRelationshipTypeByIdRequestBuilder(String caseRelationshipTypeId) {
            this.caseRelationshipTypeId = caseRelationshipTypeId;
        }

        /**
         * Build call for getCaseRelationshipTypeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseRelationshipTypeByIdCall(caseRelationshipTypeId, _callback);
        }


        /**
         * Execute getCaseRelationshipTypeById request
         * @return CaseRelationshipType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseRelationshipType execute() throws ApiException {
            ApiResponse<CaseRelationshipType> localVarResp = getCaseRelationshipTypeByIdWithHttpInfo(caseRelationshipTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseRelationshipTypeById request with HTTP info returned
         * @return ApiResponse&lt;CaseRelationshipType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseRelationshipType> executeWithHttpInfo() throws ApiException {
            return getCaseRelationshipTypeByIdWithHttpInfo(caseRelationshipTypeId);
        }

        /**
         * Execute getCaseRelationshipTypeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseRelationshipType> _callback) throws ApiException {
            return getCaseRelationshipTypeByIdAsync(caseRelationshipTypeId, _callback);
        }
    }

    /**
     * Case Relationship Type Object for the given caseRelationshipTypeId.
     * Retrieve the specified case relationship type. 
     * @param caseRelationshipTypeId The caseRelationshipTypeId value of the desired case relationship type. (required)
     * @return GetCaseRelationshipTypeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseRelationshipTypeByIdRequestBuilder getCaseRelationshipTypeById(String caseRelationshipTypeId) throws IllegalArgumentException {
        if (caseRelationshipTypeId == null) throw new IllegalArgumentException("\"caseRelationshipTypeId\" is required but got null");
            if (caseRelationshipTypeId != null && caseRelationshipTypeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseRelationshipTypeId. Length must be greater than or equal to 18.");
            }

        return new GetCaseRelationshipTypeByIdRequestBuilder(caseRelationshipTypeId);
    }
    private okhttp3.Call getCaseRelationshipTypesCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseRelationshipType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseRelationshipTypesValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCaseRelationshipTypesCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CaseRelationshipTypeResponse> getCaseRelationshipTypesWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCaseRelationshipTypesValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CaseRelationshipTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseRelationshipTypesAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CaseRelationshipTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseRelationshipTypesValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CaseRelationshipTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseRelationshipTypesRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCaseRelationshipTypesRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the case relationship type.&lt;/a&gt;  (optional)
         * @return GetCaseRelationshipTypesRequestBuilder
         */
        public GetCaseRelationshipTypesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCaseRelationshipTypesRequestBuilder
         */
        public GetCaseRelationshipTypesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCaseRelationshipTypesRequestBuilder
         */
        public GetCaseRelationshipTypesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCaseRelationshipTypesRequestBuilder
         */
        public GetCaseRelationshipTypesRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCaseRelationshipTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseRelationshipTypesCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCaseRelationshipTypes request
         * @return CaseRelationshipTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseRelationshipTypeResponse execute() throws ApiException {
            ApiResponse<CaseRelationshipTypeResponse> localVarResp = getCaseRelationshipTypesWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseRelationshipTypes request with HTTP info returned
         * @return ApiResponse&lt;CaseRelationshipTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseRelationshipTypeResponse> executeWithHttpInfo() throws ApiException {
            return getCaseRelationshipTypesWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCaseRelationshipTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseRelationshipTypeResponse> _callback) throws ApiException {
            return getCaseRelationshipTypesAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Case Relationship Type Object.
     * Retrieve an case relationship type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseRelationshipTypeQueryObject 
     * @return GetCaseRelationshipTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseRelationshipTypesRequestBuilder getCaseRelationshipTypes() throws IllegalArgumentException {
        return new GetCaseRelationshipTypesRequestBuilder();
    }
    private okhttp3.Call getCaseStatusByIdCall(String caseStatusId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseStatus/{caseStatusId}"
            .replace("{" + "caseStatusId" + "}", localVarApiClient.escapeString(caseStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseStatusByIdValidateBeforeCall(String caseStatusId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseStatusId' is set
        if (caseStatusId == null) {
            throw new ApiException("Missing the required parameter 'caseStatusId' when calling getCaseStatusById(Async)");
        }

        return getCaseStatusByIdCall(caseStatusId, _callback);

    }


    private ApiResponse<CaseStatus> getCaseStatusByIdWithHttpInfo(String caseStatusId) throws ApiException {
        okhttp3.Call localVarCall = getCaseStatusByIdValidateBeforeCall(caseStatusId, null);
        Type localVarReturnType = new TypeToken<CaseStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseStatusByIdAsync(String caseStatusId, final ApiCallback<CaseStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseStatusByIdValidateBeforeCall(caseStatusId, _callback);
        Type localVarReturnType = new TypeToken<CaseStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseStatusByIdRequestBuilder {
        private final String caseStatusId;

        private GetCaseStatusByIdRequestBuilder(String caseStatusId) {
            this.caseStatusId = caseStatusId;
        }

        /**
         * Build call for getCaseStatusById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseStatusByIdCall(caseStatusId, _callback);
        }


        /**
         * Execute getCaseStatusById request
         * @return CaseStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseStatus execute() throws ApiException {
            ApiResponse<CaseStatus> localVarResp = getCaseStatusByIdWithHttpInfo(caseStatusId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseStatusById request with HTTP info returned
         * @return ApiResponse&lt;CaseStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseStatus> executeWithHttpInfo() throws ApiException {
            return getCaseStatusByIdWithHttpInfo(caseStatusId);
        }

        /**
         * Execute getCaseStatusById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseStatus> _callback) throws ApiException {
            return getCaseStatusByIdAsync(caseStatusId, _callback);
        }
    }

    /**
     * Returns the caseStatus information for the given caseStatusId.
     * Retrieve the specified case status. 
     * @param caseStatusId The caseStatusId value of the desired case status. (required)
     * @return GetCaseStatusByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseStatusByIdRequestBuilder getCaseStatusById(String caseStatusId) throws IllegalArgumentException {
        if (caseStatusId == null) throw new IllegalArgumentException("\"caseStatusId\" is required but got null");
            if (caseStatusId != null && caseStatusId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseStatusId. Length must be greater than or equal to 18.");
            }

        return new GetCaseStatusByIdRequestBuilder(caseStatusId);
    }
    private okhttp3.Call getCaseStatusByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseStatusByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCaseStatusByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CaseStatusResponse> getCaseStatusByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCaseStatusByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CaseStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseStatusByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CaseStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseStatusByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CaseStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseStatusByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCaseStatusByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired case status.&lt;/a&gt;  (optional)
         * @return GetCaseStatusByKeywordRequestBuilder
         */
        public GetCaseStatusByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCaseStatusByKeywordRequestBuilder
         */
        public GetCaseStatusByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCaseStatusByKeywordRequestBuilder
         */
        public GetCaseStatusByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCaseStatusByKeywordRequestBuilder
         */
        public GetCaseStatusByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCaseStatusByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseStatusByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCaseStatusByKeyword request
         * @return CaseStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseStatusResponse execute() throws ApiException {
            ApiResponse<CaseStatusResponse> localVarResp = getCaseStatusByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseStatusByKeyword request with HTTP info returned
         * @return ApiResponse&lt;CaseStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseStatusResponse> executeWithHttpInfo() throws ApiException {
            return getCaseStatusByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCaseStatusByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseStatusResponse> _callback) throws ApiException {
            return getCaseStatusByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Case Status Object.
     * Retrieve a case status using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below Schema section. Schema --&gt; CaseStatusQueryObject 
     * @return GetCaseStatusByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseStatusByKeywordRequestBuilder getCaseStatusByKeyword() throws IllegalArgumentException {
        return new GetCaseStatusByKeywordRequestBuilder();
    }
    private okhttp3.Call getCaseStatusGroupCall(String caseStatusGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseStatusGroup/{caseStatusGroupId}"
            .replace("{" + "caseStatusGroupId" + "}", localVarApiClient.escapeString(caseStatusGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseStatusGroupValidateBeforeCall(String caseStatusGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseStatusGroupId' is set
        if (caseStatusGroupId == null) {
            throw new ApiException("Missing the required parameter 'caseStatusGroupId' when calling getCaseStatusGroup(Async)");
        }

        return getCaseStatusGroupCall(caseStatusGroupId, _callback);

    }


    private ApiResponse<CaseStatusGroup> getCaseStatusGroupWithHttpInfo(String caseStatusGroupId) throws ApiException {
        okhttp3.Call localVarCall = getCaseStatusGroupValidateBeforeCall(caseStatusGroupId, null);
        Type localVarReturnType = new TypeToken<CaseStatusGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseStatusGroupAsync(String caseStatusGroupId, final ApiCallback<CaseStatusGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseStatusGroupValidateBeforeCall(caseStatusGroupId, _callback);
        Type localVarReturnType = new TypeToken<CaseStatusGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseStatusGroupRequestBuilder {
        private final String caseStatusGroupId;

        private GetCaseStatusGroupRequestBuilder(String caseStatusGroupId) {
            this.caseStatusGroupId = caseStatusGroupId;
        }

        /**
         * Build call for getCaseStatusGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseStatusGroupCall(caseStatusGroupId, _callback);
        }


        /**
         * Execute getCaseStatusGroup request
         * @return CaseStatusGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseStatusGroup execute() throws ApiException {
            ApiResponse<CaseStatusGroup> localVarResp = getCaseStatusGroupWithHttpInfo(caseStatusGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseStatusGroup request with HTTP info returned
         * @return ApiResponse&lt;CaseStatusGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseStatusGroup> executeWithHttpInfo() throws ApiException {
            return getCaseStatusGroupWithHttpInfo(caseStatusGroupId);
        }

        /**
         * Execute getCaseStatusGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseStatusGroup> _callback) throws ApiException {
            return getCaseStatusGroupAsync(caseStatusGroupId, _callback);
        }
    }

    /**
     * Returns the caseStatusGroup information for the given caseStatusGroupId.
     * Retrieve the specified case status group. 
     * @param caseStatusGroupId The caseStatusGroupId value of the desired case status group. (required)
     * @return GetCaseStatusGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseStatusGroupRequestBuilder getCaseStatusGroup(String caseStatusGroupId) throws IllegalArgumentException {
        if (caseStatusGroupId == null) throw new IllegalArgumentException("\"caseStatusGroupId\" is required but got null");
            if (caseStatusGroupId != null && caseStatusGroupId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseStatusGroupId. Length must be greater than or equal to 18.");
            }

        return new GetCaseStatusGroupRequestBuilder(caseStatusGroupId);
    }
    private okhttp3.Call getCaseStatusGroupUsingKeywordExpressionCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseStatusGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseStatusGroupUsingKeywordExpressionValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCaseStatusGroupUsingKeywordExpressionCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CaseStatusGroupResponse> getCaseStatusGroupUsingKeywordExpressionWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCaseStatusGroupUsingKeywordExpressionValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CaseStatusGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseStatusGroupUsingKeywordExpressionAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CaseStatusGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseStatusGroupUsingKeywordExpressionValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CaseStatusGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseStatusGroupUsingKeywordExpressionRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCaseStatusGroupUsingKeywordExpressionRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired case status group.&lt;/a&gt;  (optional)
         * @return GetCaseStatusGroupUsingKeywordExpressionRequestBuilder
         */
        public GetCaseStatusGroupUsingKeywordExpressionRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCaseStatusGroupUsingKeywordExpressionRequestBuilder
         */
        public GetCaseStatusGroupUsingKeywordExpressionRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCaseStatusGroupUsingKeywordExpressionRequestBuilder
         */
        public GetCaseStatusGroupUsingKeywordExpressionRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCaseStatusGroupUsingKeywordExpressionRequestBuilder
         */
        public GetCaseStatusGroupUsingKeywordExpressionRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCaseStatusGroupUsingKeywordExpression
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseStatusGroupUsingKeywordExpressionCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCaseStatusGroupUsingKeywordExpression request
         * @return CaseStatusGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseStatusGroupResponse execute() throws ApiException {
            ApiResponse<CaseStatusGroupResponse> localVarResp = getCaseStatusGroupUsingKeywordExpressionWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseStatusGroupUsingKeywordExpression request with HTTP info returned
         * @return ApiResponse&lt;CaseStatusGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseStatusGroupResponse> executeWithHttpInfo() throws ApiException {
            return getCaseStatusGroupUsingKeywordExpressionWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCaseStatusGroupUsingKeywordExpression request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseStatusGroupResponse> _callback) throws ApiException {
            return getCaseStatusGroupUsingKeywordExpressionAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Case Status Group Object.
     * Retrieve a case status group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseStatusGroupQueryObject 
     * @return GetCaseStatusGroupUsingKeywordExpressionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseStatusGroupUsingKeywordExpressionRequestBuilder getCaseStatusGroupUsingKeywordExpression() throws IllegalArgumentException {
        return new GetCaseStatusGroupUsingKeywordExpressionRequestBuilder();
    }
    private okhttp3.Call getCaseTypeCall(String caseTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseType/{caseTypeId}"
            .replace("{" + "caseTypeId" + "}", localVarApiClient.escapeString(caseTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseTypeValidateBeforeCall(String caseTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseTypeId' is set
        if (caseTypeId == null) {
            throw new ApiException("Missing the required parameter 'caseTypeId' when calling getCaseType(Async)");
        }

        return getCaseTypeCall(caseTypeId, _callback);

    }


    private ApiResponse<CaseType> getCaseTypeWithHttpInfo(String caseTypeId) throws ApiException {
        okhttp3.Call localVarCall = getCaseTypeValidateBeforeCall(caseTypeId, null);
        Type localVarReturnType = new TypeToken<CaseType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseTypeAsync(String caseTypeId, final ApiCallback<CaseType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseTypeValidateBeforeCall(caseTypeId, _callback);
        Type localVarReturnType = new TypeToken<CaseType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseTypeRequestBuilder {
        private final String caseTypeId;

        private GetCaseTypeRequestBuilder(String caseTypeId) {
            this.caseTypeId = caseTypeId;
        }

        /**
         * Build call for getCaseType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseTypeCall(caseTypeId, _callback);
        }


        /**
         * Execute getCaseType request
         * @return CaseType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseType execute() throws ApiException {
            ApiResponse<CaseType> localVarResp = getCaseTypeWithHttpInfo(caseTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseType request with HTTP info returned
         * @return ApiResponse&lt;CaseType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseType> executeWithHttpInfo() throws ApiException {
            return getCaseTypeWithHttpInfo(caseTypeId);
        }

        /**
         * Execute getCaseType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseType> _callback) throws ApiException {
            return getCaseTypeAsync(caseTypeId, _callback);
        }
    }

    /**
     * CaseType Object for given Case Type Id.
     * Retrieve the specified case type. 
     * @param caseTypeId The caseTypeId value of the desired case type. (required)
     * @return GetCaseTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseTypeRequestBuilder getCaseType(String caseTypeId) throws IllegalArgumentException {
        if (caseTypeId == null) throw new IllegalArgumentException("\"caseTypeId\" is required but got null");
            if (caseTypeId != null && caseTypeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseTypeId. Length must be greater than or equal to 18.");
            }

        return new GetCaseTypeRequestBuilder(caseTypeId);
    }
    private okhttp3.Call getCaseTypeGroupCall(String caseTypeGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseTypeGroup/{caseTypeGroupId}"
            .replace("{" + "caseTypeGroupId" + "}", localVarApiClient.escapeString(caseTypeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseTypeGroupValidateBeforeCall(String caseTypeGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseTypeGroupId' is set
        if (caseTypeGroupId == null) {
            throw new ApiException("Missing the required parameter 'caseTypeGroupId' when calling getCaseTypeGroup(Async)");
        }

        return getCaseTypeGroupCall(caseTypeGroupId, _callback);

    }


    private ApiResponse<CaseTypeGroup> getCaseTypeGroupWithHttpInfo(String caseTypeGroupId) throws ApiException {
        okhttp3.Call localVarCall = getCaseTypeGroupValidateBeforeCall(caseTypeGroupId, null);
        Type localVarReturnType = new TypeToken<CaseTypeGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseTypeGroupAsync(String caseTypeGroupId, final ApiCallback<CaseTypeGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseTypeGroupValidateBeforeCall(caseTypeGroupId, _callback);
        Type localVarReturnType = new TypeToken<CaseTypeGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseTypeGroupRequestBuilder {
        private final String caseTypeGroupId;

        private GetCaseTypeGroupRequestBuilder(String caseTypeGroupId) {
            this.caseTypeGroupId = caseTypeGroupId;
        }

        /**
         * Build call for getCaseTypeGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseTypeGroupCall(caseTypeGroupId, _callback);
        }


        /**
         * Execute getCaseTypeGroup request
         * @return CaseTypeGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseTypeGroup execute() throws ApiException {
            ApiResponse<CaseTypeGroup> localVarResp = getCaseTypeGroupWithHttpInfo(caseTypeGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseTypeGroup request with HTTP info returned
         * @return ApiResponse&lt;CaseTypeGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseTypeGroup> executeWithHttpInfo() throws ApiException {
            return getCaseTypeGroupWithHttpInfo(caseTypeGroupId);
        }

        /**
         * Execute getCaseTypeGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseTypeGroup> _callback) throws ApiException {
            return getCaseTypeGroupAsync(caseTypeGroupId, _callback);
        }
    }

    /**
     * CaseType Group for the given CaseType Group Id.
     * Retrieve the specified case type group. 
     * @param caseTypeGroupId caseTypeGroupId (required)
     * @return GetCaseTypeGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseTypeGroupRequestBuilder getCaseTypeGroup(String caseTypeGroupId) throws IllegalArgumentException {
        if (caseTypeGroupId == null) throw new IllegalArgumentException("\"caseTypeGroupId\" is required but got null");
            if (caseTypeGroupId != null && caseTypeGroupId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseTypeGroupId. Length must be greater than or equal to 18.");
            }

        return new GetCaseTypeGroupRequestBuilder(caseTypeGroupId);
    }
    private okhttp3.Call getCaseTypesByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseTypesByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCaseTypesByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CaseTypeResponse> getCaseTypesByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCaseTypesByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CaseTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseTypesByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CaseTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseTypesByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CaseTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseTypesByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCaseTypesByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt;  (optional)
         * @return GetCaseTypesByKeywordRequestBuilder
         */
        public GetCaseTypesByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCaseTypesByKeywordRequestBuilder
         */
        public GetCaseTypesByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCaseTypesByKeywordRequestBuilder
         */
        public GetCaseTypesByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCaseTypesByKeywordRequestBuilder
         */
        public GetCaseTypesByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCaseTypesByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseTypesByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCaseTypesByKeyword request
         * @return CaseTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseTypeResponse execute() throws ApiException {
            ApiResponse<CaseTypeResponse> localVarResp = getCaseTypesByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseTypesByKeyword request with HTTP info returned
         * @return ApiResponse&lt;CaseTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseTypeResponse> executeWithHttpInfo() throws ApiException {
            return getCaseTypesByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCaseTypesByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseTypeResponse> _callback) throws ApiException {
            return getCaseTypesByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Case Type Object.
     * Retrieve one or more case types using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseTypeQueryObject 
     * @return GetCaseTypesByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseTypesByKeywordRequestBuilder getCaseTypesByKeyword() throws IllegalArgumentException {
        return new GetCaseTypesByKeywordRequestBuilder();
    }
    private okhttp3.Call getCauseOfActionCall(String causeOfActionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/causeOfAction/{causeOfActionId}"
            .replace("{" + "causeOfActionId" + "}", localVarApiClient.escapeString(causeOfActionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCauseOfActionValidateBeforeCall(String causeOfActionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'causeOfActionId' is set
        if (causeOfActionId == null) {
            throw new ApiException("Missing the required parameter 'causeOfActionId' when calling getCauseOfAction(Async)");
        }

        return getCauseOfActionCall(causeOfActionId, _callback);

    }


    private ApiResponse<CauseOfAction> getCauseOfActionWithHttpInfo(String causeOfActionId) throws ApiException {
        okhttp3.Call localVarCall = getCauseOfActionValidateBeforeCall(causeOfActionId, null);
        Type localVarReturnType = new TypeToken<CauseOfAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCauseOfActionAsync(String causeOfActionId, final ApiCallback<CauseOfAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCauseOfActionValidateBeforeCall(causeOfActionId, _callback);
        Type localVarReturnType = new TypeToken<CauseOfAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCauseOfActionRequestBuilder {
        private final String causeOfActionId;

        private GetCauseOfActionRequestBuilder(String causeOfActionId) {
            this.causeOfActionId = causeOfActionId;
        }

        /**
         * Build call for getCauseOfAction
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCauseOfActionCall(causeOfActionId, _callback);
        }


        /**
         * Execute getCauseOfAction request
         * @return CauseOfAction
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CauseOfAction execute() throws ApiException {
            ApiResponse<CauseOfAction> localVarResp = getCauseOfActionWithHttpInfo(causeOfActionId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCauseOfAction request with HTTP info returned
         * @return ApiResponse&lt;CauseOfAction&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CauseOfAction> executeWithHttpInfo() throws ApiException {
            return getCauseOfActionWithHttpInfo(causeOfActionId);
        }

        /**
         * Execute getCauseOfAction request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CauseOfAction> _callback) throws ApiException {
            return getCauseOfActionAsync(causeOfActionId, _callback);
        }
    }

    /**
     * CauseOfAction Object for the given causeOfActionId.
     * Retrieve the specified cause of action. 
     * @param causeOfActionId The causeOfActionId value of the desired cause of action. (required)
     * @return GetCauseOfActionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCauseOfActionRequestBuilder getCauseOfAction(String causeOfActionId) throws IllegalArgumentException {
        if (causeOfActionId == null) throw new IllegalArgumentException("\"causeOfActionId\" is required but got null");
            if (causeOfActionId != null && causeOfActionId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for causeOfActionId. Length must be greater than or equal to 18.");
            }

        return new GetCauseOfActionRequestBuilder(causeOfActionId);
    }
    private okhttp3.Call getCauseOfActionAdditionalDataCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/causeOfActionAdditionalData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCauseOfActionAdditionalDataValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCauseOfActionAdditionalDataCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CauseOfActionAdditionalDataResponse> getCauseOfActionAdditionalDataWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCauseOfActionAdditionalDataValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CauseOfActionAdditionalDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCauseOfActionAdditionalDataAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CauseOfActionAdditionalDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCauseOfActionAdditionalDataValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CauseOfActionAdditionalDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCauseOfActionAdditionalDataRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCauseOfActionAdditionalDataRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired cause of action additional data.&lt;/a&gt;  (optional)
         * @return GetCauseOfActionAdditionalDataRequestBuilder
         */
        public GetCauseOfActionAdditionalDataRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCauseOfActionAdditionalDataRequestBuilder
         */
        public GetCauseOfActionAdditionalDataRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCauseOfActionAdditionalDataRequestBuilder
         */
        public GetCauseOfActionAdditionalDataRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCauseOfActionAdditionalDataRequestBuilder
         */
        public GetCauseOfActionAdditionalDataRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCauseOfActionAdditionalData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCauseOfActionAdditionalDataCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCauseOfActionAdditionalData request
         * @return CauseOfActionAdditionalDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CauseOfActionAdditionalDataResponse execute() throws ApiException {
            ApiResponse<CauseOfActionAdditionalDataResponse> localVarResp = getCauseOfActionAdditionalDataWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCauseOfActionAdditionalData request with HTTP info returned
         * @return ApiResponse&lt;CauseOfActionAdditionalDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CauseOfActionAdditionalDataResponse> executeWithHttpInfo() throws ApiException {
            return getCauseOfActionAdditionalDataWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCauseOfActionAdditionalData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CauseOfActionAdditionalDataResponse> _callback) throws ApiException {
            return getCauseOfActionAdditionalDataAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * CauseOfActionAdditionaData Object.
     * Retrieve a cause of action additional data using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CauseOfActionAdditionalDataQueryObject 
     * @return GetCauseOfActionAdditionalDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCauseOfActionAdditionalDataRequestBuilder getCauseOfActionAdditionalData() throws IllegalArgumentException {
        return new GetCauseOfActionAdditionalDataRequestBuilder();
    }
    private okhttp3.Call getCauseOfActionAdditionalData_0Call(String causeOfActionAdditionalDataId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}"
            .replace("{" + "causeOfActionAdditionalDataId" + "}", localVarApiClient.escapeString(causeOfActionAdditionalDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCauseOfActionAdditionalData_0ValidateBeforeCall(String causeOfActionAdditionalDataId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'causeOfActionAdditionalDataId' is set
        if (causeOfActionAdditionalDataId == null) {
            throw new ApiException("Missing the required parameter 'causeOfActionAdditionalDataId' when calling getCauseOfActionAdditionalData_0(Async)");
        }

        return getCauseOfActionAdditionalData_0Call(causeOfActionAdditionalDataId, _callback);

    }


    private ApiResponse<CauseOfActionAdditionalData> getCauseOfActionAdditionalData_0WithHttpInfo(String causeOfActionAdditionalDataId) throws ApiException {
        okhttp3.Call localVarCall = getCauseOfActionAdditionalData_0ValidateBeforeCall(causeOfActionAdditionalDataId, null);
        Type localVarReturnType = new TypeToken<CauseOfActionAdditionalData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCauseOfActionAdditionalData_0Async(String causeOfActionAdditionalDataId, final ApiCallback<CauseOfActionAdditionalData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCauseOfActionAdditionalData_0ValidateBeforeCall(causeOfActionAdditionalDataId, _callback);
        Type localVarReturnType = new TypeToken<CauseOfActionAdditionalData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCauseOfActionAdditionalData0RequestBuilder {
        private final String causeOfActionAdditionalDataId;

        private GetCauseOfActionAdditionalData0RequestBuilder(String causeOfActionAdditionalDataId) {
            this.causeOfActionAdditionalDataId = causeOfActionAdditionalDataId;
        }

        /**
         * Build call for getCauseOfActionAdditionalData_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCauseOfActionAdditionalData_0Call(causeOfActionAdditionalDataId, _callback);
        }


        /**
         * Execute getCauseOfActionAdditionalData_0 request
         * @return CauseOfActionAdditionalData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CauseOfActionAdditionalData execute() throws ApiException {
            ApiResponse<CauseOfActionAdditionalData> localVarResp = getCauseOfActionAdditionalData_0WithHttpInfo(causeOfActionAdditionalDataId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCauseOfActionAdditionalData_0 request with HTTP info returned
         * @return ApiResponse&lt;CauseOfActionAdditionalData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CauseOfActionAdditionalData> executeWithHttpInfo() throws ApiException {
            return getCauseOfActionAdditionalData_0WithHttpInfo(causeOfActionAdditionalDataId);
        }

        /**
         * Execute getCauseOfActionAdditionalData_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CauseOfActionAdditionalData> _callback) throws ApiException {
            return getCauseOfActionAdditionalData_0Async(causeOfActionAdditionalDataId, _callback);
        }
    }

    /**
     * CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
     * Retrieve the specified cause of action additional data. 
     * @param causeOfActionAdditionalDataId The causeOfActionAdditionalDataId value of the desired cause of action additional data. (required)
     * @return GetCauseOfActionAdditionalData0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCauseOfActionAdditionalData0RequestBuilder getCauseOfActionAdditionalData_0(String causeOfActionAdditionalDataId) throws IllegalArgumentException {
        if (causeOfActionAdditionalDataId == null) throw new IllegalArgumentException("\"causeOfActionAdditionalDataId\" is required but got null");
            if (causeOfActionAdditionalDataId != null && causeOfActionAdditionalDataId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for causeOfActionAdditionalDataId. Length must be greater than or equal to 18.");
            }

        return new GetCauseOfActionAdditionalData0RequestBuilder(causeOfActionAdditionalDataId);
    }
    private okhttp3.Call getCauseOfActionByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/causeOfAction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCauseOfActionByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCauseOfActionByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CauseOfActionResponse> getCauseOfActionByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCauseOfActionByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CauseOfActionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCauseOfActionByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CauseOfActionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCauseOfActionByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CauseOfActionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCauseOfActionByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCauseOfActionByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired cause of action.&lt;/a&gt;  (optional)
         * @return GetCauseOfActionByKeywordRequestBuilder
         */
        public GetCauseOfActionByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCauseOfActionByKeywordRequestBuilder
         */
        public GetCauseOfActionByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCauseOfActionByKeywordRequestBuilder
         */
        public GetCauseOfActionByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCauseOfActionByKeywordRequestBuilder
         */
        public GetCauseOfActionByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCauseOfActionByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCauseOfActionByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCauseOfActionByKeyword request
         * @return CauseOfActionResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CauseOfActionResponse execute() throws ApiException {
            ApiResponse<CauseOfActionResponse> localVarResp = getCauseOfActionByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCauseOfActionByKeyword request with HTTP info returned
         * @return ApiResponse&lt;CauseOfActionResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CauseOfActionResponse> executeWithHttpInfo() throws ApiException {
            return getCauseOfActionByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCauseOfActionByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CauseOfActionResponse> _callback) throws ApiException {
            return getCauseOfActionByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * CauseOfAction Object.
     * Retrieve a cause of action using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CauseOfActionQueryObject 
     * @return GetCauseOfActionByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCauseOfActionByKeywordRequestBuilder getCauseOfActionByKeyword() throws IllegalArgumentException {
        return new GetCauseOfActionByKeywordRequestBuilder();
    }
    private okhttp3.Call getCauseOfActionGroupCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/causeOfActionGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCauseOfActionGroupValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCauseOfActionGroupCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CauseOfActionGroupResponse> getCauseOfActionGroupWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCauseOfActionGroupValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CauseOfActionGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCauseOfActionGroupAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CauseOfActionGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCauseOfActionGroupValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CauseOfActionGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCauseOfActionGroupRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCauseOfActionGroupRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired cause of action group.&lt;/a&gt;  (optional)
         * @return GetCauseOfActionGroupRequestBuilder
         */
        public GetCauseOfActionGroupRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCauseOfActionGroupRequestBuilder
         */
        public GetCauseOfActionGroupRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCauseOfActionGroupRequestBuilder
         */
        public GetCauseOfActionGroupRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCauseOfActionGroupRequestBuilder
         */
        public GetCauseOfActionGroupRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCauseOfActionGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCauseOfActionGroupCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCauseOfActionGroup request
         * @return CauseOfActionGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CauseOfActionGroupResponse execute() throws ApiException {
            ApiResponse<CauseOfActionGroupResponse> localVarResp = getCauseOfActionGroupWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCauseOfActionGroup request with HTTP info returned
         * @return ApiResponse&lt;CauseOfActionGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CauseOfActionGroupResponse> executeWithHttpInfo() throws ApiException {
            return getCauseOfActionGroupWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCauseOfActionGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CauseOfActionGroupResponse> _callback) throws ApiException {
            return getCauseOfActionGroupAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * CauseOfActionGroup Object.
     * Retrieve a cause of action group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CauseOfActionGroupQueryObject 
     * @return GetCauseOfActionGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCauseOfActionGroupRequestBuilder getCauseOfActionGroup() throws IllegalArgumentException {
        return new GetCauseOfActionGroupRequestBuilder();
    }
    private okhttp3.Call getCauseOfActionGroup_0Call(String causeOfActionGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/causeOfActionGroup/{causeOfActionGroupId}"
            .replace("{" + "causeOfActionGroupId" + "}", localVarApiClient.escapeString(causeOfActionGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCauseOfActionGroup_0ValidateBeforeCall(String causeOfActionGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'causeOfActionGroupId' is set
        if (causeOfActionGroupId == null) {
            throw new ApiException("Missing the required parameter 'causeOfActionGroupId' when calling getCauseOfActionGroup_0(Async)");
        }

        return getCauseOfActionGroup_0Call(causeOfActionGroupId, _callback);

    }


    private ApiResponse<CauseOfActionGroup> getCauseOfActionGroup_0WithHttpInfo(String causeOfActionGroupId) throws ApiException {
        okhttp3.Call localVarCall = getCauseOfActionGroup_0ValidateBeforeCall(causeOfActionGroupId, null);
        Type localVarReturnType = new TypeToken<CauseOfActionGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCauseOfActionGroup_0Async(String causeOfActionGroupId, final ApiCallback<CauseOfActionGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCauseOfActionGroup_0ValidateBeforeCall(causeOfActionGroupId, _callback);
        Type localVarReturnType = new TypeToken<CauseOfActionGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCauseOfActionGroup0RequestBuilder {
        private final String causeOfActionGroupId;

        private GetCauseOfActionGroup0RequestBuilder(String causeOfActionGroupId) {
            this.causeOfActionGroupId = causeOfActionGroupId;
        }

        /**
         * Build call for getCauseOfActionGroup_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCauseOfActionGroup_0Call(causeOfActionGroupId, _callback);
        }


        /**
         * Execute getCauseOfActionGroup_0 request
         * @return CauseOfActionGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CauseOfActionGroup execute() throws ApiException {
            ApiResponse<CauseOfActionGroup> localVarResp = getCauseOfActionGroup_0WithHttpInfo(causeOfActionGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCauseOfActionGroup_0 request with HTTP info returned
         * @return ApiResponse&lt;CauseOfActionGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CauseOfActionGroup> executeWithHttpInfo() throws ApiException {
            return getCauseOfActionGroup_0WithHttpInfo(causeOfActionGroupId);
        }

        /**
         * Execute getCauseOfActionGroup_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CauseOfActionGroup> _callback) throws ApiException {
            return getCauseOfActionGroup_0Async(causeOfActionGroupId, _callback);
        }
    }

    /**
     * CauseOfActionGroup Object for the given causeOfActionGroupId.
     * Retrieve the specified cause of action group. 
     * @param causeOfActionGroupId causeOfActionGroupId (required)
     * @return GetCauseOfActionGroup0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCauseOfActionGroup0RequestBuilder getCauseOfActionGroup_0(String causeOfActionGroupId) throws IllegalArgumentException {
        if (causeOfActionGroupId == null) throw new IllegalArgumentException("\"causeOfActionGroupId\" is required but got null");
            if (causeOfActionGroupId != null && causeOfActionGroupId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for causeOfActionGroupId. Length must be greater than or equal to 18.");
            }

        return new GetCauseOfActionGroup0RequestBuilder(causeOfActionGroupId);
    }
    private okhttp3.Call getChargeAdditionalDataCall(String chargeAdditionalDataId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeAdditionalData/{chargeAdditionalDataId}"
            .replace("{" + "chargeAdditionalDataId" + "}", localVarApiClient.escapeString(chargeAdditionalDataId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeAdditionalDataValidateBeforeCall(String chargeAdditionalDataId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chargeAdditionalDataId' is set
        if (chargeAdditionalDataId == null) {
            throw new ApiException("Missing the required parameter 'chargeAdditionalDataId' when calling getChargeAdditionalData(Async)");
        }

        return getChargeAdditionalDataCall(chargeAdditionalDataId, _callback);

    }


    private ApiResponse<ChargeAdditionalData> getChargeAdditionalDataWithHttpInfo(String chargeAdditionalDataId) throws ApiException {
        okhttp3.Call localVarCall = getChargeAdditionalDataValidateBeforeCall(chargeAdditionalDataId, null);
        Type localVarReturnType = new TypeToken<ChargeAdditionalData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeAdditionalDataAsync(String chargeAdditionalDataId, final ApiCallback<ChargeAdditionalData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeAdditionalDataValidateBeforeCall(chargeAdditionalDataId, _callback);
        Type localVarReturnType = new TypeToken<ChargeAdditionalData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeAdditionalDataRequestBuilder {
        private final String chargeAdditionalDataId;

        private GetChargeAdditionalDataRequestBuilder(String chargeAdditionalDataId) {
            this.chargeAdditionalDataId = chargeAdditionalDataId;
        }

        /**
         * Build call for getChargeAdditionalData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeAdditionalDataCall(chargeAdditionalDataId, _callback);
        }


        /**
         * Execute getChargeAdditionalData request
         * @return ChargeAdditionalData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeAdditionalData execute() throws ApiException {
            ApiResponse<ChargeAdditionalData> localVarResp = getChargeAdditionalDataWithHttpInfo(chargeAdditionalDataId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeAdditionalData request with HTTP info returned
         * @return ApiResponse&lt;ChargeAdditionalData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeAdditionalData> executeWithHttpInfo() throws ApiException {
            return getChargeAdditionalDataWithHttpInfo(chargeAdditionalDataId);
        }

        /**
         * Execute getChargeAdditionalData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeAdditionalData> _callback) throws ApiException {
            return getChargeAdditionalDataAsync(chargeAdditionalDataId, _callback);
        }
    }

    /**
     * Charge Additional Data Object for the given chargeAdditionalDataId.
     * Retrieve the specified charge additional data. 
     * @param chargeAdditionalDataId The chargeAdditionalDataId value of the desired charge additional data. (required)
     * @return GetChargeAdditionalDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeAdditionalDataRequestBuilder getChargeAdditionalData(String chargeAdditionalDataId) throws IllegalArgumentException {
        if (chargeAdditionalDataId == null) throw new IllegalArgumentException("\"chargeAdditionalDataId\" is required but got null");
            if (chargeAdditionalDataId != null && chargeAdditionalDataId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for chargeAdditionalDataId. Length must be greater than or equal to 18.");
            }

        return new GetChargeAdditionalDataRequestBuilder(chargeAdditionalDataId);
    }
    private okhttp3.Call getChargeByIdCall(String chargeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/charge/{chargeId}"
            .replace("{" + "chargeId" + "}", localVarApiClient.escapeString(chargeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeByIdValidateBeforeCall(String chargeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chargeId' is set
        if (chargeId == null) {
            throw new ApiException("Missing the required parameter 'chargeId' when calling getChargeById(Async)");
        }

        return getChargeByIdCall(chargeId, _callback);

    }


    private ApiResponse<Charge> getChargeByIdWithHttpInfo(String chargeId) throws ApiException {
        okhttp3.Call localVarCall = getChargeByIdValidateBeforeCall(chargeId, null);
        Type localVarReturnType = new TypeToken<Charge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeByIdAsync(String chargeId, final ApiCallback<Charge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeByIdValidateBeforeCall(chargeId, _callback);
        Type localVarReturnType = new TypeToken<Charge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeByIdRequestBuilder {
        private final String chargeId;

        private GetChargeByIdRequestBuilder(String chargeId) {
            this.chargeId = chargeId;
        }

        /**
         * Build call for getChargeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeByIdCall(chargeId, _callback);
        }


        /**
         * Execute getChargeById request
         * @return Charge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Charge execute() throws ApiException {
            ApiResponse<Charge> localVarResp = getChargeByIdWithHttpInfo(chargeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeById request with HTTP info returned
         * @return ApiResponse&lt;Charge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Charge> executeWithHttpInfo() throws ApiException {
            return getChargeByIdWithHttpInfo(chargeId);
        }

        /**
         * Execute getChargeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Charge> _callback) throws ApiException {
            return getChargeByIdAsync(chargeId, _callback);
        }
    }

    /**
     * Charge Object for the given chargeId.
     * Retrieve the specified charge. 
     * @param chargeId The chargeId value of the desired charge. (required)
     * @return GetChargeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeByIdRequestBuilder getChargeById(String chargeId) throws IllegalArgumentException {
        if (chargeId == null) throw new IllegalArgumentException("\"chargeId\" is required but got null");
            if (chargeId != null && chargeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for chargeId. Length must be greater than or equal to 18.");
            }

        return new GetChargeByIdRequestBuilder(chargeId);
    }
    private okhttp3.Call getChargeDegreeByIdCall(String chargeDegreeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeDegree/{chargeDegreeId}"
            .replace("{" + "chargeDegreeId" + "}", localVarApiClient.escapeString(chargeDegreeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeDegreeByIdValidateBeforeCall(String chargeDegreeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chargeDegreeId' is set
        if (chargeDegreeId == null) {
            throw new ApiException("Missing the required parameter 'chargeDegreeId' when calling getChargeDegreeById(Async)");
        }

        return getChargeDegreeByIdCall(chargeDegreeId, _callback);

    }


    private ApiResponse<ChargeDegree> getChargeDegreeByIdWithHttpInfo(String chargeDegreeId) throws ApiException {
        okhttp3.Call localVarCall = getChargeDegreeByIdValidateBeforeCall(chargeDegreeId, null);
        Type localVarReturnType = new TypeToken<ChargeDegree>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeDegreeByIdAsync(String chargeDegreeId, final ApiCallback<ChargeDegree> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeDegreeByIdValidateBeforeCall(chargeDegreeId, _callback);
        Type localVarReturnType = new TypeToken<ChargeDegree>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeDegreeByIdRequestBuilder {
        private final String chargeDegreeId;

        private GetChargeDegreeByIdRequestBuilder(String chargeDegreeId) {
            this.chargeDegreeId = chargeDegreeId;
        }

        /**
         * Build call for getChargeDegreeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeDegreeByIdCall(chargeDegreeId, _callback);
        }


        /**
         * Execute getChargeDegreeById request
         * @return ChargeDegree
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeDegree execute() throws ApiException {
            ApiResponse<ChargeDegree> localVarResp = getChargeDegreeByIdWithHttpInfo(chargeDegreeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeDegreeById request with HTTP info returned
         * @return ApiResponse&lt;ChargeDegree&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeDegree> executeWithHttpInfo() throws ApiException {
            return getChargeDegreeByIdWithHttpInfo(chargeDegreeId);
        }

        /**
         * Execute getChargeDegreeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeDegree> _callback) throws ApiException {
            return getChargeDegreeByIdAsync(chargeDegreeId, _callback);
        }
    }

    /**
     * ChargeDegree Object for the given chargeDegreeId.
     * Retrieve the specified charge degree. 
     * @param chargeDegreeId The chargeDegreeId value of the desired charge degree. (required)
     * @return GetChargeDegreeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeDegreeByIdRequestBuilder getChargeDegreeById(String chargeDegreeId) throws IllegalArgumentException {
        if (chargeDegreeId == null) throw new IllegalArgumentException("\"chargeDegreeId\" is required but got null");
            if (chargeDegreeId != null && chargeDegreeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for chargeDegreeId. Length must be greater than or equal to 18.");
            }

        return new GetChargeDegreeByIdRequestBuilder(chargeDegreeId);
    }
    private okhttp3.Call getChargeDegreeUsingKeywordExpressionCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeDegree";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeDegreeUsingKeywordExpressionValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getChargeDegreeUsingKeywordExpressionCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<ChargeDegreeResponse> getChargeDegreeUsingKeywordExpressionWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getChargeDegreeUsingKeywordExpressionValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<ChargeDegreeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeDegreeUsingKeywordExpressionAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<ChargeDegreeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeDegreeUsingKeywordExpressionValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ChargeDegreeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeDegreeUsingKeywordExpressionRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetChargeDegreeUsingKeywordExpressionRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired charge degree.&lt;/a&gt;  (optional)
         * @return GetChargeDegreeUsingKeywordExpressionRequestBuilder
         */
        public GetChargeDegreeUsingKeywordExpressionRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetChargeDegreeUsingKeywordExpressionRequestBuilder
         */
        public GetChargeDegreeUsingKeywordExpressionRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetChargeDegreeUsingKeywordExpressionRequestBuilder
         */
        public GetChargeDegreeUsingKeywordExpressionRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetChargeDegreeUsingKeywordExpressionRequestBuilder
         */
        public GetChargeDegreeUsingKeywordExpressionRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getChargeDegreeUsingKeywordExpression
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeDegreeUsingKeywordExpressionCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getChargeDegreeUsingKeywordExpression request
         * @return ChargeDegreeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeDegreeResponse execute() throws ApiException {
            ApiResponse<ChargeDegreeResponse> localVarResp = getChargeDegreeUsingKeywordExpressionWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeDegreeUsingKeywordExpression request with HTTP info returned
         * @return ApiResponse&lt;ChargeDegreeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeDegreeResponse> executeWithHttpInfo() throws ApiException {
            return getChargeDegreeUsingKeywordExpressionWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getChargeDegreeUsingKeywordExpression request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeDegreeResponse> _callback) throws ApiException {
            return getChargeDegreeUsingKeywordExpressionAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * ChargeDegree Object.
     * Retrieve a charge degree using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeDegreeQueryObject 
     * @return GetChargeDegreeUsingKeywordExpressionRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeDegreeUsingKeywordExpressionRequestBuilder getChargeDegreeUsingKeywordExpression() throws IllegalArgumentException {
        return new GetChargeDegreeUsingKeywordExpressionRequestBuilder();
    }
    private okhttp3.Call getChargeGroupCall(String chargeGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeGroup/{chargeGroupId}"
            .replace("{" + "chargeGroupId" + "}", localVarApiClient.escapeString(chargeGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeGroupValidateBeforeCall(String chargeGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chargeGroupId' is set
        if (chargeGroupId == null) {
            throw new ApiException("Missing the required parameter 'chargeGroupId' when calling getChargeGroup(Async)");
        }

        return getChargeGroupCall(chargeGroupId, _callback);

    }


    private ApiResponse<ChargeGroup> getChargeGroupWithHttpInfo(String chargeGroupId) throws ApiException {
        okhttp3.Call localVarCall = getChargeGroupValidateBeforeCall(chargeGroupId, null);
        Type localVarReturnType = new TypeToken<ChargeGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeGroupAsync(String chargeGroupId, final ApiCallback<ChargeGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeGroupValidateBeforeCall(chargeGroupId, _callback);
        Type localVarReturnType = new TypeToken<ChargeGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeGroupRequestBuilder {
        private final String chargeGroupId;

        private GetChargeGroupRequestBuilder(String chargeGroupId) {
            this.chargeGroupId = chargeGroupId;
        }

        /**
         * Build call for getChargeGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeGroupCall(chargeGroupId, _callback);
        }


        /**
         * Execute getChargeGroup request
         * @return ChargeGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeGroup execute() throws ApiException {
            ApiResponse<ChargeGroup> localVarResp = getChargeGroupWithHttpInfo(chargeGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeGroup request with HTTP info returned
         * @return ApiResponse&lt;ChargeGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeGroup> executeWithHttpInfo() throws ApiException {
            return getChargeGroupWithHttpInfo(chargeGroupId);
        }

        /**
         * Execute getChargeGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeGroup> _callback) throws ApiException {
            return getChargeGroupAsync(chargeGroupId, _callback);
        }
    }

    /**
     * Charge Group Object for the given chargeGroupId.
     * Retrieve the specified charge group. 
     * @param chargeGroupId The chargeGroupId value of the desired charge group. (required)
     * @return GetChargeGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeGroupRequestBuilder getChargeGroup(String chargeGroupId) throws IllegalArgumentException {
        if (chargeGroupId == null) throw new IllegalArgumentException("\"chargeGroupId\" is required but got null");
            if (chargeGroupId != null && chargeGroupId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for chargeGroupId. Length must be greater than or equal to 18.");
            }

        return new GetChargeGroupRequestBuilder(chargeGroupId);
    }
    private okhttp3.Call getChargeGroupsByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeGroupsByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getChargeGroupsByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<ChargeGroupResponse> getChargeGroupsByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getChargeGroupsByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<ChargeGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeGroupsByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<ChargeGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeGroupsByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ChargeGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeGroupsByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetChargeGroupsByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired charge group.&lt;/a&gt;  (optional)
         * @return GetChargeGroupsByKeywordRequestBuilder
         */
        public GetChargeGroupsByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetChargeGroupsByKeywordRequestBuilder
         */
        public GetChargeGroupsByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetChargeGroupsByKeywordRequestBuilder
         */
        public GetChargeGroupsByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetChargeGroupsByKeywordRequestBuilder
         */
        public GetChargeGroupsByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getChargeGroupsByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeGroupsByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getChargeGroupsByKeyword request
         * @return ChargeGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeGroupResponse execute() throws ApiException {
            ApiResponse<ChargeGroupResponse> localVarResp = getChargeGroupsByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeGroupsByKeyword request with HTTP info returned
         * @return ApiResponse&lt;ChargeGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeGroupResponse> executeWithHttpInfo() throws ApiException {
            return getChargeGroupsByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getChargeGroupsByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeGroupResponse> _callback) throws ApiException {
            return getChargeGroupsByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Charge Group Object.
     * Retrieve one or more charge groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeGroupQueryObject 
     * @return GetChargeGroupsByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeGroupsByKeywordRequestBuilder getChargeGroupsByKeyword() throws IllegalArgumentException {
        return new GetChargeGroupsByKeywordRequestBuilder();
    }
    private okhttp3.Call getChargeSeverityCall(String chargeSeverityId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeSeverity/{chargeSeverityId}"
            .replace("{" + "chargeSeverityId" + "}", localVarApiClient.escapeString(chargeSeverityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeSeverityValidateBeforeCall(String chargeSeverityId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'chargeSeverityId' is set
        if (chargeSeverityId == null) {
            throw new ApiException("Missing the required parameter 'chargeSeverityId' when calling getChargeSeverity(Async)");
        }

        return getChargeSeverityCall(chargeSeverityId, _callback);

    }


    private ApiResponse<ChargeSeverity> getChargeSeverityWithHttpInfo(String chargeSeverityId) throws ApiException {
        okhttp3.Call localVarCall = getChargeSeverityValidateBeforeCall(chargeSeverityId, null);
        Type localVarReturnType = new TypeToken<ChargeSeverity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeSeverityAsync(String chargeSeverityId, final ApiCallback<ChargeSeverity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeSeverityValidateBeforeCall(chargeSeverityId, _callback);
        Type localVarReturnType = new TypeToken<ChargeSeverity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeSeverityRequestBuilder {
        private final String chargeSeverityId;

        private GetChargeSeverityRequestBuilder(String chargeSeverityId) {
            this.chargeSeverityId = chargeSeverityId;
        }

        /**
         * Build call for getChargeSeverity
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeSeverityCall(chargeSeverityId, _callback);
        }


        /**
         * Execute getChargeSeverity request
         * @return ChargeSeverity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeSeverity execute() throws ApiException {
            ApiResponse<ChargeSeverity> localVarResp = getChargeSeverityWithHttpInfo(chargeSeverityId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeSeverity request with HTTP info returned
         * @return ApiResponse&lt;ChargeSeverity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeSeverity> executeWithHttpInfo() throws ApiException {
            return getChargeSeverityWithHttpInfo(chargeSeverityId);
        }

        /**
         * Execute getChargeSeverity request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeSeverity> _callback) throws ApiException {
            return getChargeSeverityAsync(chargeSeverityId, _callback);
        }
    }

    /**
     * ChargeSeverity Object for the given chargeSeverityId.
     * Retrieve the specified charge severity. 
     * @param chargeSeverityId The chargeSeverityId value of the desired charge severity. (required)
     * @return GetChargeSeverityRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeSeverityRequestBuilder getChargeSeverity(String chargeSeverityId) throws IllegalArgumentException {
        if (chargeSeverityId == null) throw new IllegalArgumentException("\"chargeSeverityId\" is required but got null");
            if (chargeSeverityId != null && chargeSeverityId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for chargeSeverityId. Length must be greater than or equal to 18.");
            }

        return new GetChargeSeverityRequestBuilder(chargeSeverityId);
    }
    private okhttp3.Call getChargeSeverityByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/chargeSeverity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargeSeverityByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getChargeSeverityByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<ChargeSeverityResponse> getChargeSeverityByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getChargeSeverityByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<ChargeSeverityResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargeSeverityByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<ChargeSeverityResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargeSeverityByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ChargeSeverityResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargeSeverityByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetChargeSeverityByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired charge severity.&lt;/a&gt;  (optional)
         * @return GetChargeSeverityByKeywordRequestBuilder
         */
        public GetChargeSeverityByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetChargeSeverityByKeywordRequestBuilder
         */
        public GetChargeSeverityByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetChargeSeverityByKeywordRequestBuilder
         */
        public GetChargeSeverityByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetChargeSeverityByKeywordRequestBuilder
         */
        public GetChargeSeverityByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getChargeSeverityByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargeSeverityByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getChargeSeverityByKeyword request
         * @return ChargeSeverityResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeSeverityResponse execute() throws ApiException {
            ApiResponse<ChargeSeverityResponse> localVarResp = getChargeSeverityByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargeSeverityByKeyword request with HTTP info returned
         * @return ApiResponse&lt;ChargeSeverityResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeSeverityResponse> executeWithHttpInfo() throws ApiException {
            return getChargeSeverityByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getChargeSeverityByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeSeverityResponse> _callback) throws ApiException {
            return getChargeSeverityByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * ChargeSeverity Object.
     * Retrieve a charge severity using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeSeverityQueryObject 
     * @return GetChargeSeverityByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargeSeverityByKeywordRequestBuilder getChargeSeverityByKeyword() throws IllegalArgumentException {
        return new GetChargeSeverityByKeywordRequestBuilder();
    }
    private okhttp3.Call getChargesUsingKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/charge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChargesUsingKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getChargesUsingKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<ChargeResponse> getChargesUsingKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getChargesUsingKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<ChargeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getChargesUsingKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<ChargeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChargesUsingKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<ChargeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetChargesUsingKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetChargesUsingKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired charge.&lt;/a&gt;  (optional)
         * @return GetChargesUsingKeywordRequestBuilder
         */
        public GetChargesUsingKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetChargesUsingKeywordRequestBuilder
         */
        public GetChargesUsingKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetChargesUsingKeywordRequestBuilder
         */
        public GetChargesUsingKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetChargesUsingKeywordRequestBuilder
         */
        public GetChargesUsingKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getChargesUsingKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getChargesUsingKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getChargesUsingKeyword request
         * @return ChargeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ChargeResponse execute() throws ApiException {
            ApiResponse<ChargeResponse> localVarResp = getChargesUsingKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getChargesUsingKeyword request with HTTP info returned
         * @return ApiResponse&lt;ChargeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ChargeResponse> executeWithHttpInfo() throws ApiException {
            return getChargesUsingKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getChargesUsingKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ChargeResponse> _callback) throws ApiException {
            return getChargesUsingKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Charge Object.
     * Retrieve one or more charges using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; ChargeQueryObject 
     * @return GetChargesUsingKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetChargesUsingKeywordRequestBuilder getChargesUsingKeyword() throws IllegalArgumentException {
        return new GetChargesUsingKeywordRequestBuilder();
    }
    private okhttp3.Call getCourtLocationCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtLocation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtLocationValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCourtLocationCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtLocationResponse> getCourtLocationWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCourtLocationValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtLocationAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CourtLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtLocationValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtLocationRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCourtLocationRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression that sets forth the criteria concerning the court location or court locations to target. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt;  (optional)
         * @return GetCourtLocationRequestBuilder
         */
        public GetCourtLocationRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCourtLocationRequestBuilder
         */
        public GetCourtLocationRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCourtLocationRequestBuilder
         */
        public GetCourtLocationRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCourtLocationRequestBuilder
         */
        public GetCourtLocationRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCourtLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtLocationCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCourtLocation request
         * @return CourtLocationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtLocationResponse execute() throws ApiException {
            ApiResponse<CourtLocationResponse> localVarResp = getCourtLocationWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtLocation request with HTTP info returned
         * @return ApiResponse&lt;CourtLocationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtLocationResponse> executeWithHttpInfo() throws ApiException {
            return getCourtLocationWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCourtLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtLocationResponse> _callback) throws ApiException {
            return getCourtLocationAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Courthouse Object.
     * Retrieve the specified court location or court locations.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtLocationQueryObject 
     * @return GetCourtLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtLocationRequestBuilder getCourtLocation() throws IllegalArgumentException {
        return new GetCourtLocationRequestBuilder();
    }
    private okhttp3.Call getCourtLocationObjectCall(String courtLocationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtLocation/{courtLocationId}"
            .replace("{" + "courtLocationId" + "}", localVarApiClient.escapeString(courtLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtLocationObjectValidateBeforeCall(String courtLocationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtLocationId' is set
        if (courtLocationId == null) {
            throw new ApiException("Missing the required parameter 'courtLocationId' when calling getCourtLocationObject(Async)");
        }

        return getCourtLocationObjectCall(courtLocationId, _callback);

    }


    private ApiResponse<CourtLocation> getCourtLocationObjectWithHttpInfo(String courtLocationId) throws ApiException {
        okhttp3.Call localVarCall = getCourtLocationObjectValidateBeforeCall(courtLocationId, null);
        Type localVarReturnType = new TypeToken<CourtLocation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtLocationObjectAsync(String courtLocationId, final ApiCallback<CourtLocation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtLocationObjectValidateBeforeCall(courtLocationId, _callback);
        Type localVarReturnType = new TypeToken<CourtLocation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtLocationObjectRequestBuilder {
        private final String courtLocationId;

        private GetCourtLocationObjectRequestBuilder(String courtLocationId) {
            this.courtLocationId = courtLocationId;
        }

        /**
         * Build call for getCourtLocationObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtLocationObjectCall(courtLocationId, _callback);
        }


        /**
         * Execute getCourtLocationObject request
         * @return CourtLocation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtLocation execute() throws ApiException {
            ApiResponse<CourtLocation> localVarResp = getCourtLocationObjectWithHttpInfo(courtLocationId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtLocationObject request with HTTP info returned
         * @return ApiResponse&lt;CourtLocation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtLocation> executeWithHttpInfo() throws ApiException {
            return getCourtLocationObjectWithHttpInfo(courtLocationId);
        }

        /**
         * Execute getCourtLocationObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtLocation> _callback) throws ApiException {
            return getCourtLocationObjectAsync(courtLocationId, _callback);
        }
    }

    /**
     * Courthouse Object for given Court Location Id.
     * Contains the Court Location Object. 
     * @param courtLocationId courtLocationId (required)
     * @return GetCourtLocationObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtLocationObjectRequestBuilder getCourtLocationObject(String courtLocationId) throws IllegalArgumentException {
        if (courtLocationId == null) throw new IllegalArgumentException("\"courtLocationId\" is required but got null");
            if (courtLocationId != null && courtLocationId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtLocationId. Length must be greater than or equal to 18.");
            }

        return new GetCourtLocationObjectRequestBuilder(courtLocationId);
    }
    private okhttp3.Call getCourtLocationsCall(String courtId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/court/{courtId}/courtLocations"
            .replace("{" + "courtId" + "}", localVarApiClient.escapeString(courtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtLocationsValidateBeforeCall(String courtId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling getCourtLocations(Async)");
        }

        return getCourtLocationsCall(courtId, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtLocationResponse> getCourtLocationsWithHttpInfo(String courtId, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCourtLocationsValidateBeforeCall(courtId, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtLocationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtLocationsAsync(String courtId, Integer pageNumber, String sort, String order, final ApiCallback<CourtLocationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtLocationsValidateBeforeCall(courtId, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtLocationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtLocationsRequestBuilder {
        private final String courtId;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCourtLocationsRequestBuilder(String courtId) {
            this.courtId = courtId;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCourtLocationsRequestBuilder
         */
        public GetCourtLocationsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCourtLocationsRequestBuilder
         */
        public GetCourtLocationsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCourtLocationsRequestBuilder
         */
        public GetCourtLocationsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCourtLocations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtLocationsCall(courtId, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCourtLocations request
         * @return CourtLocationResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtLocationResponse execute() throws ApiException {
            ApiResponse<CourtLocationResponse> localVarResp = getCourtLocationsWithHttpInfo(courtId, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtLocations request with HTTP info returned
         * @return ApiResponse&lt;CourtLocationResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtLocationResponse> executeWithHttpInfo() throws ApiException {
            return getCourtLocationsWithHttpInfo(courtId, pageNumber, sort, order);
        }

        /**
         * Execute getCourtLocations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtLocationResponse> _callback) throws ApiException {
            return getCourtLocationsAsync(courtId, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Associated Court Location for given courtId.
     * Retrieve the court locations associated with the specified court. 
     * @param courtId The courtId value of the target court. (required)
     * @return GetCourtLocationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtLocationsRequestBuilder getCourtLocations(String courtId) throws IllegalArgumentException {
        if (courtId == null) throw new IllegalArgumentException("\"courtId\" is required but got null");
            if (courtId != null && courtId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
            }

        return new GetCourtLocationsRequestBuilder(courtId);
    }
    private okhttp3.Call getCourtObjectCall(String courtId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/court/{courtId}"
            .replace("{" + "courtId" + "}", localVarApiClient.escapeString(courtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtObjectValidateBeforeCall(String courtId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling getCourtObject(Async)");
        }

        return getCourtObjectCall(courtId, _callback);

    }


    private ApiResponse<Court> getCourtObjectWithHttpInfo(String courtId) throws ApiException {
        okhttp3.Call localVarCall = getCourtObjectValidateBeforeCall(courtId, null);
        Type localVarReturnType = new TypeToken<Court>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtObjectAsync(String courtId, final ApiCallback<Court> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtObjectValidateBeforeCall(courtId, _callback);
        Type localVarReturnType = new TypeToken<Court>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtObjectRequestBuilder {
        private final String courtId;

        private GetCourtObjectRequestBuilder(String courtId) {
            this.courtId = courtId;
        }

        /**
         * Build call for getCourtObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtObjectCall(courtId, _callback);
        }


        /**
         * Execute getCourtObject request
         * @return Court
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public Court execute() throws ApiException {
            ApiResponse<Court> localVarResp = getCourtObjectWithHttpInfo(courtId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtObject request with HTTP info returned
         * @return ApiResponse&lt;Court&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Court> executeWithHttpInfo() throws ApiException {
            return getCourtObjectWithHttpInfo(courtId);
        }

        /**
         * Execute getCourtObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Court> _callback) throws ApiException {
            return getCourtObjectAsync(courtId, _callback);
        }
    }

    /**
     * Court Object for given courtId.
     * Retrieve information about a specified court. 
     * @param courtId The courtId value of the target court. (required)
     * @return GetCourtObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtObjectRequestBuilder getCourtObject(String courtId) throws IllegalArgumentException {
        if (courtId == null) throw new IllegalArgumentException("\"courtId\" is required but got null");
            if (courtId != null && courtId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
            }

        return new GetCourtObjectRequestBuilder(courtId);
    }
    private okhttp3.Call getCourtServiceStatusCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtServiceStatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtServiceStatusValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCourtServiceStatusCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtServiceStatusResponse> getCourtServiceStatusWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCourtServiceStatusValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtServiceStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtServiceStatusAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CourtServiceStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtServiceStatusValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtServiceStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtServiceStatusRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCourtServiceStatusRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired court. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt;  (optional)
         * @return GetCourtServiceStatusRequestBuilder
         */
        public GetCourtServiceStatusRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCourtServiceStatusRequestBuilder
         */
        public GetCourtServiceStatusRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCourtServiceStatusRequestBuilder
         */
        public GetCourtServiceStatusRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCourtServiceStatusRequestBuilder
         */
        public GetCourtServiceStatusRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCourtServiceStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtServiceStatusCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCourtServiceStatus request
         * @return CourtServiceStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtServiceStatusResponse execute() throws ApiException {
            ApiResponse<CourtServiceStatusResponse> localVarResp = getCourtServiceStatusWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtServiceStatus request with HTTP info returned
         * @return ApiResponse&lt;CourtServiceStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtServiceStatusResponse> executeWithHttpInfo() throws ApiException {
            return getCourtServiceStatusWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCourtServiceStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtServiceStatusResponse> _callback) throws ApiException {
            return getCourtServiceStatusAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Court Service Status Object.
     * Retrieve the status of one or more courts using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtServiceStatusQueryObject 
     * @return GetCourtServiceStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtServiceStatusRequestBuilder getCourtServiceStatus() throws IllegalArgumentException {
        return new GetCourtServiceStatusRequestBuilder();
    }
    private okhttp3.Call getCourtServiceStatusByIdCall(String courtServiceStatusId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtServiceStatus/{courtServiceStatusId}"
            .replace("{" + "courtServiceStatusId" + "}", localVarApiClient.escapeString(courtServiceStatusId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtServiceStatusByIdValidateBeforeCall(String courtServiceStatusId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtServiceStatusId' is set
        if (courtServiceStatusId == null) {
            throw new ApiException("Missing the required parameter 'courtServiceStatusId' when calling getCourtServiceStatusById(Async)");
        }

        return getCourtServiceStatusByIdCall(courtServiceStatusId, _callback);

    }


    private ApiResponse<CourtServiceStatus> getCourtServiceStatusByIdWithHttpInfo(String courtServiceStatusId) throws ApiException {
        okhttp3.Call localVarCall = getCourtServiceStatusByIdValidateBeforeCall(courtServiceStatusId, null);
        Type localVarReturnType = new TypeToken<CourtServiceStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtServiceStatusByIdAsync(String courtServiceStatusId, final ApiCallback<CourtServiceStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtServiceStatusByIdValidateBeforeCall(courtServiceStatusId, _callback);
        Type localVarReturnType = new TypeToken<CourtServiceStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtServiceStatusByIdRequestBuilder {
        private final String courtServiceStatusId;

        private GetCourtServiceStatusByIdRequestBuilder(String courtServiceStatusId) {
            this.courtServiceStatusId = courtServiceStatusId;
        }

        /**
         * Build call for getCourtServiceStatusById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtServiceStatusByIdCall(courtServiceStatusId, _callback);
        }


        /**
         * Execute getCourtServiceStatusById request
         * @return CourtServiceStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtServiceStatus execute() throws ApiException {
            ApiResponse<CourtServiceStatus> localVarResp = getCourtServiceStatusByIdWithHttpInfo(courtServiceStatusId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtServiceStatusById request with HTTP info returned
         * @return ApiResponse&lt;CourtServiceStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtServiceStatus> executeWithHttpInfo() throws ApiException {
            return getCourtServiceStatusByIdWithHttpInfo(courtServiceStatusId);
        }

        /**
         * Execute getCourtServiceStatusById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtServiceStatus> _callback) throws ApiException {
            return getCourtServiceStatusByIdAsync(courtServiceStatusId, _callback);
        }
    }

    /**
     * Court Service Status Object for the given courtServiceStatusId.
     * Retrieve the court status of the specified court. 
     * @param courtServiceStatusId The courtServiceStatusId value of the desired court. (required)
     * @return GetCourtServiceStatusByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtServiceStatusByIdRequestBuilder getCourtServiceStatusById(String courtServiceStatusId) throws IllegalArgumentException {
        if (courtServiceStatusId == null) throw new IllegalArgumentException("\"courtServiceStatusId\" is required but got null");
            if (courtServiceStatusId != null && courtServiceStatusId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtServiceStatusId. Length must be greater than or equal to 18.");
            }

        return new GetCourtServiceStatusByIdRequestBuilder(courtServiceStatusId);
    }
    private okhttp3.Call getCourtSystemCall(String courtSystemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtSystem/{courtSystemId}"
            .replace("{" + "courtSystemId" + "}", localVarApiClient.escapeString(courtSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtSystemValidateBeforeCall(String courtSystemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtSystemId' is set
        if (courtSystemId == null) {
            throw new ApiException("Missing the required parameter 'courtSystemId' when calling getCourtSystem(Async)");
        }

        return getCourtSystemCall(courtSystemId, _callback);

    }


    private ApiResponse<CourtSystem> getCourtSystemWithHttpInfo(String courtSystemId) throws ApiException {
        okhttp3.Call localVarCall = getCourtSystemValidateBeforeCall(courtSystemId, null);
        Type localVarReturnType = new TypeToken<CourtSystem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtSystemAsync(String courtSystemId, final ApiCallback<CourtSystem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtSystemValidateBeforeCall(courtSystemId, _callback);
        Type localVarReturnType = new TypeToken<CourtSystem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtSystemRequestBuilder {
        private final String courtSystemId;

        private GetCourtSystemRequestBuilder(String courtSystemId) {
            this.courtSystemId = courtSystemId;
        }

        /**
         * Build call for getCourtSystem
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtSystemCall(courtSystemId, _callback);
        }


        /**
         * Execute getCourtSystem request
         * @return CourtSystem
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtSystem execute() throws ApiException {
            ApiResponse<CourtSystem> localVarResp = getCourtSystemWithHttpInfo(courtSystemId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtSystem request with HTTP info returned
         * @return ApiResponse&lt;CourtSystem&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtSystem> executeWithHttpInfo() throws ApiException {
            return getCourtSystemWithHttpInfo(courtSystemId);
        }

        /**
         * Execute getCourtSystem request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtSystem> _callback) throws ApiException {
            return getCourtSystemAsync(courtSystemId, _callback);
        }
    }

    /**
     * Court System Object for given courtSystemId.
     * Retrieve the specified court system. 
     * @param courtSystemId The courtSystemId value of the court system to be retrieved. (required)
     * @return GetCourtSystemRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtSystemRequestBuilder getCourtSystem(String courtSystemId) throws IllegalArgumentException {
        if (courtSystemId == null) throw new IllegalArgumentException("\"courtSystemId\" is required but got null");
            if (courtSystemId != null && courtSystemId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtSystemId. Length must be greater than or equal to 18.");
            }

        return new GetCourtSystemRequestBuilder(courtSystemId);
    }
    private okhttp3.Call getCourtTypeObjectCall(String courtTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtType/{courtTypeId}"
            .replace("{" + "courtTypeId" + "}", localVarApiClient.escapeString(courtTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtTypeObjectValidateBeforeCall(String courtTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtTypeId' is set
        if (courtTypeId == null) {
            throw new ApiException("Missing the required parameter 'courtTypeId' when calling getCourtTypeObject(Async)");
        }

        return getCourtTypeObjectCall(courtTypeId, _callback);

    }


    private ApiResponse<CourtType> getCourtTypeObjectWithHttpInfo(String courtTypeId) throws ApiException {
        okhttp3.Call localVarCall = getCourtTypeObjectValidateBeforeCall(courtTypeId, null);
        Type localVarReturnType = new TypeToken<CourtType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtTypeObjectAsync(String courtTypeId, final ApiCallback<CourtType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtTypeObjectValidateBeforeCall(courtTypeId, _callback);
        Type localVarReturnType = new TypeToken<CourtType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtTypeObjectRequestBuilder {
        private final String courtTypeId;

        private GetCourtTypeObjectRequestBuilder(String courtTypeId) {
            this.courtTypeId = courtTypeId;
        }

        /**
         * Build call for getCourtTypeObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtTypeObjectCall(courtTypeId, _callback);
        }


        /**
         * Execute getCourtTypeObject request
         * @return CourtType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtType execute() throws ApiException {
            ApiResponse<CourtType> localVarResp = getCourtTypeObjectWithHttpInfo(courtTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtTypeObject request with HTTP info returned
         * @return ApiResponse&lt;CourtType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtType> executeWithHttpInfo() throws ApiException {
            return getCourtTypeObjectWithHttpInfo(courtTypeId);
        }

        /**
         * Execute getCourtTypeObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtType> _callback) throws ApiException {
            return getCourtTypeObjectAsync(courtTypeId, _callback);
        }
    }

    /**
     * Court Type Object for given courtTypeId.
     * Retrieve the information concerning the specific court type. 
     * @param courtTypeId The courtTypeId value of the court type to be retrieved. (required)
     * @return GetCourtTypeObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtTypeObjectRequestBuilder getCourtTypeObject(String courtTypeId) throws IllegalArgumentException {
        if (courtTypeId == null) throw new IllegalArgumentException("\"courtTypeId\" is required but got null");
            if (courtTypeId != null && courtTypeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtTypeId. Length must be greater than or equal to 18.");
            }

        return new GetCourtTypeObjectRequestBuilder(courtTypeId);
    }
    private okhttp3.Call getCourtTypesCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtTypesValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCourtTypesCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtTypeResponse> getCourtTypesWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCourtTypesValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtTypesAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CourtTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtTypesValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtTypesRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCourtTypesRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression that sets forth the criteria concerning the court type or court types. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt;  (optional)
         * @return GetCourtTypesRequestBuilder
         */
        public GetCourtTypesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCourtTypesRequestBuilder
         */
        public GetCourtTypesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCourtTypesRequestBuilder
         */
        public GetCourtTypesRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCourtTypesRequestBuilder
         */
        public GetCourtTypesRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCourtTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtTypesCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCourtTypes request
         * @return CourtTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtTypeResponse execute() throws ApiException {
            ApiResponse<CourtTypeResponse> localVarResp = getCourtTypesWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtTypes request with HTTP info returned
         * @return ApiResponse&lt;CourtTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtTypeResponse> executeWithHttpInfo() throws ApiException {
            return getCourtTypesWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCourtTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtTypeResponse> _callback) throws ApiException {
            return getCourtTypesAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Court Type Objects.
     * Retrieve court types recognized by UniCourt.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtTypeQueryObject 
     * @return GetCourtTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtTypesRequestBuilder getCourtTypes() throws IllegalArgumentException {
        return new GetCourtTypesRequestBuilder();
    }
    private okhttp3.Call getCourtsCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/court";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtsValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getCourtsCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtResponse> getCourtsWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCourtsValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtsAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CourtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtsValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtsRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCourtsRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression that sets forth the criteria concerning the court or courts to be retrieved. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt;  (optional)
         * @return GetCourtsRequestBuilder
         */
        public GetCourtsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCourtsRequestBuilder
         */
        public GetCourtsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCourtsRequestBuilder
         */
        public GetCourtsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCourtsRequestBuilder
         */
        public GetCourtsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCourts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtsCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCourts request
         * @return CourtResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtResponse execute() throws ApiException {
            ApiResponse<CourtResponse> localVarResp = getCourtsWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourts request with HTTP info returned
         * @return ApiResponse&lt;CourtResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtResponse> executeWithHttpInfo() throws ApiException {
            return getCourtsWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getCourts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtResponse> _callback) throws ApiException {
            return getCourtsAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Court Objects.
     * Retrieve information about a specified court or courts.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtQueryObject 
     * @return GetCourtsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtsRequestBuilder getCourts() throws IllegalArgumentException {
        return new GetCourtsRequestBuilder();
    }
    private okhttp3.Call getCourtsByLocationCall(String courtLocationId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtLocation/{courtLocationId}/courts"
            .replace("{" + "courtLocationId" + "}", localVarApiClient.escapeString(courtLocationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCourtsByLocationValidateBeforeCall(String courtLocationId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtLocationId' is set
        if (courtLocationId == null) {
            throw new ApiException("Missing the required parameter 'courtLocationId' when calling getCourtsByLocation(Async)");
        }

        return getCourtsByLocationCall(courtLocationId, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtResponse> getCourtsByLocationWithHttpInfo(String courtLocationId, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getCourtsByLocationValidateBeforeCall(courtLocationId, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCourtsByLocationAsync(String courtLocationId, Integer pageNumber, String sort, String order, final ApiCallback<CourtResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCourtsByLocationValidateBeforeCall(courtLocationId, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCourtsByLocationRequestBuilder {
        private final String courtLocationId;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetCourtsByLocationRequestBuilder(String courtLocationId) {
            this.courtLocationId = courtLocationId;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetCourtsByLocationRequestBuilder
         */
        public GetCourtsByLocationRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetCourtsByLocationRequestBuilder
         */
        public GetCourtsByLocationRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetCourtsByLocationRequestBuilder
         */
        public GetCourtsByLocationRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getCourtsByLocation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCourtsByLocationCall(courtLocationId, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getCourtsByLocation request
         * @return CourtResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtResponse execute() throws ApiException {
            ApiResponse<CourtResponse> localVarResp = getCourtsByLocationWithHttpInfo(courtLocationId, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCourtsByLocation request with HTTP info returned
         * @return ApiResponse&lt;CourtResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtResponse> executeWithHttpInfo() throws ApiException {
            return getCourtsByLocationWithHttpInfo(courtLocationId, pageNumber, sort, order);
        }

        /**
         * Execute getCourtsByLocation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtResponse> _callback) throws ApiException {
            return getCourtsByLocationAsync(courtLocationId, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Associated Court for given Court Location.
     * Retrieve the courts associated with the specified court location. 
     * @param courtLocationId The courtLocationId value of the court location for which courts are to be retrieved. (required)
     * @return GetCourtsByLocationRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetCourtsByLocationRequestBuilder getCourtsByLocation(String courtLocationId) throws IllegalArgumentException {
        if (courtLocationId == null) throw new IllegalArgumentException("\"courtLocationId\" is required but got null");
            if (courtLocationId != null && courtLocationId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtLocationId. Length must be greater than or equal to 18.");
            }

        return new GetCourtsByLocationRequestBuilder(courtLocationId);
    }
    private okhttp3.Call getJudgeTypeObjectCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/judgeType";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJudgeTypeObjectValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getJudgeTypeObjectCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<JudgeTypeResponse> getJudgeTypeObjectWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getJudgeTypeObjectValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<JudgeTypeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJudgeTypeObjectAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<JudgeTypeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJudgeTypeObjectValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<JudgeTypeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJudgeTypeObjectRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetJudgeTypeObjectRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the judge type.&lt;/a&gt;  (optional)
         * @return GetJudgeTypeObjectRequestBuilder
         */
        public GetJudgeTypeObjectRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetJudgeTypeObjectRequestBuilder
         */
        public GetJudgeTypeObjectRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetJudgeTypeObjectRequestBuilder
         */
        public GetJudgeTypeObjectRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetJudgeTypeObjectRequestBuilder
         */
        public GetJudgeTypeObjectRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getJudgeTypeObject
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJudgeTypeObjectCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getJudgeTypeObject request
         * @return JudgeTypeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JudgeTypeResponse execute() throws ApiException {
            ApiResponse<JudgeTypeResponse> localVarResp = getJudgeTypeObjectWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJudgeTypeObject request with HTTP info returned
         * @return ApiResponse&lt;JudgeTypeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JudgeTypeResponse> executeWithHttpInfo() throws ApiException {
            return getJudgeTypeObjectWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getJudgeTypeObject request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JudgeTypeResponse> _callback) throws ApiException {
            return getJudgeTypeObjectAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Judge Type Object.
     * Retrieve a judge type using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; JudgeTypeQueryObject 
     * @return GetJudgeTypeObjectRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetJudgeTypeObjectRequestBuilder getJudgeTypeObject() throws IllegalArgumentException {
        return new GetJudgeTypeObjectRequestBuilder();
    }
    private okhttp3.Call getJudgeTypeObjectByIdCall(String judgeTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/judgeType/{judgeTypeId}"
            .replace("{" + "judgeTypeId" + "}", localVarApiClient.escapeString(judgeTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJudgeTypeObjectByIdValidateBeforeCall(String judgeTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'judgeTypeId' is set
        if (judgeTypeId == null) {
            throw new ApiException("Missing the required parameter 'judgeTypeId' when calling getJudgeTypeObjectById(Async)");
        }

        return getJudgeTypeObjectByIdCall(judgeTypeId, _callback);

    }


    private ApiResponse<JudgeType> getJudgeTypeObjectByIdWithHttpInfo(String judgeTypeId) throws ApiException {
        okhttp3.Call localVarCall = getJudgeTypeObjectByIdValidateBeforeCall(judgeTypeId, null);
        Type localVarReturnType = new TypeToken<JudgeType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJudgeTypeObjectByIdAsync(String judgeTypeId, final ApiCallback<JudgeType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJudgeTypeObjectByIdValidateBeforeCall(judgeTypeId, _callback);
        Type localVarReturnType = new TypeToken<JudgeType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJudgeTypeObjectByIdRequestBuilder {
        private final String judgeTypeId;

        private GetJudgeTypeObjectByIdRequestBuilder(String judgeTypeId) {
            this.judgeTypeId = judgeTypeId;
        }

        /**
         * Build call for getJudgeTypeObjectById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJudgeTypeObjectByIdCall(judgeTypeId, _callback);
        }


        /**
         * Execute getJudgeTypeObjectById request
         * @return JudgeType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JudgeType execute() throws ApiException {
            ApiResponse<JudgeType> localVarResp = getJudgeTypeObjectByIdWithHttpInfo(judgeTypeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJudgeTypeObjectById request with HTTP info returned
         * @return ApiResponse&lt;JudgeType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JudgeType> executeWithHttpInfo() throws ApiException {
            return getJudgeTypeObjectByIdWithHttpInfo(judgeTypeId);
        }

        /**
         * Execute getJudgeTypeObjectById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JudgeType> _callback) throws ApiException {
            return getJudgeTypeObjectByIdAsync(judgeTypeId, _callback);
        }
    }

    /**
     * Judge Type Object for the given judgeTypeId.
     * Retrieve the specified judge type. 
     * @param judgeTypeId The judgeTypeId of the desired judge type. (required)
     * @return GetJudgeTypeObjectByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetJudgeTypeObjectByIdRequestBuilder getJudgeTypeObjectById(String judgeTypeId) throws IllegalArgumentException {
        if (judgeTypeId == null) throw new IllegalArgumentException("\"judgeTypeId\" is required but got null");
            if (judgeTypeId != null && judgeTypeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for judgeTypeId. Length must be greater than or equal to 18.");
            }

        return new GetJudgeTypeObjectByIdRequestBuilder(judgeTypeId);
    }
    private okhttp3.Call getJurisdictionGeoCall(String jurisdictionGeoId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/jurisdictionGeo/{jurisdictionGeoId}"
            .replace("{" + "jurisdictionGeoId" + "}", localVarApiClient.escapeString(jurisdictionGeoId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJurisdictionGeoValidateBeforeCall(String jurisdictionGeoId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jurisdictionGeoId' is set
        if (jurisdictionGeoId == null) {
            throw new ApiException("Missing the required parameter 'jurisdictionGeoId' when calling getJurisdictionGeo(Async)");
        }

        return getJurisdictionGeoCall(jurisdictionGeoId, _callback);

    }


    private ApiResponse<JurisdictionGeo> getJurisdictionGeoWithHttpInfo(String jurisdictionGeoId) throws ApiException {
        okhttp3.Call localVarCall = getJurisdictionGeoValidateBeforeCall(jurisdictionGeoId, null);
        Type localVarReturnType = new TypeToken<JurisdictionGeo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJurisdictionGeoAsync(String jurisdictionGeoId, final ApiCallback<JurisdictionGeo> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJurisdictionGeoValidateBeforeCall(jurisdictionGeoId, _callback);
        Type localVarReturnType = new TypeToken<JurisdictionGeo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJurisdictionGeoRequestBuilder {
        private final String jurisdictionGeoId;

        private GetJurisdictionGeoRequestBuilder(String jurisdictionGeoId) {
            this.jurisdictionGeoId = jurisdictionGeoId;
        }

        /**
         * Build call for getJurisdictionGeo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJurisdictionGeoCall(jurisdictionGeoId, _callback);
        }


        /**
         * Execute getJurisdictionGeo request
         * @return JurisdictionGeo
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JurisdictionGeo execute() throws ApiException {
            ApiResponse<JurisdictionGeo> localVarResp = getJurisdictionGeoWithHttpInfo(jurisdictionGeoId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJurisdictionGeo request with HTTP info returned
         * @return ApiResponse&lt;JurisdictionGeo&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JurisdictionGeo> executeWithHttpInfo() throws ApiException {
            return getJurisdictionGeoWithHttpInfo(jurisdictionGeoId);
        }

        /**
         * Execute getJurisdictionGeo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JurisdictionGeo> _callback) throws ApiException {
            return getJurisdictionGeoAsync(jurisdictionGeoId, _callback);
        }
    }

    /**
     * Jurisdiction Geo Object for given Jurisdiction Geo Id.
     * Retrieve the specified jurisdiction geography. 
     * @param jurisdictionGeoId The jurisdictionGeoId value of the desired jurisdiction geography. (required)
     * @return GetJurisdictionGeoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetJurisdictionGeoRequestBuilder getJurisdictionGeo(String jurisdictionGeoId) throws IllegalArgumentException {
        if (jurisdictionGeoId == null) throw new IllegalArgumentException("\"jurisdictionGeoId\" is required but got null");
            if (jurisdictionGeoId != null && jurisdictionGeoId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for jurisdictionGeoId. Length must be greater than or equal to 18.");
            }

        return new GetJurisdictionGeoRequestBuilder(jurisdictionGeoId);
    }
    private okhttp3.Call getJurisdictionGeoForCourtCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/jurisdictionGeo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJurisdictionGeoForCourtValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getJurisdictionGeoForCourtCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<JurisdictionGeoResponse> getJurisdictionGeoForCourtWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getJurisdictionGeoForCourtValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<JurisdictionGeoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJurisdictionGeoForCourtAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<JurisdictionGeoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJurisdictionGeoForCourtValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<JurisdictionGeoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJurisdictionGeoForCourtRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetJurisdictionGeoForCourtRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired jurisdiction geography. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt;  (optional)
         * @return GetJurisdictionGeoForCourtRequestBuilder
         */
        public GetJurisdictionGeoForCourtRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetJurisdictionGeoForCourtRequestBuilder
         */
        public GetJurisdictionGeoForCourtRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to state)
         * @return GetJurisdictionGeoForCourtRequestBuilder
         */
        public GetJurisdictionGeoForCourtRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetJurisdictionGeoForCourtRequestBuilder
         */
        public GetJurisdictionGeoForCourtRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getJurisdictionGeoForCourt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJurisdictionGeoForCourtCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getJurisdictionGeoForCourt request
         * @return JurisdictionGeoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JurisdictionGeoResponse execute() throws ApiException {
            ApiResponse<JurisdictionGeoResponse> localVarResp = getJurisdictionGeoForCourtWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJurisdictionGeoForCourt request with HTTP info returned
         * @return ApiResponse&lt;JurisdictionGeoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JurisdictionGeoResponse> executeWithHttpInfo() throws ApiException {
            return getJurisdictionGeoForCourtWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getJurisdictionGeoForCourt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JurisdictionGeoResponse> _callback) throws ApiException {
            return getJurisdictionGeoForCourtAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Jurisdiction Geo Object.
     * Retrieve one or more jurisdiction geographies using a keyword expression.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; JurisdictionGeoQueryObject 
     * @return GetJurisdictionGeoForCourtRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetJurisdictionGeoForCourtRequestBuilder getJurisdictionGeoForCourt() throws IllegalArgumentException {
        return new GetJurisdictionGeoForCourtRequestBuilder();
    }
    private okhttp3.Call getJurisdictionGeoObjectsForCourtCall(String courtId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/court/{courtId}/jurisdictionGeo"
            .replace("{" + "courtId" + "}", localVarApiClient.escapeString(courtId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJurisdictionGeoObjectsForCourtValidateBeforeCall(String courtId, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling getJurisdictionGeoObjectsForCourt(Async)");
        }

        return getJurisdictionGeoObjectsForCourtCall(courtId, pageNumber, sort, order, _callback);

    }


    private ApiResponse<JurisdictionGeoResponse> getJurisdictionGeoObjectsForCourtWithHttpInfo(String courtId, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getJurisdictionGeoObjectsForCourtValidateBeforeCall(courtId, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<JurisdictionGeoResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJurisdictionGeoObjectsForCourtAsync(String courtId, Integer pageNumber, String sort, String order, final ApiCallback<JurisdictionGeoResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJurisdictionGeoObjectsForCourtValidateBeforeCall(courtId, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<JurisdictionGeoResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJurisdictionGeoObjectsForCourtRequestBuilder {
        private final String courtId;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetJurisdictionGeoObjectsForCourtRequestBuilder(String courtId) {
            this.courtId = courtId;
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetJurisdictionGeoObjectsForCourtRequestBuilder
         */
        public GetJurisdictionGeoObjectsForCourtRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to state)
         * @return GetJurisdictionGeoObjectsForCourtRequestBuilder
         */
        public GetJurisdictionGeoObjectsForCourtRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetJurisdictionGeoObjectsForCourtRequestBuilder
         */
        public GetJurisdictionGeoObjectsForCourtRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getJurisdictionGeoObjectsForCourt
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJurisdictionGeoObjectsForCourtCall(courtId, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getJurisdictionGeoObjectsForCourt request
         * @return JurisdictionGeoResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public JurisdictionGeoResponse execute() throws ApiException {
            ApiResponse<JurisdictionGeoResponse> localVarResp = getJurisdictionGeoObjectsForCourtWithHttpInfo(courtId, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJurisdictionGeoObjectsForCourt request with HTTP info returned
         * @return ApiResponse&lt;JurisdictionGeoResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JurisdictionGeoResponse> executeWithHttpInfo() throws ApiException {
            return getJurisdictionGeoObjectsForCourtWithHttpInfo(courtId, pageNumber, sort, order);
        }

        /**
         * Execute getJurisdictionGeoObjectsForCourt request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JurisdictionGeoResponse> _callback) throws ApiException {
            return getJurisdictionGeoObjectsForCourtAsync(courtId, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Jurisdiction Geo Objects for given courtId.
     * Retrieve the jurisdiction geography object for the specified court. 
     * @param courtId The courtId value of the target court. (required)
     * @return GetJurisdictionGeoObjectsForCourtRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetJurisdictionGeoObjectsForCourtRequestBuilder getJurisdictionGeoObjectsForCourt(String courtId) throws IllegalArgumentException {
        if (courtId == null) throw new IllegalArgumentException("\"courtId\" is required but got null");
            if (courtId != null && courtId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
            }

        return new GetJurisdictionGeoObjectsForCourtRequestBuilder(courtId);
    }
    private okhttp3.Call getPartyRoleCall(String partyRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/partyRole/{partyRoleId}"
            .replace("{" + "partyRoleId" + "}", localVarApiClient.escapeString(partyRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartyRoleValidateBeforeCall(String partyRoleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partyRoleId' is set
        if (partyRoleId == null) {
            throw new ApiException("Missing the required parameter 'partyRoleId' when calling getPartyRole(Async)");
        }

        return getPartyRoleCall(partyRoleId, _callback);

    }


    private ApiResponse<PartyRole> getPartyRoleWithHttpInfo(String partyRoleId) throws ApiException {
        okhttp3.Call localVarCall = getPartyRoleValidateBeforeCall(partyRoleId, null);
        Type localVarReturnType = new TypeToken<PartyRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPartyRoleAsync(String partyRoleId, final ApiCallback<PartyRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartyRoleValidateBeforeCall(partyRoleId, _callback);
        Type localVarReturnType = new TypeToken<PartyRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPartyRoleRequestBuilder {
        private final String partyRoleId;

        private GetPartyRoleRequestBuilder(String partyRoleId) {
            this.partyRoleId = partyRoleId;
        }

        /**
         * Build call for getPartyRole
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPartyRoleCall(partyRoleId, _callback);
        }


        /**
         * Execute getPartyRole request
         * @return PartyRole
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PartyRole execute() throws ApiException {
            ApiResponse<PartyRole> localVarResp = getPartyRoleWithHttpInfo(partyRoleId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPartyRole request with HTTP info returned
         * @return ApiResponse&lt;PartyRole&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartyRole> executeWithHttpInfo() throws ApiException {
            return getPartyRoleWithHttpInfo(partyRoleId);
        }

        /**
         * Execute getPartyRole request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartyRole> _callback) throws ApiException {
            return getPartyRoleAsync(partyRoleId, _callback);
        }
    }

    /**
     * Party Role Object.
     * Retrieve the specified party role. 
     * @param partyRoleId The partyRoleId value of the desired party role. (required)
     * @return GetPartyRoleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPartyRoleRequestBuilder getPartyRole(String partyRoleId) throws IllegalArgumentException {
        if (partyRoleId == null) throw new IllegalArgumentException("\"partyRoleId\" is required but got null");
            if (partyRoleId != null && partyRoleId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for partyRoleId. Length must be greater than or equal to 18.");
            }

        return new GetPartyRoleRequestBuilder(partyRoleId);
    }
    private okhttp3.Call getPartyRoleGroupCall(String partyRoleGroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/partyRoleGroup/{partyRoleGroupId}"
            .replace("{" + "partyRoleGroupId" + "}", localVarApiClient.escapeString(partyRoleGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartyRoleGroupValidateBeforeCall(String partyRoleGroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partyRoleGroupId' is set
        if (partyRoleGroupId == null) {
            throw new ApiException("Missing the required parameter 'partyRoleGroupId' when calling getPartyRoleGroup(Async)");
        }

        return getPartyRoleGroupCall(partyRoleGroupId, _callback);

    }


    private ApiResponse<PartyRoleGroup> getPartyRoleGroupWithHttpInfo(String partyRoleGroupId) throws ApiException {
        okhttp3.Call localVarCall = getPartyRoleGroupValidateBeforeCall(partyRoleGroupId, null);
        Type localVarReturnType = new TypeToken<PartyRoleGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPartyRoleGroupAsync(String partyRoleGroupId, final ApiCallback<PartyRoleGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartyRoleGroupValidateBeforeCall(partyRoleGroupId, _callback);
        Type localVarReturnType = new TypeToken<PartyRoleGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPartyRoleGroupRequestBuilder {
        private final String partyRoleGroupId;

        private GetPartyRoleGroupRequestBuilder(String partyRoleGroupId) {
            this.partyRoleGroupId = partyRoleGroupId;
        }

        /**
         * Build call for getPartyRoleGroup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPartyRoleGroupCall(partyRoleGroupId, _callback);
        }


        /**
         * Execute getPartyRoleGroup request
         * @return PartyRoleGroup
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PartyRoleGroup execute() throws ApiException {
            ApiResponse<PartyRoleGroup> localVarResp = getPartyRoleGroupWithHttpInfo(partyRoleGroupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPartyRoleGroup request with HTTP info returned
         * @return ApiResponse&lt;PartyRoleGroup&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartyRoleGroup> executeWithHttpInfo() throws ApiException {
            return getPartyRoleGroupWithHttpInfo(partyRoleGroupId);
        }

        /**
         * Execute getPartyRoleGroup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartyRoleGroup> _callback) throws ApiException {
            return getPartyRoleGroupAsync(partyRoleGroupId, _callback);
        }
    }

    /**
     * Party Role Group Object.
     * Retrieve the specified party role group. 
     * @param partyRoleGroupId The partyRoleGroupId value of the desired party role group. (required)
     * @return GetPartyRoleGroupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPartyRoleGroupRequestBuilder getPartyRoleGroup(String partyRoleGroupId) throws IllegalArgumentException {
        if (partyRoleGroupId == null) throw new IllegalArgumentException("\"partyRoleGroupId\" is required but got null");
            if (partyRoleGroupId != null && partyRoleGroupId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for partyRoleGroupId. Length must be greater than or equal to 18.");
            }

        return new GetPartyRoleGroupRequestBuilder(partyRoleGroupId);
    }
    private okhttp3.Call getPartyRoleGroupsCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/partyRoleGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartyRoleGroupsValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getPartyRoleGroupsCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<PartyRoleGroupResponse> getPartyRoleGroupsWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getPartyRoleGroupsValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<PartyRoleGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPartyRoleGroupsAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<PartyRoleGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartyRoleGroupsValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<PartyRoleGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPartyRoleGroupsRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetPartyRoleGroupsRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired party role group.&lt;/a&gt;  (optional)
         * @return GetPartyRoleGroupsRequestBuilder
         */
        public GetPartyRoleGroupsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetPartyRoleGroupsRequestBuilder
         */
        public GetPartyRoleGroupsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetPartyRoleGroupsRequestBuilder
         */
        public GetPartyRoleGroupsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetPartyRoleGroupsRequestBuilder
         */
        public GetPartyRoleGroupsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getPartyRoleGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPartyRoleGroupsCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getPartyRoleGroups request
         * @return PartyRoleGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PartyRoleGroupResponse execute() throws ApiException {
            ApiResponse<PartyRoleGroupResponse> localVarResp = getPartyRoleGroupsWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPartyRoleGroups request with HTTP info returned
         * @return ApiResponse&lt;PartyRoleGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartyRoleGroupResponse> executeWithHttpInfo() throws ApiException {
            return getPartyRoleGroupsWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getPartyRoleGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartyRoleGroupResponse> _callback) throws ApiException {
            return getPartyRoleGroupsAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Party Role Group Object.
     * Retrieve a party role group using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; PartyRoleGroupQueryObject 
     * @return GetPartyRoleGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPartyRoleGroupsRequestBuilder getPartyRoleGroups() throws IllegalArgumentException {
        return new GetPartyRoleGroupsRequestBuilder();
    }
    private okhttp3.Call getPartyRolesByKeywordCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/partyRole";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartyRolesByKeywordValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return getPartyRolesByKeywordCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<PartyRoleResponse> getPartyRolesByKeywordWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = getPartyRolesByKeywordValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<PartyRoleResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPartyRolesByKeywordAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<PartyRoleResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartyRolesByKeywordValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<PartyRoleResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPartyRolesByKeywordRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private GetPartyRolesByKeywordRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression targeting the desired party role.&lt;/a&gt;  (optional)
         * @return GetPartyRolesByKeywordRequestBuilder
         */
        public GetPartyRolesByKeywordRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return GetPartyRolesByKeywordRequestBuilder
         */
        public GetPartyRolesByKeywordRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return GetPartyRolesByKeywordRequestBuilder
         */
        public GetPartyRolesByKeywordRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return GetPartyRolesByKeywordRequestBuilder
         */
        public GetPartyRolesByKeywordRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for getPartyRolesByKeyword
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPartyRolesByKeywordCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute getPartyRolesByKeyword request
         * @return PartyRoleResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public PartyRoleResponse execute() throws ApiException {
            ApiResponse<PartyRoleResponse> localVarResp = getPartyRolesByKeywordWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPartyRolesByKeyword request with HTTP info returned
         * @return ApiResponse&lt;PartyRoleResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartyRoleResponse> executeWithHttpInfo() throws ApiException {
            return getPartyRolesByKeywordWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute getPartyRolesByKeyword request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartyRoleResponse> _callback) throws ApiException {
            return getPartyRolesByKeywordAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Party Role Object.
     * Retrieve a party role using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; PartyRoleQueryObject 
     * @return GetPartyRolesByKeywordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetPartyRolesByKeywordRequestBuilder getPartyRolesByKeyword() throws IllegalArgumentException {
        return new GetPartyRolesByKeywordRequestBuilder();
    }
    private okhttp3.Call listAreaOfLawCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/areaOfLaw";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAreaOfLawValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return listAreaOfLawCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<AreaOfLawResponse> listAreaOfLawWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = listAreaOfLawValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<AreaOfLawResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAreaOfLawAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<AreaOfLawResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAreaOfLawValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<AreaOfLawResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAreaOfLawRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private ListAreaOfLawRequestBuilder() {
        }

        /**
         * Set q
         * @param q Retrieve one or more areas of law using a keyword expression. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt;  (optional)
         * @return ListAreaOfLawRequestBuilder
         */
        public ListAreaOfLawRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return ListAreaOfLawRequestBuilder
         */
        public ListAreaOfLawRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return ListAreaOfLawRequestBuilder
         */
        public ListAreaOfLawRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return ListAreaOfLawRequestBuilder
         */
        public ListAreaOfLawRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for listAreaOfLaw
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAreaOfLawCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute listAreaOfLaw request
         * @return AreaOfLawResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public AreaOfLawResponse execute() throws ApiException {
            ApiResponse<AreaOfLawResponse> localVarResp = listAreaOfLawWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAreaOfLaw request with HTTP info returned
         * @return ApiResponse&lt;AreaOfLawResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AreaOfLawResponse> executeWithHttpInfo() throws ApiException {
            return listAreaOfLawWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute listAreaOfLaw request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AreaOfLawResponse> _callback) throws ApiException {
            return listAreaOfLawAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * AreaOfLaw Object.
     * The keyword expression targeting the desired area of law.   ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; AreaOfLawQueryObject 
     * @return ListAreaOfLawRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListAreaOfLawRequestBuilder listAreaOfLaw() throws IllegalArgumentException {
        return new ListAreaOfLawRequestBuilder();
    }
    private okhttp3.Call listCaseTypeGroupsCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/caseTypeGroup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCaseTypeGroupsValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return listCaseTypeGroupsCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CaseTypeGroupResponse> listCaseTypeGroupsWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = listCaseTypeGroupsValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CaseTypeGroupResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCaseTypeGroupsAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CaseTypeGroupResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCaseTypeGroupsValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CaseTypeGroupResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCaseTypeGroupsRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private ListCaseTypeGroupsRequestBuilder() {
        }

        /**
         * Set q
         * @param q Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.&lt;/a&gt;  (optional)
         * @return ListCaseTypeGroupsRequestBuilder
         */
        public ListCaseTypeGroupsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return ListCaseTypeGroupsRequestBuilder
         */
        public ListCaseTypeGroupsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return ListCaseTypeGroupsRequestBuilder
         */
        public ListCaseTypeGroupsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return ListCaseTypeGroupsRequestBuilder
         */
        public ListCaseTypeGroupsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for listCaseTypeGroups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCaseTypeGroupsCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute listCaseTypeGroups request
         * @return CaseTypeGroupResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CaseTypeGroupResponse execute() throws ApiException {
            ApiResponse<CaseTypeGroupResponse> localVarResp = listCaseTypeGroupsWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCaseTypeGroups request with HTTP info returned
         * @return ApiResponse&lt;CaseTypeGroupResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseTypeGroupResponse> executeWithHttpInfo() throws ApiException {
            return listCaseTypeGroupsWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute listCaseTypeGroups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseTypeGroupResponse> _callback) throws ApiException {
            return listCaseTypeGroupsAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * CaseTypeGroup Object.
     * Retrieve one or more case type groups using a keyword expression. Keyword expressions should be constructed according to the rules given above.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------| | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CaseTypeGroupQueryObject 
     * @return ListCaseTypeGroupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCaseTypeGroupsRequestBuilder listCaseTypeGroups() throws IllegalArgumentException {
        return new ListCaseTypeGroupsRequestBuilder();
    }
    private okhttp3.Call listCourtSystemsCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/masterData/courtSystem";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCourtSystemsValidateBeforeCall(String q, Integer pageNumber, String sort, String order, final ApiCallback _callback) throws ApiException {
        return listCourtSystemsCall(q, pageNumber, sort, order, _callback);

    }


    private ApiResponse<CourtSystemResponse> listCourtSystemsWithHttpInfo(String q, Integer pageNumber, String sort, String order) throws ApiException {
        okhttp3.Call localVarCall = listCourtSystemsValidateBeforeCall(q, pageNumber, sort, order, null);
        Type localVarReturnType = new TypeToken<CourtSystemResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCourtSystemsAsync(String q, Integer pageNumber, String sort, String order, final ApiCallback<CourtSystemResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCourtSystemsValidateBeforeCall(q, pageNumber, sort, order, _callback);
        Type localVarReturnType = new TypeToken<CourtSystemResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCourtSystemsRequestBuilder {
        private String q;
        private Integer pageNumber;
        private String sort;
        private String order;

        private ListCourtSystemsRequestBuilder() {
        }

        /**
         * Set q
         * @param q The keyword expression that sets forth the criteria concerning the court system or court systems. Keyword expressions should be constructed according to the rules shown above.&lt;/a&gt;  (optional)
         * @return ListCourtSystemsRequestBuilder
         */
        public ListCourtSystemsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved. - minimum: 1 - maximum: 100  (optional)
         * @return ListCourtSystemsRequestBuilder
         */
        public ListCourtSystemsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set sort
         * @param sort The field according to which search results are to be sorted. (optional, default to name)
         * @return ListCourtSystemsRequestBuilder
         */
        public ListCourtSystemsRequestBuilder sort(String sort) {
            this.sort = sort;
            return this;
        }
        
        /**
         * Set order
         * @param order Whether search results are to be shown in ascending or descending order. (optional, default to asc)
         * @return ListCourtSystemsRequestBuilder
         */
        public ListCourtSystemsRequestBuilder order(String order) {
            this.order = order;
            return this;
        }
        
        /**
         * Build call for listCourtSystems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCourtSystemsCall(q, pageNumber, sort, order, _callback);
        }


        /**
         * Execute listCourtSystems request
         * @return CourtSystemResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public CourtSystemResponse execute() throws ApiException {
            ApiResponse<CourtSystemResponse> localVarResp = listCourtSystemsWithHttpInfo(q, pageNumber, sort, order);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCourtSystems request with HTTP info returned
         * @return ApiResponse&lt;CourtSystemResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CourtSystemResponse> executeWithHttpInfo() throws ApiException {
            return listCourtSystemsWithHttpInfo(q, pageNumber, sort, order);
        }

        /**
         * Execute listCourtSystems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CourtSystemResponse> _callback) throws ApiException {
            return listCourtSystemsAsync(q, pageNumber, sort, order, _callback);
        }
    }

    /**
     * Court System Objects.
     * Retrieve information about the specified court system or court systems.  ## Logical Operators | Connector | Description  | Example | | ------| ------|------|         | **AND** |Find data containing all connected terms.|**google AND facebook**| | **OR**  |Find data containing any connected term.| **order OR decision**| | **NOT** |Exclude data.| **google NOT apple**.| | **“[phrase]”** |Find an exact phrase.| **\&quot;Google Inc”** | | **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|  ### All Filter Query parameters supported for this API can be found in below schema section. Schema --&gt; CourtSystemQueryObject 
     * @return ListCourtSystemsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ListCourtSystemsRequestBuilder listCourtSystems() throws IllegalArgumentException {
        return new ListCourtSystemsRequestBuilder();
    }
}
