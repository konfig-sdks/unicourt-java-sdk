/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssociatedNormAttorneyResponse;
import com.konfigthis.client.model.AssociatedNormJudgeResponse;
import com.konfigthis.client.model.AssociatedNormPartyResponse;
import com.konfigthis.client.model.NormLawFirm;
import com.konfigthis.client.model.NormLawFirmSearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LawFirmAnalyticsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LawFirmAnalyticsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LawFirmAnalyticsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssociatedNormJudgesCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirm/{normLawFirmId}/associatedNormJudges"
            .replace("{" + "normLawFirmId" + "}", localVarApiClient.escapeString(normLawFirmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociatedNormJudgesValidateBeforeCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normLawFirmId' is set
        if (normLawFirmId == null) {
            throw new ApiException("Missing the required parameter 'normLawFirmId' when calling getAssociatedNormJudges(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getAssociatedNormJudges(Async)");
        }

        return getAssociatedNormJudgesCall(normLawFirmId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormJudgeResponse> getAssociatedNormJudgesWithHttpInfo(String normLawFirmId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getAssociatedNormJudgesValidateBeforeCall(normLawFirmId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormJudgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssociatedNormJudgesAsync(String normLawFirmId, Integer pageNumber, String q, final ApiCallback<AssociatedNormJudgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociatedNormJudgesValidateBeforeCall(normLawFirmId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormJudgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssociatedNormJudgesRequestBuilder {
        private final String normLawFirmId;
        private final Integer pageNumber;
        private String q;

        private GetAssociatedNormJudgesRequestBuilder(String normLawFirmId, Integer pageNumber) {
            this.normLawFirmId = normLawFirmId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetAssociatedNormJudgesRequestBuilder
         */
        public GetAssociatedNormJudgesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getAssociatedNormJudges
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssociatedNormJudgesCall(normLawFirmId, pageNumber, q, _callback);
        }


        /**
         * Execute getAssociatedNormJudges request
         * @return AssociatedNormJudgeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormJudgeResponse execute() throws ApiException {
            ApiResponse<AssociatedNormJudgeResponse> localVarResp = getAssociatedNormJudgesWithHttpInfo(normLawFirmId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssociatedNormJudges request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormJudgeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormJudgeResponse> executeWithHttpInfo() throws ApiException {
            return getAssociatedNormJudgesWithHttpInfo(normLawFirmId, pageNumber, q);
        }

        /**
         * Execute getAssociatedNormJudges request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormJudgeResponse> _callback) throws ApiException {
            return getAssociatedNormJudgesAsync(normLawFirmId, pageNumber, q, _callback);
        }
    }

    /**
     * Judges Faced By the Law Firm.
     * Returns list of Judges faced by the Law Firm. &lt;br&gt;&lt;br&gt; ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all judges associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normLawFirmId Norm  ID of the Law Firm.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetAssociatedNormJudgesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssociatedNormJudgesRequestBuilder getAssociatedNormJudges(String normLawFirmId, Integer pageNumber) throws IllegalArgumentException {
        if (normLawFirmId == null) throw new IllegalArgumentException("\"normLawFirmId\" is required but got null");
            if (normLawFirmId != null && normLawFirmId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normLawFirmId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetAssociatedNormJudgesRequestBuilder(normLawFirmId, pageNumber);
    }
    private okhttp3.Call getNormLawFirmByIdCall(String normLawFirmId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirm/{normLawFirmId}"
            .replace("{" + "normLawFirmId" + "}", localVarApiClient.escapeString(normLawFirmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormLawFirmByIdValidateBeforeCall(String normLawFirmId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normLawFirmId' is set
        if (normLawFirmId == null) {
            throw new ApiException("Missing the required parameter 'normLawFirmId' when calling getNormLawFirmById(Async)");
        }

        return getNormLawFirmByIdCall(normLawFirmId, _callback);

    }


    private ApiResponse<NormLawFirm> getNormLawFirmByIdWithHttpInfo(String normLawFirmId) throws ApiException {
        okhttp3.Call localVarCall = getNormLawFirmByIdValidateBeforeCall(normLawFirmId, null);
        Type localVarReturnType = new TypeToken<NormLawFirm>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormLawFirmByIdAsync(String normLawFirmId, final ApiCallback<NormLawFirm> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormLawFirmByIdValidateBeforeCall(normLawFirmId, _callback);
        Type localVarReturnType = new TypeToken<NormLawFirm>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormLawFirmByIdRequestBuilder {
        private final String normLawFirmId;

        private GetNormLawFirmByIdRequestBuilder(String normLawFirmId) {
            this.normLawFirmId = normLawFirmId;
        }

        /**
         * Build call for getNormLawFirmById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormLawFirmByIdCall(normLawFirmId, _callback);
        }


        /**
         * Execute getNormLawFirmById request
         * @return NormLawFirm
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public NormLawFirm execute() throws ApiException {
            ApiResponse<NormLawFirm> localVarResp = getNormLawFirmByIdWithHttpInfo(normLawFirmId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormLawFirmById request with HTTP info returned
         * @return ApiResponse&lt;NormLawFirm&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormLawFirm> executeWithHttpInfo() throws ApiException {
            return getNormLawFirmByIdWithHttpInfo(normLawFirmId);
        }

        /**
         * Execute getNormLawFirmById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormLawFirm> _callback) throws ApiException {
            return getNormLawFirmByIdAsync(normLawFirmId, _callback);
        }
    }

    /**
     * Norm LawFirm Details.
     * The Law Firm API allows you to look up Law Firms by normLawFirmId. 
     * @param normLawFirmId Norm  ID of the Law Firm.   - minimum: 18   - maximum: 18  (required)
     * @return GetNormLawFirmByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetNormLawFirmByIdRequestBuilder getNormLawFirmById(String normLawFirmId) throws IllegalArgumentException {
        if (normLawFirmId == null) throw new IllegalArgumentException("\"normLawFirmId\" is required but got null");
            if (normLawFirmId != null && normLawFirmId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normLawFirmId. Length must be greater than or equal to 18.");
            }

        return new GetNormLawFirmByIdRequestBuilder(normLawFirmId);
    }
    private okhttp3.Call getNormLawFirmSearchResultByIdCall(String normLawFirmSearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirmSearch/{normLawFirmSearchId}"
            .replace("{" + "normLawFirmSearchId" + "}", localVarApiClient.escapeString(normLawFirmSearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormLawFirmSearchResultByIdValidateBeforeCall(String normLawFirmSearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normLawFirmSearchId' is set
        if (normLawFirmSearchId == null) {
            throw new ApiException("Missing the required parameter 'normLawFirmSearchId' when calling getNormLawFirmSearchResultById(Async)");
        }

        return getNormLawFirmSearchResultByIdCall(normLawFirmSearchId, pageNumber, _callback);

    }


    private ApiResponse<NormLawFirmSearchResponse> getNormLawFirmSearchResultByIdWithHttpInfo(String normLawFirmSearchId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getNormLawFirmSearchResultByIdValidateBeforeCall(normLawFirmSearchId, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormLawFirmSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormLawFirmSearchResultByIdAsync(String normLawFirmSearchId, Integer pageNumber, final ApiCallback<NormLawFirmSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormLawFirmSearchResultByIdValidateBeforeCall(normLawFirmSearchId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormLawFirmSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormLawFirmSearchResultByIdRequestBuilder {
        private final String normLawFirmSearchId;
        private Integer pageNumber;

        private GetNormLawFirmSearchResultByIdRequestBuilder(String normLawFirmSearchId) {
            this.normLawFirmSearchId = normLawFirmSearchId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return GetNormLawFirmSearchResultByIdRequestBuilder
         */
        public GetNormLawFirmSearchResultByIdRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getNormLawFirmSearchResultById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormLawFirmSearchResultByIdCall(normLawFirmSearchId, pageNumber, _callback);
        }


        /**
         * Execute getNormLawFirmSearchResultById request
         * @return NormLawFirmSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormLawFirmSearchResponse execute() throws ApiException {
            ApiResponse<NormLawFirmSearchResponse> localVarResp = getNormLawFirmSearchResultByIdWithHttpInfo(normLawFirmSearchId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormLawFirmSearchResultById request with HTTP info returned
         * @return ApiResponse&lt;NormLawFirmSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormLawFirmSearchResponse> executeWithHttpInfo() throws ApiException {
            return getNormLawFirmSearchResultByIdWithHttpInfo(normLawFirmSearchId, pageNumber);
        }

        /**
         * Execute getNormLawFirmSearchResultById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormLawFirmSearchResponse> _callback) throws ApiException {
            return getNormLawFirmSearchResultByIdAsync(normLawFirmSearchId, pageNumber, _callback);
        }
    }

    /**
     * Norm law firm search result for a given normLawFirmSearchId.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormLawFirmSearchQueryObject 
     * @param normLawFirmSearchId Norm law firm search information for the given normLawFirmSearchId. (required)
     * @return GetNormLawFirmSearchResultByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetNormLawFirmSearchResultByIdRequestBuilder getNormLawFirmSearchResultById(String normLawFirmSearchId) throws IllegalArgumentException {
        if (normLawFirmSearchId == null) throw new IllegalArgumentException("\"normLawFirmSearchId\" is required but got null");
            if (normLawFirmSearchId != null && normLawFirmSearchId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normLawFirmSearchId. Length must be greater than or equal to 18.");
            }

        return new GetNormLawFirmSearchResultByIdRequestBuilder(normLawFirmSearchId);
    }
    private okhttp3.Call listAssociatedNormAttorneysCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirm/{normLawFirmId}/associatedNormAttorneys"
            .replace("{" + "normLawFirmId" + "}", localVarApiClient.escapeString(normLawFirmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssociatedNormAttorneysValidateBeforeCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normLawFirmId' is set
        if (normLawFirmId == null) {
            throw new ApiException("Missing the required parameter 'normLawFirmId' when calling listAssociatedNormAttorneys(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAssociatedNormAttorneys(Async)");
        }

        return listAssociatedNormAttorneysCall(normLawFirmId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormAttorneyResponse> listAssociatedNormAttorneysWithHttpInfo(String normLawFirmId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listAssociatedNormAttorneysValidateBeforeCall(normLawFirmId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormAttorneyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssociatedNormAttorneysAsync(String normLawFirmId, Integer pageNumber, String q, final ApiCallback<AssociatedNormAttorneyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssociatedNormAttorneysValidateBeforeCall(normLawFirmId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormAttorneyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssociatedNormAttorneysRequestBuilder {
        private final String normLawFirmId;
        private final Integer pageNumber;
        private String q;

        private ListAssociatedNormAttorneysRequestBuilder(String normLawFirmId, Integer pageNumber) {
            this.normLawFirmId = normLawFirmId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListAssociatedNormAttorneysRequestBuilder
         */
        public ListAssociatedNormAttorneysRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listAssociatedNormAttorneys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssociatedNormAttorneysCall(normLawFirmId, pageNumber, q, _callback);
        }


        /**
         * Execute listAssociatedNormAttorneys request
         * @return AssociatedNormAttorneyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormAttorneyResponse execute() throws ApiException {
            ApiResponse<AssociatedNormAttorneyResponse> localVarResp = listAssociatedNormAttorneysWithHttpInfo(normLawFirmId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssociatedNormAttorneys request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormAttorneyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormAttorneyResponse> executeWithHttpInfo() throws ApiException {
            return listAssociatedNormAttorneysWithHttpInfo(normLawFirmId, pageNumber, q);
        }

        /**
         * Execute listAssociatedNormAttorneys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormAttorneyResponse> _callback) throws ApiException {
            return listAssociatedNormAttorneysAsync(normLawFirmId, pageNumber, q, _callback);
        }
    }

    /**
     * Attorneys working for the Law Firm.
     * Returns a list of Attorneys associated to a Law Firm. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId**  | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **caseFiledDate**  | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt;         ## Example Query Query to get all attorneys associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normLawFirmId Norm  ID of the Law Firm.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListAssociatedNormAttorneysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssociatedNormAttorneysRequestBuilder listAssociatedNormAttorneys(String normLawFirmId, Integer pageNumber) throws IllegalArgumentException {
        if (normLawFirmId == null) throw new IllegalArgumentException("\"normLawFirmId\" is required but got null");
            if (normLawFirmId != null && normLawFirmId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normLawFirmId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListAssociatedNormAttorneysRequestBuilder(normLawFirmId, pageNumber);
    }
    private okhttp3.Call listAssociatedNormPartiesCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirm/{normLawFirmId}/associatedNormParties"
            .replace("{" + "normLawFirmId" + "}", localVarApiClient.escapeString(normLawFirmId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssociatedNormPartiesValidateBeforeCall(String normLawFirmId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normLawFirmId' is set
        if (normLawFirmId == null) {
            throw new ApiException("Missing the required parameter 'normLawFirmId' when calling listAssociatedNormParties(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAssociatedNormParties(Async)");
        }

        return listAssociatedNormPartiesCall(normLawFirmId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormPartyResponse> listAssociatedNormPartiesWithHttpInfo(String normLawFirmId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listAssociatedNormPartiesValidateBeforeCall(normLawFirmId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormPartyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssociatedNormPartiesAsync(String normLawFirmId, Integer pageNumber, String q, final ApiCallback<AssociatedNormPartyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssociatedNormPartiesValidateBeforeCall(normLawFirmId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormPartyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssociatedNormPartiesRequestBuilder {
        private final String normLawFirmId;
        private final Integer pageNumber;
        private String q;

        private ListAssociatedNormPartiesRequestBuilder(String normLawFirmId, Integer pageNumber) {
            this.normLawFirmId = normLawFirmId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListAssociatedNormPartiesRequestBuilder
         */
        public ListAssociatedNormPartiesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listAssociatedNormParties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssociatedNormPartiesCall(normLawFirmId, pageNumber, q, _callback);
        }


        /**
         * Execute listAssociatedNormParties request
         * @return AssociatedNormPartyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormPartyResponse execute() throws ApiException {
            ApiResponse<AssociatedNormPartyResponse> localVarResp = listAssociatedNormPartiesWithHttpInfo(normLawFirmId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssociatedNormParties request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormPartyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormPartyResponse> executeWithHttpInfo() throws ApiException {
            return listAssociatedNormPartiesWithHttpInfo(normLawFirmId, pageNumber, q);
        }

        /**
         * Execute listAssociatedNormParties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormPartyResponse> _callback) throws ApiException {
            return listAssociatedNormPartiesAsync(normLawFirmId, pageNumber, q, _callback);
        }
    }

    /**
     * Parties Represented by the Law Firm.
     * Returns list of Parties represented by the Law Firm. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTKQiA4LJuv54tEj\&quot;,\&quot;CORTV4vCEaKrhystBz\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all parties associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normLawFirmId Norm  ID of the Law Firm.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListAssociatedNormPartiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssociatedNormPartiesRequestBuilder listAssociatedNormParties(String normLawFirmId, Integer pageNumber) throws IllegalArgumentException {
        if (normLawFirmId == null) throw new IllegalArgumentException("\"normLawFirmId\" is required but got null");
            if (normLawFirmId != null && normLawFirmId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normLawFirmId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListAssociatedNormPartiesRequestBuilder(normLawFirmId, pageNumber);
    }
    private okhttp3.Call searchLawFirmsCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normLawFirmSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchLawFirmsValidateBeforeCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return searchLawFirmsCall(q, pageNumber, _callback);

    }


    private ApiResponse<NormLawFirmSearchResponse> searchLawFirmsWithHttpInfo(String q, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchLawFirmsValidateBeforeCall(q, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormLawFirmSearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchLawFirmsAsync(String q, Integer pageNumber, final ApiCallback<NormLawFirmSearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchLawFirmsValidateBeforeCall(q, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormLawFirmSearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchLawFirmsRequestBuilder {
        private String q;
        private Integer pageNumber;

        private SearchLawFirmsRequestBuilder() {
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters.&lt;/a&gt;  (optional)
         * @return SearchLawFirmsRequestBuilder
         */
        public SearchLawFirmsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return SearchLawFirmsRequestBuilder
         */
        public SearchLawFirmsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchLawFirms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchLawFirmsCall(q, pageNumber, _callback);
        }


        /**
         * Execute searchLawFirms request
         * @return NormLawFirmSearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormLawFirmSearchResponse execute() throws ApiException {
            ApiResponse<NormLawFirmSearchResponse> localVarResp = searchLawFirmsWithHttpInfo(q, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchLawFirms request with HTTP info returned
         * @return ApiResponse&lt;NormLawFirmSearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormLawFirmSearchResponse> executeWithHttpInfo() throws ApiException {
            return searchLawFirmsWithHttpInfo(q, pageNumber);
        }

        /**
         * Execute searchLawFirms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormLawFirmSearchResponse> _callback) throws ApiException {
            return searchLawFirmsAsync(q, pageNumber, _callback);
        }
    }

    /**
     * Law firm search.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormLawFirmSearchQueryObject 
     * @return SearchLawFirmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchLawFirmsRequestBuilder searchLawFirms() throws IllegalArgumentException {
        return new SearchLawFirmsRequestBuilder();
    }
}
