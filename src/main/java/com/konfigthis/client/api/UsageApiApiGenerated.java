/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BillingCycleUsageResponse;
import com.konfigthis.client.model.BillingCyclesResponse;
import com.konfigthis.client.model.DailyUsageResponse;
import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class UsageApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsageApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public UsageApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getApiUsageByBillingCycleCall(String billingCycle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billingCycleUsage/{billingCycle}"
            .replace("{" + "billingCycle" + "}", localVarApiClient.escapeString(billingCycle.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiUsageByBillingCycleValidateBeforeCall(String billingCycle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingCycle' is set
        if (billingCycle == null) {
            throw new ApiException("Missing the required parameter 'billingCycle' when calling getApiUsageByBillingCycle(Async)");
        }

        return getApiUsageByBillingCycleCall(billingCycle, _callback);

    }


    private ApiResponse<BillingCycleUsageResponse> getApiUsageByBillingCycleWithHttpInfo(String billingCycle) throws ApiException {
        okhttp3.Call localVarCall = getApiUsageByBillingCycleValidateBeforeCall(billingCycle, null);
        Type localVarReturnType = new TypeToken<BillingCycleUsageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApiUsageByBillingCycleAsync(String billingCycle, final ApiCallback<BillingCycleUsageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiUsageByBillingCycleValidateBeforeCall(billingCycle, _callback);
        Type localVarReturnType = new TypeToken<BillingCycleUsageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApiUsageByBillingCycleRequestBuilder {
        private final String billingCycle;

        private GetApiUsageByBillingCycleRequestBuilder(String billingCycle) {
            this.billingCycle = billingCycle;
        }

        /**
         * Build call for getApiUsageByBillingCycle
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApiUsageByBillingCycleCall(billingCycle, _callback);
        }


        /**
         * Execute getApiUsageByBillingCycle request
         * @return BillingCycleUsageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public BillingCycleUsageResponse execute() throws ApiException {
            ApiResponse<BillingCycleUsageResponse> localVarResp = getApiUsageByBillingCycleWithHttpInfo(billingCycle);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApiUsageByBillingCycle request with HTTP info returned
         * @return ApiResponse&lt;BillingCycleUsageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillingCycleUsageResponse> executeWithHttpInfo() throws ApiException {
            return getApiUsageByBillingCycleWithHttpInfo(billingCycle);
        }

        /**
         * Execute getApiUsageByBillingCycle request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillingCycleUsageResponse> _callback) throws ApiException {
            return getApiUsageByBillingCycleAsync(billingCycle, _callback);
        }
    }

    /**
     * Specify the billing cycle to know the API usage.
     * An endpoint to obtain information on API usage for a specific billing cycle.
     * @param billingCycle The date obtainable from the /billingCycles endpoint which is used as an identifier for the specific billing cycle you wish to obtain information on. (required)
     * @return GetApiUsageByBillingCycleRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetApiUsageByBillingCycleRequestBuilder getApiUsageByBillingCycle(String billingCycle) throws IllegalArgumentException {
        if (billingCycle == null) throw new IllegalArgumentException("\"billingCycle\" is required but got null");
            if (billingCycle != null && billingCycle.length() < 22) {
              throw new IllegalArgumentException("Invalid value for billingCycle. Length must be greater than or equal to 22.");
            }

        return new GetApiUsageByBillingCycleRequestBuilder(billingCycle);
    }
    private okhttp3.Call getApiUsageByDateCall(LocalDate date, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dailyUsage/{date}"
            .replace("{" + "date" + "}", localVarApiClient.escapeString(date.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiUsageByDateValidateBeforeCall(LocalDate date, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getApiUsageByDate(Async)");
        }

        return getApiUsageByDateCall(date, _callback);

    }


    private ApiResponse<DailyUsageResponse> getApiUsageByDateWithHttpInfo(LocalDate date) throws ApiException {
        okhttp3.Call localVarCall = getApiUsageByDateValidateBeforeCall(date, null);
        Type localVarReturnType = new TypeToken<DailyUsageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getApiUsageByDateAsync(LocalDate date, final ApiCallback<DailyUsageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiUsageByDateValidateBeforeCall(date, _callback);
        Type localVarReturnType = new TypeToken<DailyUsageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetApiUsageByDateRequestBuilder {
        private final LocalDate date;

        private GetApiUsageByDateRequestBuilder(LocalDate date) {
            this.date = date;
        }

        /**
         * Build call for getApiUsageByDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getApiUsageByDateCall(date, _callback);
        }


        /**
         * Execute getApiUsageByDate request
         * @return DailyUsageResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DailyUsageResponse execute() throws ApiException {
            ApiResponse<DailyUsageResponse> localVarResp = getApiUsageByDateWithHttpInfo(date);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getApiUsageByDate request with HTTP info returned
         * @return ApiResponse&lt;DailyUsageResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DailyUsageResponse> executeWithHttpInfo() throws ApiException {
            return getApiUsageByDateWithHttpInfo(date);
        }

        /**
         * Execute getApiUsageByDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DailyUsageResponse> _callback) throws ApiException {
            return getApiUsageByDateAsync(date, _callback);
        }
    }

    /**
     * Get API usage for a requested Date.
     * An endpoint to obtain information on API usage for a specific day.
     * @param date The specific date for which you wish to obtain information on API usage. (required)
     * @return GetApiUsageByDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetApiUsageByDateRequestBuilder getApiUsageByDate(LocalDate date) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetApiUsageByDateRequestBuilder(date);
    }
    private okhttp3.Call listPreviousBillingCyclesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/billingCycles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPreviousBillingCyclesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listPreviousBillingCyclesCall(_callback);

    }


    private ApiResponse<BillingCyclesResponse> listPreviousBillingCyclesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listPreviousBillingCyclesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BillingCyclesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPreviousBillingCyclesAsync(final ApiCallback<BillingCyclesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPreviousBillingCyclesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BillingCyclesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPreviousBillingCyclesRequestBuilder {

        private ListPreviousBillingCyclesRequestBuilder() {
        }

        /**
         * Build call for listPreviousBillingCycles
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPreviousBillingCyclesCall(_callback);
        }


        /**
         * Execute listPreviousBillingCycles request
         * @return BillingCyclesResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public BillingCyclesResponse execute() throws ApiException {
            ApiResponse<BillingCyclesResponse> localVarResp = listPreviousBillingCyclesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPreviousBillingCycles request with HTTP info returned
         * @return ApiResponse&lt;BillingCyclesResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BillingCyclesResponse> executeWithHttpInfo() throws ApiException {
            return listPreviousBillingCyclesWithHttpInfo();
        }

        /**
         * Execute listPreviousBillingCycles request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BillingCyclesResponse> _callback) throws ApiException {
            return listPreviousBillingCyclesAsync(_callback);
        }
    }

    /**
     * Get all the previous 12 billing cycles.
     * An endpoint to obtain information on the previous 12 billing cycles.
     * @return ListPreviousBillingCyclesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListPreviousBillingCyclesRequestBuilder listPreviousBillingCycles() throws IllegalArgumentException {
        return new ListPreviousBillingCyclesRequestBuilder();
    }
}
