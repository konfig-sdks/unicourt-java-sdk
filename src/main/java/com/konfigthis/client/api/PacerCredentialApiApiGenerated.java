/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PacerCredential;
import com.konfigthis.client.model.PacerCredentialListResponse;
import com.konfigthis.client.model.PacerCredentialRequest;
import com.konfigthis.client.model.Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PacerCredentialApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PacerCredentialApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PacerCredentialApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPacerCredentialCall(String pacerUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCredential/{pacerUserId}"
            .replace("{" + "pacerUserId" + "}", localVarApiClient.escapeString(pacerUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPacerCredentialValidateBeforeCall(String pacerUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling getPacerCredential(Async)");
        }

        return getPacerCredentialCall(pacerUserId, _callback);

    }


    private ApiResponse<PacerCredential> getPacerCredentialWithHttpInfo(String pacerUserId) throws ApiException {
        okhttp3.Call localVarCall = getPacerCredentialValidateBeforeCall(pacerUserId, null);
        Type localVarReturnType = new TypeToken<PacerCredential>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPacerCredentialAsync(String pacerUserId, final ApiCallback<PacerCredential> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPacerCredentialValidateBeforeCall(pacerUserId, _callback);
        Type localVarReturnType = new TypeToken<PacerCredential>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPacerCredentialRequestBuilder {
        private final String pacerUserId;

        private GetPacerCredentialRequestBuilder(String pacerUserId) {
            this.pacerUserId = pacerUserId;
        }

        /**
         * Build call for getPacerCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPacerCredentialCall(pacerUserId, _callback);
        }


        /**
         * Execute getPacerCredential request
         * @return PacerCredential
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PacerCredential execute() throws ApiException {
            ApiResponse<PacerCredential> localVarResp = getPacerCredentialWithHttpInfo(pacerUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPacerCredential request with HTTP info returned
         * @return ApiResponse&lt;PacerCredential&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PacerCredential> executeWithHttpInfo() throws ApiException {
            return getPacerCredentialWithHttpInfo(pacerUserId);
        }

        /**
         * Execute getPacerCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PacerCredential> _callback) throws ApiException {
            return getPacerCredentialAsync(pacerUserId, _callback);
        }
    }

    /**
     * Get Pacer Credential for a requested pacer User Id.
     * Retrieve the PACER credentials for the specified PACER username.
     * @param pacerUserId The PACER username for which PACER credentials are to be retrieved. (required)
     * @return GetPacerCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetPacerCredentialRequestBuilder getPacerCredential(String pacerUserId) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        return new GetPacerCredentialRequestBuilder(pacerUserId);
    }
    private okhttp3.Call listPacerCredentialsCall(Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCredential";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPacerCredentialsValidateBeforeCall(Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return listPacerCredentialsCall(pageNumber, _callback);

    }


    private ApiResponse<PacerCredentialListResponse> listPacerCredentialsWithHttpInfo(Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = listPacerCredentialsValidateBeforeCall(pageNumber, null);
        Type localVarReturnType = new TypeToken<PacerCredentialListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPacerCredentialsAsync(Integer pageNumber, final ApiCallback<PacerCredentialListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPacerCredentialsValidateBeforeCall(pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PacerCredentialListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPacerCredentialsRequestBuilder {
        private Integer pageNumber;

        private ListPacerCredentialsRequestBuilder() {
        }

        /**
         * Set pageNumber
         * @param pageNumber The page number of the PACER credentials to be retrieved.&lt;br&gt;   - Minimum: 1  (optional)
         * @return ListPacerCredentialsRequestBuilder
         */
        public ListPacerCredentialsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for listPacerCredentials
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPacerCredentialsCall(pageNumber, _callback);
        }


        /**
         * Execute listPacerCredentials request
         * @return PacerCredentialListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PacerCredentialListResponse execute() throws ApiException {
            ApiResponse<PacerCredentialListResponse> localVarResp = listPacerCredentialsWithHttpInfo(pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPacerCredentials request with HTTP info returned
         * @return ApiResponse&lt;PacerCredentialListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PacerCredentialListResponse> executeWithHttpInfo() throws ApiException {
            return listPacerCredentialsWithHttpInfo(pageNumber);
        }

        /**
         * Execute listPacerCredentials request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PacerCredentialListResponse> _callback) throws ApiException {
            return listPacerCredentialsAsync(pageNumber, _callback);
        }
    }

    /**
     * Get Pacer Credential List.
     * List registered PACER credentials.
     * @return ListPacerCredentialsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListPacerCredentialsRequestBuilder listPacerCredentials() throws IllegalArgumentException {
        return new ListPacerCredentialsRequestBuilder();
    }
    private okhttp3.Call registerPacerCredentialCall(PacerCredentialRequest pacerCredentialRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pacerCredentialRequest;

        // create path and map variables
        String localVarPath = "/pacerCredential";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerPacerCredentialValidateBeforeCall(PacerCredentialRequest pacerCredentialRequest, final ApiCallback _callback) throws ApiException {
        return registerPacerCredentialCall(pacerCredentialRequest, _callback);

    }


    private ApiResponse<Success> registerPacerCredentialWithHttpInfo(PacerCredentialRequest pacerCredentialRequest) throws ApiException {
        okhttp3.Call localVarCall = registerPacerCredentialValidateBeforeCall(pacerCredentialRequest, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call registerPacerCredentialAsync(PacerCredentialRequest pacerCredentialRequest, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerPacerCredentialValidateBeforeCall(pacerCredentialRequest, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RegisterPacerCredentialRequestBuilder {
        private final String pacerUserId;
        private final String password;
        private String defaultPacerClientCode;

        private RegisterPacerCredentialRequestBuilder(String pacerUserId, String password) {
            this.pacerUserId = pacerUserId;
            this.password = password;
        }

        /**
         * Set defaultPacerClientCode
         * @param defaultPacerClientCode Pacer Client Code. (optional)
         * @return RegisterPacerCredentialRequestBuilder
         */
        public RegisterPacerCredentialRequestBuilder defaultPacerClientCode(String defaultPacerClientCode) {
            this.defaultPacerClientCode = defaultPacerClientCode;
            return this;
        }
        
        /**
         * Build call for registerPacerCredential
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PacerCredentialRequest pacerCredentialRequest = buildBodyParams();
            return registerPacerCredentialCall(pacerCredentialRequest, _callback);
        }

        private PacerCredentialRequest buildBodyParams() {
            PacerCredentialRequest pacerCredentialRequest = new PacerCredentialRequest();
            pacerCredentialRequest.defaultPacerClientCode(this.defaultPacerClientCode);
            pacerCredentialRequest.pacerUserId(this.pacerUserId);
            pacerCredentialRequest.password(this.password);
            return pacerCredentialRequest;
        }

        /**
         * Execute registerPacerCredential request
         * @return Success
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Success execute() throws ApiException {
            PacerCredentialRequest pacerCredentialRequest = buildBodyParams();
            ApiResponse<Success> localVarResp = registerPacerCredentialWithHttpInfo(pacerCredentialRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute registerPacerCredential request with HTTP info returned
         * @return ApiResponse&lt;Success&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Success> executeWithHttpInfo() throws ApiException {
            PacerCredentialRequest pacerCredentialRequest = buildBodyParams();
            return registerPacerCredentialWithHttpInfo(pacerCredentialRequest);
        }

        /**
         * Execute registerPacerCredential request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Success> _callback) throws ApiException {
            PacerCredentialRequest pacerCredentialRequest = buildBodyParams();
            return registerPacerCredentialAsync(pacerCredentialRequest, _callback);
        }
    }

    /**
     * Add Pacer Credential.
     * Register PACER credentials with UniCourt.
     * @return RegisterPacerCredentialRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RegisterPacerCredentialRequestBuilder registerPacerCredential(String pacerUserId, String password) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (password == null) throw new IllegalArgumentException("\"password\" is required but got null");
            if (password != null && password.length() < 8) {
              throw new IllegalArgumentException("Invalid value for password. Length must be greater than or equal to 8.");
            }

        return new RegisterPacerCredentialRequestBuilder(pacerUserId, password);
    }
    private okhttp3.Call removeForUserIdCall(String pacerUserId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCredential/{pacerUserId}"
            .replace("{" + "pacerUserId" + "}", localVarApiClient.escapeString(pacerUserId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeForUserIdValidateBeforeCall(String pacerUserId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling removeForUserId(Async)");
        }

        return removeForUserIdCall(pacerUserId, _callback);

    }


    private ApiResponse<Success> removeForUserIdWithHttpInfo(String pacerUserId) throws ApiException {
        okhttp3.Call localVarCall = removeForUserIdValidateBeforeCall(pacerUserId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeForUserIdAsync(String pacerUserId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeForUserIdValidateBeforeCall(pacerUserId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveForUserIdRequestBuilder {
        private final String pacerUserId;

        private RemoveForUserIdRequestBuilder(String pacerUserId) {
            this.pacerUserId = pacerUserId;
        }

        /**
         * Build call for removeForUserId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeForUserIdCall(pacerUserId, _callback);
        }


        /**
         * Execute removeForUserId request
         * @return Success
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Success execute() throws ApiException {
            ApiResponse<Success> localVarResp = removeForUserIdWithHttpInfo(pacerUserId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeForUserId request with HTTP info returned
         * @return ApiResponse&lt;Success&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Success> executeWithHttpInfo() throws ApiException {
            return removeForUserIdWithHttpInfo(pacerUserId);
        }

        /**
         * Execute removeForUserId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Success> _callback) throws ApiException {
            return removeForUserIdAsync(pacerUserId, _callback);
        }
    }

    /**
     * Remove Pacer credential for a specific Pacer User Id.
     * De-register the PACER credentials for the specified PACER username.
     * @param pacerUserId The PACER username for which PACER credentials are to be retrieved. (required)
     * @return RemoveForUserIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveForUserIdRequestBuilder removeForUserId(String pacerUserId) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        return new RemoveForUserIdRequestBuilder(pacerUserId);
    }
}
