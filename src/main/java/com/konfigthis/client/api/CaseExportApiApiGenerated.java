/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CaseExportCallback;
import com.konfigthis.client.model.CaseExportCallbackListResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaseExportApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaseExportApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaseExportApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCallbackByIdCall(String caseExportCallbackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseExport/callbacks/{caseExportCallbackId}"
            .replace("{" + "caseExportCallbackId" + "}", localVarApiClient.escapeString(caseExportCallbackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallbackByIdValidateBeforeCall(String caseExportCallbackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseExportCallbackId' is set
        if (caseExportCallbackId == null) {
            throw new ApiException("Missing the required parameter 'caseExportCallbackId' when calling getCallbackById(Async)");
        }

        return getCallbackByIdCall(caseExportCallbackId, _callback);

    }


    private ApiResponse<CaseExportCallback> getCallbackByIdWithHttpInfo(String caseExportCallbackId) throws ApiException {
        okhttp3.Call localVarCall = getCallbackByIdValidateBeforeCall(caseExportCallbackId, null);
        Type localVarReturnType = new TypeToken<CaseExportCallback>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCallbackByIdAsync(String caseExportCallbackId, final ApiCallback<CaseExportCallback> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallbackByIdValidateBeforeCall(caseExportCallbackId, _callback);
        Type localVarReturnType = new TypeToken<CaseExportCallback>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCallbackByIdRequestBuilder {
        private final String caseExportCallbackId;

        private GetCallbackByIdRequestBuilder(String caseExportCallbackId) {
            this.caseExportCallbackId = caseExportCallbackId;
        }

        /**
         * Build call for getCallbackById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCallbackByIdCall(caseExportCallbackId, _callback);
        }


        /**
         * Execute getCallbackById request
         * @return CaseExportCallback
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseExportCallback execute() throws ApiException {
            ApiResponse<CaseExportCallback> localVarResp = getCallbackByIdWithHttpInfo(caseExportCallbackId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCallbackById request with HTTP info returned
         * @return ApiResponse&lt;CaseExportCallback&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseExportCallback> executeWithHttpInfo() throws ApiException {
            return getCallbackByIdWithHttpInfo(caseExportCallbackId);
        }

        /**
         * Execute getCallbackById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseExportCallback> _callback) throws ApiException {
            return getCallbackByIdAsync(caseExportCallbackId, _callback);
        }
    }

    /**
     * Get Case Export Callback for a requested Case Export Callback Id.
     * Retrieve the specified case export callback object.
     * @param caseExportCallbackId The caseExportCallbackId value of the case export callback object to be retrieved. (required)
     * @return GetCallbackByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCallbackByIdRequestBuilder getCallbackById(String caseExportCallbackId) throws IllegalArgumentException {
        if (caseExportCallbackId == null) throw new IllegalArgumentException("\"caseExportCallbackId\" is required but got null");
            if (caseExportCallbackId != null && caseExportCallbackId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseExportCallbackId. Length must be greater than or equal to 18.");
            }

        return new GetCallbackByIdRequestBuilder(caseExportCallbackId);
    }
    private okhttp3.Call getCallbackListForRequestedDateCall(OffsetDateTime date, String status, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseExport/callbacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallbackListForRequestedDateValidateBeforeCall(OffsetDateTime date, String status, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return getCallbackListForRequestedDateCall(date, status, pageNumber, _callback);

    }


    private ApiResponse<CaseExportCallbackListResponse> getCallbackListForRequestedDateWithHttpInfo(OffsetDateTime date, String status, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getCallbackListForRequestedDateValidateBeforeCall(date, status, pageNumber, null);
        Type localVarReturnType = new TypeToken<CaseExportCallbackListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCallbackListForRequestedDateAsync(OffsetDateTime date, String status, Integer pageNumber, final ApiCallback<CaseExportCallbackListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallbackListForRequestedDateValidateBeforeCall(date, status, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<CaseExportCallbackListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCallbackListForRequestedDateRequestBuilder {
        private OffsetDateTime date;
        private String status;
        private Integer pageNumber;

        private GetCallbackListForRequestedDateRequestBuilder() {
        }

        /**
         * Set date
         * @param date The date for which callbacks are to be retrieved. (optional)
         * @return GetCallbackListForRequestedDateRequestBuilder
         */
        public GetCallbackListForRequestedDateRequestBuilder date(OffsetDateTime date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set status
         * @param status The status code of the callbacks to be retrieved. (optional)
         * @return GetCallbackListForRequestedDateRequestBuilder
         */
        public GetCallbackListForRequestedDateRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the callbacks to be retrieved.&lt;br&gt;   - Minimum: 1  (optional, default to 1)
         * @return GetCallbackListForRequestedDateRequestBuilder
         */
        public GetCallbackListForRequestedDateRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getCallbackListForRequestedDate
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCallbackListForRequestedDateCall(date, status, pageNumber, _callback);
        }


        /**
         * Execute getCallbackListForRequestedDate request
         * @return CaseExportCallbackListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseExportCallbackListResponse execute() throws ApiException {
            ApiResponse<CaseExportCallbackListResponse> localVarResp = getCallbackListForRequestedDateWithHttpInfo(date, status, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCallbackListForRequestedDate request with HTTP info returned
         * @return ApiResponse&lt;CaseExportCallbackListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseExportCallbackListResponse> executeWithHttpInfo() throws ApiException {
            return getCallbackListForRequestedDateWithHttpInfo(date, status, pageNumber);
        }

        /**
         * Execute getCallbackListForRequestedDate request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseExportCallbackListResponse> _callback) throws ApiException {
            return getCallbackListForRequestedDateAsync(date, status, pageNumber, _callback);
        }
    }

    /**
     * Get Case Export Callback list for a requested Date.
     * Retrieve callbacks according to the specified criteria.
     * @return GetCallbackListForRequestedDateRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCallbackListForRequestedDateRequestBuilder getCallbackListForRequestedDate() throws IllegalArgumentException {
        return new GetCallbackListForRequestedDateRequestBuilder();
    }
    private okhttp3.Call getCaseExportByCaseIdCall(String caseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseExport/{caseId}"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseExportByCaseIdValidateBeforeCall(String caseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getCaseExportByCaseId(Async)");
        }

        return getCaseExportByCaseIdCall(caseId, _callback);

    }


    private ApiResponse<CaseExportCallback> getCaseExportByCaseIdWithHttpInfo(String caseId) throws ApiException {
        okhttp3.Call localVarCall = getCaseExportByCaseIdValidateBeforeCall(caseId, null);
        Type localVarReturnType = new TypeToken<CaseExportCallback>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseExportByCaseIdAsync(String caseId, final ApiCallback<CaseExportCallback> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseExportByCaseIdValidateBeforeCall(caseId, _callback);
        Type localVarReturnType = new TypeToken<CaseExportCallback>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseExportByCaseIdRequestBuilder {
        private final String caseId;

        private GetCaseExportByCaseIdRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Build call for getCaseExportByCaseId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseExportByCaseIdCall(caseId, _callback);
        }


        /**
         * Execute getCaseExportByCaseId request
         * @return CaseExportCallback
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public CaseExportCallback execute() throws ApiException {
            ApiResponse<CaseExportCallback> localVarResp = getCaseExportByCaseIdWithHttpInfo(caseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseExportByCaseId request with HTTP info returned
         * @return ApiResponse&lt;CaseExportCallback&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseExportCallback> executeWithHttpInfo() throws ApiException {
            return getCaseExportByCaseIdWithHttpInfo(caseId);
        }

        /**
         * Execute getCaseExportByCaseId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseExportCallback> _callback) throws ApiException {
            return getCaseExportByCaseIdAsync(caseId, _callback);
        }
    }

    /**
     * Gets case exported for a requested Case ID.
     * Retrieve information about the specified case export.
     * @param caseId The caseId value of the case for which case export information is to be retrieved. (required)
     * @return GetCaseExportByCaseIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseExportByCaseIdRequestBuilder getCaseExportByCaseId(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetCaseExportByCaseIdRequestBuilder(caseId);
    }
}
