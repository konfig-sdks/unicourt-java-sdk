/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CaseDocument;
import com.konfigthis.client.model.CaseDocumentOrderCallback;
import com.konfigthis.client.model.CaseDocumentOrderCallbackListResponse;
import com.konfigthis.client.model.CaseDocumentOrderPacerOptions;
import com.konfigthis.client.model.CaseDocumentOrderRequest;
import com.konfigthis.client.model.CaseDocuments;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaseDocumentsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaseDocumentsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaseDocumentsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDocumentOrderCall(CaseDocumentOrderRequest caseDocumentOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = caseDocumentOrderRequest;

        // create path and map variables
        String localVarPath = "/caseDocumentOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDocumentOrderValidateBeforeCall(CaseDocumentOrderRequest caseDocumentOrderRequest, final ApiCallback _callback) throws ApiException {
        return addDocumentOrderCall(caseDocumentOrderRequest, _callback);

    }


    private ApiResponse<CaseDocumentOrderCallback> addDocumentOrderWithHttpInfo(CaseDocumentOrderRequest caseDocumentOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = addDocumentOrderValidateBeforeCall(caseDocumentOrderRequest, null);
        Type localVarReturnType = new TypeToken<CaseDocumentOrderCallback>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDocumentOrderAsync(CaseDocumentOrderRequest caseDocumentOrderRequest, final ApiCallback<CaseDocumentOrderCallback> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDocumentOrderValidateBeforeCall(caseDocumentOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<CaseDocumentOrderCallback>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddDocumentOrderRequestBuilder {
        private final String caseDocumentId;
        private final Boolean isPreviewOnly;
        private CaseDocumentOrderPacerOptions pacerOptions;

        private AddDocumentOrderRequestBuilder(String caseDocumentId, Boolean isPreviewOnly) {
            this.caseDocumentId = caseDocumentId;
            this.isPreviewOnly = isPreviewOnly;
        }

        /**
         * Set pacerOptions
         * @param pacerOptions  (optional)
         * @return AddDocumentOrderRequestBuilder
         */
        public AddDocumentOrderRequestBuilder pacerOptions(CaseDocumentOrderPacerOptions pacerOptions) {
            this.pacerOptions = pacerOptions;
            return this;
        }
        
        /**
         * Build call for addDocumentOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CaseDocumentOrderRequest caseDocumentOrderRequest = buildBodyParams();
            return addDocumentOrderCall(caseDocumentOrderRequest, _callback);
        }

        private CaseDocumentOrderRequest buildBodyParams() {
            CaseDocumentOrderRequest caseDocumentOrderRequest = new CaseDocumentOrderRequest();
            caseDocumentOrderRequest.caseDocumentId(this.caseDocumentId);
            caseDocumentOrderRequest.isPreviewOnly(this.isPreviewOnly);
            caseDocumentOrderRequest.pacerOptions(this.pacerOptions);
            return caseDocumentOrderRequest;
        }

        /**
         * Execute addDocumentOrder request
         * @return CaseDocumentOrderCallback
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseDocumentOrderCallback execute() throws ApiException {
            CaseDocumentOrderRequest caseDocumentOrderRequest = buildBodyParams();
            ApiResponse<CaseDocumentOrderCallback> localVarResp = addDocumentOrderWithHttpInfo(caseDocumentOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addDocumentOrder request with HTTP info returned
         * @return ApiResponse&lt;CaseDocumentOrderCallback&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseDocumentOrderCallback> executeWithHttpInfo() throws ApiException {
            CaseDocumentOrderRequest caseDocumentOrderRequest = buildBodyParams();
            return addDocumentOrderWithHttpInfo(caseDocumentOrderRequest);
        }

        /**
         * Execute addDocumentOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseDocumentOrderCallback> _callback) throws ApiException {
            CaseDocumentOrderRequest caseDocumentOrderRequest = buildBodyParams();
            return addDocumentOrderAsync(caseDocumentOrderRequest, _callback);
        }
    }

    /**
     * Add Case Document Order for requested Document Ids.
     * Add Case Document Order for requested Document Ids.
     * @return AddDocumentOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddDocumentOrderRequestBuilder addDocumentOrder(String caseDocumentId, Boolean isPreviewOnly) throws IllegalArgumentException {
        if (caseDocumentId == null) throw new IllegalArgumentException("\"caseDocumentId\" is required but got null");
            if (caseDocumentId != null && caseDocumentId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
            }

        if (isPreviewOnly == null) throw new IllegalArgumentException("\"isPreviewOnly\" is required but got null");
        return new AddDocumentOrderRequestBuilder(caseDocumentId, isPreviewOnly);
    }
    private okhttp3.Call getCallbackByIdCall(String caseDocumentOrderCallbackId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}"
            .replace("{" + "caseDocumentOrderCallbackId" + "}", localVarApiClient.escapeString(caseDocumentOrderCallbackId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCallbackByIdValidateBeforeCall(String caseDocumentOrderCallbackId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseDocumentOrderCallbackId' is set
        if (caseDocumentOrderCallbackId == null) {
            throw new ApiException("Missing the required parameter 'caseDocumentOrderCallbackId' when calling getCallbackById(Async)");
        }

        return getCallbackByIdCall(caseDocumentOrderCallbackId, _callback);

    }


    private ApiResponse<CaseDocumentOrderCallback> getCallbackByIdWithHttpInfo(String caseDocumentOrderCallbackId) throws ApiException {
        okhttp3.Call localVarCall = getCallbackByIdValidateBeforeCall(caseDocumentOrderCallbackId, null);
        Type localVarReturnType = new TypeToken<CaseDocumentOrderCallback>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCallbackByIdAsync(String caseDocumentOrderCallbackId, final ApiCallback<CaseDocumentOrderCallback> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCallbackByIdValidateBeforeCall(caseDocumentOrderCallbackId, _callback);
        Type localVarReturnType = new TypeToken<CaseDocumentOrderCallback>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCallbackByIdRequestBuilder {
        private final String caseDocumentOrderCallbackId;

        private GetCallbackByIdRequestBuilder(String caseDocumentOrderCallbackId) {
            this.caseDocumentOrderCallbackId = caseDocumentOrderCallbackId;
        }

        /**
         * Build call for getCallbackById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCallbackByIdCall(caseDocumentOrderCallbackId, _callback);
        }


        /**
         * Execute getCallbackById request
         * @return CaseDocumentOrderCallback
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseDocumentOrderCallback execute() throws ApiException {
            ApiResponse<CaseDocumentOrderCallback> localVarResp = getCallbackByIdWithHttpInfo(caseDocumentOrderCallbackId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCallbackById request with HTTP info returned
         * @return ApiResponse&lt;CaseDocumentOrderCallback&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseDocumentOrderCallback> executeWithHttpInfo() throws ApiException {
            return getCallbackByIdWithHttpInfo(caseDocumentOrderCallbackId);
        }

        /**
         * Execute getCallbackById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseDocumentOrderCallback> _callback) throws ApiException {
            return getCallbackByIdAsync(caseDocumentOrderCallbackId, _callback);
        }
    }

    /**
     * Get Case Document Order Callback for a requested Case Document Order Callback Id.
     * Get Case Document Order Callback for a requested Case Document Order Callback Id.
     * @param caseDocumentOrderCallbackId Unique Id for the Case Document Order Callback. (required)
     * @return GetCallbackByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCallbackByIdRequestBuilder getCallbackById(String caseDocumentOrderCallbackId) throws IllegalArgumentException {
        if (caseDocumentOrderCallbackId == null) throw new IllegalArgumentException("\"caseDocumentOrderCallbackId\" is required but got null");
            if (caseDocumentOrderCallbackId != null && caseDocumentOrderCallbackId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseDocumentOrderCallbackId. Length must be greater than or equal to 18.");
            }

        return new GetCallbackByIdRequestBuilder(caseDocumentOrderCallbackId);
    }
    private okhttp3.Call getDocumentDetailsByDocumentIdCall(String caseDocumentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseDocument/{caseDocumentId}"
            .replace("{" + "caseDocumentId" + "}", localVarApiClient.escapeString(caseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentDetailsByDocumentIdValidateBeforeCall(String caseDocumentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseDocumentId' is set
        if (caseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'caseDocumentId' when calling getDocumentDetailsByDocumentId(Async)");
        }

        return getDocumentDetailsByDocumentIdCall(caseDocumentId, _callback);

    }


    private ApiResponse<CaseDocument> getDocumentDetailsByDocumentIdWithHttpInfo(String caseDocumentId) throws ApiException {
        okhttp3.Call localVarCall = getDocumentDetailsByDocumentIdValidateBeforeCall(caseDocumentId, null);
        Type localVarReturnType = new TypeToken<CaseDocument>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDocumentDetailsByDocumentIdAsync(String caseDocumentId, final ApiCallback<CaseDocument> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentDetailsByDocumentIdValidateBeforeCall(caseDocumentId, _callback);
        Type localVarReturnType = new TypeToken<CaseDocument>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDocumentDetailsByDocumentIdRequestBuilder {
        private final String caseDocumentId;

        private GetDocumentDetailsByDocumentIdRequestBuilder(String caseDocumentId) {
            this.caseDocumentId = caseDocumentId;
        }

        /**
         * Build call for getDocumentDetailsByDocumentId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocumentDetailsByDocumentIdCall(caseDocumentId, _callback);
        }


        /**
         * Execute getDocumentDetailsByDocumentId request
         * @return CaseDocument
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public CaseDocument execute() throws ApiException {
            ApiResponse<CaseDocument> localVarResp = getDocumentDetailsByDocumentIdWithHttpInfo(caseDocumentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDocumentDetailsByDocumentId request with HTTP info returned
         * @return ApiResponse&lt;CaseDocument&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseDocument> executeWithHttpInfo() throws ApiException {
            return getDocumentDetailsByDocumentIdWithHttpInfo(caseDocumentId);
        }

        /**
         * Execute getDocumentDetailsByDocumentId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseDocument> _callback) throws ApiException {
            return getDocumentDetailsByDocumentIdAsync(caseDocumentId, _callback);
        }
    }

    /**
     * Gets details for a requested Document ID.
     * Gets details for a requested Document ID.
     * @param caseDocumentId Specific Case Dcoument ID for which you want the data for. (required)
     * @return GetDocumentDetailsByDocumentIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentDetailsByDocumentIdRequestBuilder getDocumentDetailsByDocumentId(String caseDocumentId) throws IllegalArgumentException {
        if (caseDocumentId == null) throw new IllegalArgumentException("\"caseDocumentId\" is required but got null");
            if (caseDocumentId != null && caseDocumentId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
            }

        return new GetDocumentDetailsByDocumentIdRequestBuilder(caseDocumentId);
    }
    private okhttp3.Call getDocumentsForCaseCall(String caseId, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, OffsetDateTime firstFetchDate, String sortBy, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/documents"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inLibrary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inLibrary", inLibrary));
        }

        if (afterFirstFetchDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterFirstFetchDate", afterFirstFetchDate));
        }

        if (libraryDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("libraryDate", libraryDate));
        }

        if (firstFetchDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstFetchDate", firstFetchDate));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocumentsForCaseValidateBeforeCall(String caseId, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, OffsetDateTime firstFetchDate, String sortBy, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getDocumentsForCase(Async)");
        }

        return getDocumentsForCaseCall(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber, _callback);

    }


    private ApiResponse<CaseDocuments> getDocumentsForCaseWithHttpInfo(String caseId, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, OffsetDateTime firstFetchDate, String sortBy, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getDocumentsForCaseValidateBeforeCall(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber, null);
        Type localVarReturnType = new TypeToken<CaseDocuments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDocumentsForCaseAsync(String caseId, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, OffsetDateTime firstFetchDate, String sortBy, Integer pageNumber, final ApiCallback<CaseDocuments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocumentsForCaseValidateBeforeCall(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<CaseDocuments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDocumentsForCaseRequestBuilder {
        private final String caseId;
        private Boolean inLibrary;
        private OffsetDateTime afterFirstFetchDate;
        private OffsetDateTime libraryDate;
        private OffsetDateTime firstFetchDate;
        private String sortBy;
        private Integer pageNumber;

        private GetDocumentsForCaseRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set inLibrary
         * @param inLibrary Filter all the documents those are added to the UniCourt library. (optional)
         * @return GetDocumentsForCaseRequestBuilder
         */
        public GetDocumentsForCaseRequestBuilder inLibrary(Boolean inLibrary) {
            this.inLibrary = inLibrary;
            return this;
        }
        
        /**
         * Set afterFirstFetchDate
         * @param afterFirstFetchDate Get all the documents which were added to the case on or after a specific date. (optional)
         * @return GetDocumentsForCaseRequestBuilder
         */
        public GetDocumentsForCaseRequestBuilder afterFirstFetchDate(OffsetDateTime afterFirstFetchDate) {
            this.afterFirstFetchDate = afterFirstFetchDate;
            return this;
        }
        
        /**
         * Set libraryDate
         * @param libraryDate Sort all the documents based on the date when the document was added to the UniCourt Library. (optional)
         * @return GetDocumentsForCaseRequestBuilder
         */
        public GetDocumentsForCaseRequestBuilder libraryDate(OffsetDateTime libraryDate) {
            this.libraryDate = libraryDate;
            return this;
        }
        
        /**
         * Set firstFetchDate
         * @param firstFetchDate Sort all the documents based on the date it was fetched from the source site. (optional)
         * @return GetDocumentsForCaseRequestBuilder
         */
        public GetDocumentsForCaseRequestBuilder firstFetchDate(OffsetDateTime firstFetchDate) {
            this.firstFetchDate = firstFetchDate;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort documents with document order. (optional)
         * @return GetDocumentsForCaseRequestBuilder
         */
        public GetDocumentsForCaseRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page for which the result should be retrieved. (optional)
         * @return GetDocumentsForCaseRequestBuilder
         */
        public GetDocumentsForCaseRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getDocumentsForCase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocumentsForCaseCall(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber, _callback);
        }


        /**
         * Execute getDocumentsForCase request
         * @return CaseDocuments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public CaseDocuments execute() throws ApiException {
            ApiResponse<CaseDocuments> localVarResp = getDocumentsForCaseWithHttpInfo(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDocumentsForCase request with HTTP info returned
         * @return ApiResponse&lt;CaseDocuments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseDocuments> executeWithHttpInfo() throws ApiException {
            return getDocumentsForCaseWithHttpInfo(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber);
        }

        /**
         * Execute getDocumentsForCase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseDocuments> _callback) throws ApiException {
            return getDocumentsForCaseAsync(caseId, inLibrary, afterFirstFetchDate, libraryDate, firstFetchDate, sortBy, pageNumber, _callback);
        }
    }

    /**
     * Gets Documents for a requested Case ID.
     * Gets Documents for a requested Case ID.
     * @param caseId Case ID for which you want the data for. (required)
     * @return GetDocumentsForCaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDocumentsForCaseRequestBuilder getDocumentsForCase(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetDocumentsForCaseRequestBuilder(caseId);
    }
    private okhttp3.Call getDownloadableUrlForDocumentCall(String caseDocumentId, Boolean isPreviewDocument, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseDocumentDownload/{caseDocumentId}"
            .replace("{" + "caseDocumentId" + "}", localVarApiClient.escapeString(caseDocumentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isPreviewDocument != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isPreviewDocument", isPreviewDocument));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDownloadableUrlForDocumentValidateBeforeCall(String caseDocumentId, Boolean isPreviewDocument, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseDocumentId' is set
        if (caseDocumentId == null) {
            throw new ApiException("Missing the required parameter 'caseDocumentId' when calling getDownloadableUrlForDocument(Async)");
        }

        return getDownloadableUrlForDocumentCall(caseDocumentId, isPreviewDocument, _callback);

    }


    private ApiResponse<Object> getDownloadableUrlForDocumentWithHttpInfo(String caseDocumentId, Boolean isPreviewDocument) throws ApiException {
        okhttp3.Call localVarCall = getDownloadableUrlForDocumentValidateBeforeCall(caseDocumentId, isPreviewDocument, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDownloadableUrlForDocumentAsync(String caseDocumentId, Boolean isPreviewDocument, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDownloadableUrlForDocumentValidateBeforeCall(caseDocumentId, isPreviewDocument, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDownloadableUrlForDocumentRequestBuilder {
        private final String caseDocumentId;
        private Boolean isPreviewDocument;

        private GetDownloadableUrlForDocumentRequestBuilder(String caseDocumentId) {
            this.caseDocumentId = caseDocumentId;
        }

        /**
         * Set isPreviewDocument
         * @param isPreviewDocument If the document you want to download is a preview of a document. (optional, default to false)
         * @return GetDownloadableUrlForDocumentRequestBuilder
         */
        public GetDownloadableUrlForDocumentRequestBuilder isPreviewDocument(Boolean isPreviewDocument) {
            this.isPreviewDocument = isPreviewDocument;
            return this;
        }
        
        /**
         * Build call for getDownloadableUrlForDocument
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDownloadableUrlForDocumentCall(caseDocumentId, isPreviewDocument, _callback);
        }


        /**
         * Execute getDownloadableUrlForDocument request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getDownloadableUrlForDocumentWithHttpInfo(caseDocumentId, isPreviewDocument);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDownloadableUrlForDocument request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getDownloadableUrlForDocumentWithHttpInfo(caseDocumentId, isPreviewDocument);
        }

        /**
         * Execute getDownloadableUrlForDocument request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getDownloadableUrlForDocumentAsync(caseDocumentId, isPreviewDocument, _callback);
        }
    }

    /**
     * Gets downloadable URL for a requested Document ID.
     * Gets downloadable URL for a requested Document ID.
     * @param caseDocumentId Document ID which you want to download. (required)
     * @return GetDownloadableUrlForDocumentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDownloadableUrlForDocumentRequestBuilder getDownloadableUrlForDocument(String caseDocumentId) throws IllegalArgumentException {
        if (caseDocumentId == null) throw new IllegalArgumentException("\"caseDocumentId\" is required but got null");
            if (caseDocumentId != null && caseDocumentId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseDocumentId. Length must be greater than or equal to 18.");
            }

        return new GetDownloadableUrlForDocumentRequestBuilder(caseDocumentId);
    }
    private okhttp3.Call listDocumentOrderCallbacksCall(OffsetDateTime date, String status, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseDocumentOrder/callbacks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDocumentOrderCallbacksValidateBeforeCall(OffsetDateTime date, String status, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return listDocumentOrderCallbacksCall(date, status, pageNumber, _callback);

    }


    private ApiResponse<CaseDocumentOrderCallbackListResponse> listDocumentOrderCallbacksWithHttpInfo(OffsetDateTime date, String status, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = listDocumentOrderCallbacksValidateBeforeCall(date, status, pageNumber, null);
        Type localVarReturnType = new TypeToken<CaseDocumentOrderCallbackListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDocumentOrderCallbacksAsync(OffsetDateTime date, String status, Integer pageNumber, final ApiCallback<CaseDocumentOrderCallbackListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDocumentOrderCallbacksValidateBeforeCall(date, status, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<CaseDocumentOrderCallbackListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDocumentOrderCallbacksRequestBuilder {
        private OffsetDateTime date;
        private String status;
        private Integer pageNumber;

        private ListDocumentOrderCallbacksRequestBuilder() {
        }

        /**
         * Set date
         * @param date Date for which fetch the Case Document Order Callback list. By default, the date will be set to current date. (optional)
         * @return ListDocumentOrderCallbacksRequestBuilder
         */
        public ListDocumentOrderCallbacksRequestBuilder date(OffsetDateTime date) {
            this.date = date;
            return this;
        }
        
        /**
         * Set status
         * @param status Status of Document Order callbacks. Default status will fetch all callbacks. (optional)
         * @return ListDocumentOrderCallbacksRequestBuilder
         */
        public ListDocumentOrderCallbacksRequestBuilder status(String status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Page to fetch the Case Document Order Callback list.&lt;br&gt;   - Minimum: 1  (optional, default to 1)
         * @return ListDocumentOrderCallbacksRequestBuilder
         */
        public ListDocumentOrderCallbacksRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for listDocumentOrderCallbacks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDocumentOrderCallbacksCall(date, status, pageNumber, _callback);
        }


        /**
         * Execute listDocumentOrderCallbacks request
         * @return CaseDocumentOrderCallbackListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseDocumentOrderCallbackListResponse execute() throws ApiException {
            ApiResponse<CaseDocumentOrderCallbackListResponse> localVarResp = listDocumentOrderCallbacksWithHttpInfo(date, status, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDocumentOrderCallbacks request with HTTP info returned
         * @return ApiResponse&lt;CaseDocumentOrderCallbackListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseDocumentOrderCallbackListResponse> executeWithHttpInfo() throws ApiException {
            return listDocumentOrderCallbacksWithHttpInfo(date, status, pageNumber);
        }

        /**
         * Execute listDocumentOrderCallbacks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseDocumentOrderCallbackListResponse> _callback) throws ApiException {
            return listDocumentOrderCallbacksAsync(date, status, pageNumber, _callback);
        }
    }

    /**
     * Get Case Document Order Callback list for a requested Date.
     * Get Case Document Order Callback list for a requested Date.
     * @return ListDocumentOrderCallbacksRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListDocumentOrderCallbacksRequestBuilder listDocumentOrderCallbacks() throws IllegalArgumentException {
        return new ListDocumentOrderCallbacksRequestBuilder();
    }
}
