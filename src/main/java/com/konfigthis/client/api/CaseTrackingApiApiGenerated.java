/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CaseTrack;
import com.konfigthis.client.model.CaseTrackListResponse;
import com.konfigthis.client.model.CaseTrackRequest;
import com.konfigthis.client.model.CaseTrackSchedule;
import com.konfigthis.client.model.CaseUpdateRequest;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Success;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaseTrackingApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaseTrackingApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaseTrackingApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addCaseTrackCall(CaseTrackRequest caseTrackRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = caseTrackRequest;

        // create path and map variables
        String localVarPath = "/caseTrack";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addCaseTrackValidateBeforeCall(CaseTrackRequest caseTrackRequest, final ApiCallback _callback) throws ApiException {
        return addCaseTrackCall(caseTrackRequest, _callback);

    }


    private ApiResponse<Success> addCaseTrackWithHttpInfo(CaseTrackRequest caseTrackRequest) throws ApiException {
        okhttp3.Call localVarCall = addCaseTrackValidateBeforeCall(caseTrackRequest, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addCaseTrackAsync(CaseTrackRequest caseTrackRequest, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = addCaseTrackValidateBeforeCall(caseTrackRequest, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddCaseTrackRequestBuilder {
        private final CaseUpdateRequest caseTrackParams;
        private final CaseTrackSchedule schedule;

        private AddCaseTrackRequestBuilder(CaseUpdateRequest caseTrackParams, CaseTrackSchedule schedule) {
            this.caseTrackParams = caseTrackParams;
            this.schedule = schedule;
        }

        /**
         * Build call for addCaseTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CaseTrackRequest caseTrackRequest = buildBodyParams();
            return addCaseTrackCall(caseTrackRequest, _callback);
        }

        private CaseTrackRequest buildBodyParams() {
            CaseTrackRequest caseTrackRequest = new CaseTrackRequest();
            caseTrackRequest.caseTrackParams(this.caseTrackParams);
            caseTrackRequest.schedule(this.schedule);
            return caseTrackRequest;
        }

        /**
         * Execute addCaseTrack request
         * @return Success
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Success execute() throws ApiException {
            CaseTrackRequest caseTrackRequest = buildBodyParams();
            ApiResponse<Success> localVarResp = addCaseTrackWithHttpInfo(caseTrackRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addCaseTrack request with HTTP info returned
         * @return ApiResponse&lt;Success&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Success> executeWithHttpInfo() throws ApiException {
            CaseTrackRequest caseTrackRequest = buildBodyParams();
            return addCaseTrackWithHttpInfo(caseTrackRequest);
        }

        /**
         * Execute addCaseTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Success> _callback) throws ApiException {
            CaseTrackRequest caseTrackRequest = buildBodyParams();
            return addCaseTrackAsync(caseTrackRequest, _callback);
        }
    }

    /**
     * Add Case Track for the requested Case Id.
     * Track the specified case.
     * @return AddCaseTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AddCaseTrackRequestBuilder addCaseTrack(CaseUpdateRequest caseTrackParams, CaseTrackSchedule schedule) throws IllegalArgumentException {
        if (caseTrackParams == null) throw new IllegalArgumentException("\"caseTrackParams\" is required but got null");
        if (schedule == null) throw new IllegalArgumentException("\"schedule\" is required but got null");
        return new AddCaseTrackRequestBuilder(caseTrackParams, schedule);
    }
    private okhttp3.Call getCaseTrackCall(String caseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseTrack/{caseId}"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseTrackValidateBeforeCall(String caseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getCaseTrack(Async)");
        }

        return getCaseTrackCall(caseId, _callback);

    }


    private ApiResponse<CaseTrack> getCaseTrackWithHttpInfo(String caseId) throws ApiException {
        okhttp3.Call localVarCall = getCaseTrackValidateBeforeCall(caseId, null);
        Type localVarReturnType = new TypeToken<CaseTrack>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseTrackAsync(String caseId, final ApiCallback<CaseTrack> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseTrackValidateBeforeCall(caseId, _callback);
        Type localVarReturnType = new TypeToken<CaseTrack>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseTrackRequestBuilder {
        private final String caseId;

        private GetCaseTrackRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Build call for getCaseTrack
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseTrackCall(caseId, _callback);
        }


        /**
         * Execute getCaseTrack request
         * @return CaseTrack
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseTrack execute() throws ApiException {
            ApiResponse<CaseTrack> localVarResp = getCaseTrackWithHttpInfo(caseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseTrack request with HTTP info returned
         * @return ApiResponse&lt;CaseTrack&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseTrack> executeWithHttpInfo() throws ApiException {
            return getCaseTrackWithHttpInfo(caseId);
        }

        /**
         * Execute getCaseTrack request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseTrack> _callback) throws ApiException {
            return getCaseTrackAsync(caseId, _callback);
        }
    }

    /**
     * Get Case Track for a requested Case Id.
     * Retrieve case tracking information for the specified caseId value.
     * @param caseId The caseId value for which case tracking information is to be retrieved. (required)
     * @return GetCaseTrackRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseTrackRequestBuilder getCaseTrack(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetCaseTrackRequestBuilder(caseId);
    }
    private okhttp3.Call getCaseTrackListCall(OffsetDateTime lastFetchDate, OffsetDateTime lastFetchDateWithUpdates, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseTracks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lastFetchDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastFetchDate", lastFetchDate));
        }

        if (lastFetchDateWithUpdates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastFetchDateWithUpdates", lastFetchDateWithUpdates));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseTrackListValidateBeforeCall(OffsetDateTime lastFetchDate, OffsetDateTime lastFetchDateWithUpdates, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return getCaseTrackListCall(lastFetchDate, lastFetchDateWithUpdates, pageNumber, _callback);

    }


    private ApiResponse<CaseTrackListResponse> getCaseTrackListWithHttpInfo(OffsetDateTime lastFetchDate, OffsetDateTime lastFetchDateWithUpdates, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getCaseTrackListValidateBeforeCall(lastFetchDate, lastFetchDateWithUpdates, pageNumber, null);
        Type localVarReturnType = new TypeToken<CaseTrackListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseTrackListAsync(OffsetDateTime lastFetchDate, OffsetDateTime lastFetchDateWithUpdates, Integer pageNumber, final ApiCallback<CaseTrackListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseTrackListValidateBeforeCall(lastFetchDate, lastFetchDateWithUpdates, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<CaseTrackListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseTrackListRequestBuilder {
        private OffsetDateTime lastFetchDate;
        private OffsetDateTime lastFetchDateWithUpdates;
        private Integer pageNumber;

        private GetCaseTrackListRequestBuilder() {
        }

        /**
         * Set lastFetchDate
         * @param lastFetchDate The lastFetchDate value of the tracked case. The date value should be entered in the format YYYY-MM-DDTHH:MM:SS+ZZ:zz.  (optional)
         * @return GetCaseTrackListRequestBuilder
         */
        public GetCaseTrackListRequestBuilder lastFetchDate(OffsetDateTime lastFetchDate) {
            this.lastFetchDate = lastFetchDate;
            return this;
        }
        
        /**
         * Set lastFetchDateWithUpdates
         * @param lastFetchDateWithUpdates The date on which changes were last found in the case information.  (optional)
         * @return GetCaseTrackListRequestBuilder
         */
        public GetCaseTrackListRequestBuilder lastFetchDateWithUpdates(OffsetDateTime lastFetchDateWithUpdates) {
            this.lastFetchDateWithUpdates = lastFetchDateWithUpdates;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the results to be retrieved.&lt;br&gt;   - Minimum: 1  (optional)
         * @return GetCaseTrackListRequestBuilder
         */
        public GetCaseTrackListRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getCaseTrackList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseTrackListCall(lastFetchDate, lastFetchDateWithUpdates, pageNumber, _callback);
        }


        /**
         * Execute getCaseTrackList request
         * @return CaseTrackListResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CaseTrackListResponse execute() throws ApiException {
            ApiResponse<CaseTrackListResponse> localVarResp = getCaseTrackListWithHttpInfo(lastFetchDate, lastFetchDateWithUpdates, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseTrackList request with HTTP info returned
         * @return ApiResponse&lt;CaseTrackListResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CaseTrackListResponse> executeWithHttpInfo() throws ApiException {
            return getCaseTrackListWithHttpInfo(lastFetchDate, lastFetchDateWithUpdates, pageNumber);
        }

        /**
         * Execute getCaseTrackList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CaseTrackListResponse> _callback) throws ApiException {
            return getCaseTrackListAsync(lastFetchDate, lastFetchDateWithUpdates, pageNumber, _callback);
        }
    }

    /**
     * Get Case Track list.
     * Retrieve a list of all tracked cases.
     * @return GetCaseTrackListRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseTrackListRequestBuilder getCaseTrackList() throws IllegalArgumentException {
        return new GetCaseTrackListRequestBuilder();
    }
    private okhttp3.Call removeCaseTrackByIdCall(String caseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/caseTrack/{caseId}"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeCaseTrackByIdValidateBeforeCall(String caseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling removeCaseTrackById(Async)");
        }

        return removeCaseTrackByIdCall(caseId, _callback);

    }


    private ApiResponse<Success> removeCaseTrackByIdWithHttpInfo(String caseId) throws ApiException {
        okhttp3.Call localVarCall = removeCaseTrackByIdValidateBeforeCall(caseId, null);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeCaseTrackByIdAsync(String caseId, final ApiCallback<Success> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeCaseTrackByIdValidateBeforeCall(caseId, _callback);
        Type localVarReturnType = new TypeToken<Success>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveCaseTrackByIdRequestBuilder {
        private final String caseId;

        private RemoveCaseTrackByIdRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Build call for removeCaseTrackById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeCaseTrackByIdCall(caseId, _callback);
        }


        /**
         * Execute removeCaseTrackById request
         * @return Success
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Success execute() throws ApiException {
            ApiResponse<Success> localVarResp = removeCaseTrackByIdWithHttpInfo(caseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeCaseTrackById request with HTTP info returned
         * @return ApiResponse&lt;Success&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Success> executeWithHttpInfo() throws ApiException {
            return removeCaseTrackByIdWithHttpInfo(caseId);
        }

        /**
         * Execute removeCaseTrackById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Success> _callback) throws ApiException {
            return removeCaseTrackByIdAsync(caseId, _callback);
        }
    }

    /**
     * Remove Case Track for a specific Case Id.
     * Remove Case Track for a specific Case Id.
     * @param caseId The caseId value for which case tracking information is to be retrieved. (required)
     * @return RemoveCaseTrackByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public RemoveCaseTrackByIdRequestBuilder removeCaseTrackById(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new RemoveCaseTrackByIdRequestBuilder(caseId);
    }
}
