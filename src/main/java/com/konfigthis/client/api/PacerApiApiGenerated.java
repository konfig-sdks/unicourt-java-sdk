/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.PACERImportCase;
import com.konfigthis.client.model.PCLCase;
import com.konfigthis.client.model.PCLParty;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PacerApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PacerApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PacerApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call importPacerCaseByCourtUsingCaseNumberGetCall(String pacerUserId, String pacerClientCode, String caseNumber, String courtId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacer/importCaseByCourtUsingCaseNumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (courtId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("courtId", courtId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importPacerCaseByCourtUsingCaseNumberGetValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, String courtId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling importPacerCaseByCourtUsingCaseNumberGet(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling importPacerCaseByCourtUsingCaseNumberGet(Async)");
        }

        // verify the required parameter 'caseNumber' is set
        if (caseNumber == null) {
            throw new ApiException("Missing the required parameter 'caseNumber' when calling importPacerCaseByCourtUsingCaseNumberGet(Async)");
        }

        // verify the required parameter 'courtId' is set
        if (courtId == null) {
            throw new ApiException("Missing the required parameter 'courtId' when calling importPacerCaseByCourtUsingCaseNumberGet(Async)");
        }

        return importPacerCaseByCourtUsingCaseNumberGetCall(pacerUserId, pacerClientCode, caseNumber, courtId, _callback);

    }


    private ApiResponse<PACERImportCase> importPacerCaseByCourtUsingCaseNumberGetWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, String courtId) throws ApiException {
        okhttp3.Call localVarCall = importPacerCaseByCourtUsingCaseNumberGetValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, courtId, null);
        Type localVarReturnType = new TypeToken<PACERImportCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importPacerCaseByCourtUsingCaseNumberGetAsync(String pacerUserId, String pacerClientCode, String caseNumber, String courtId, final ApiCallback<PACERImportCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = importPacerCaseByCourtUsingCaseNumberGetValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, courtId, _callback);
        Type localVarReturnType = new TypeToken<PACERImportCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportPacerCaseByCourtUsingCaseNumberGetRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private final String caseNumber;
        private final String courtId;

        private ImportPacerCaseByCourtUsingCaseNumberGetRequestBuilder(String pacerUserId, String pacerClientCode, String caseNumber, String courtId) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
            this.caseNumber = caseNumber;
            this.courtId = courtId;
        }

        /**
         * Build call for importPacerCaseByCourtUsingCaseNumberGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return importPacerCaseByCourtUsingCaseNumberGetCall(pacerUserId, pacerClientCode, caseNumber, courtId, _callback);
        }


        /**
         * Execute importPacerCaseByCourtUsingCaseNumberGet request
         * @return PACERImportCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PACERImportCase execute() throws ApiException {
            ApiResponse<PACERImportCase> localVarResp = importPacerCaseByCourtUsingCaseNumberGetWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, courtId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importPacerCaseByCourtUsingCaseNumberGet request with HTTP info returned
         * @return ApiResponse&lt;PACERImportCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PACERImportCase> executeWithHttpInfo() throws ApiException {
            return importPacerCaseByCourtUsingCaseNumberGetWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, courtId);
        }

        /**
         * Execute importPacerCaseByCourtUsingCaseNumberGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PACERImportCase> _callback) throws ApiException {
            return importPacerCaseByCourtUsingCaseNumberGetAsync(pacerUserId, pacerClientCode, caseNumber, courtId, _callback);
        }
    }

    /**
     * Find PACER Case for a requested Case Number and Court.
     * Import the specified case from PACER.    Workflow:     1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database.     2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId.    Note:     1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee.     2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs.
     * @param pacerUserId The PACER username of the PACER account under which the case should be imported. (required)
     * @param pacerClientCode The PACER client code under which the case should be imported. (required)
     * @param caseNumber The case number of the case to be imported. (required)
     * @param courtId The courtId value of the court from which the case is to be imported. (required)
     * @return ImportPacerCaseByCourtUsingCaseNumberGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public ImportPacerCaseByCourtUsingCaseNumberGetRequestBuilder importPacerCaseByCourtUsingCaseNumberGet(String pacerUserId, String pacerClientCode, String caseNumber, String courtId) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        if (caseNumber == null) throw new IllegalArgumentException("\"caseNumber\" is required but got null");
            if (caseNumber != null && caseNumber.length() < 3) {
              throw new IllegalArgumentException("Invalid value for caseNumber. Length must be greater than or equal to 3.");
            }

        if (courtId == null) throw new IllegalArgumentException("\"courtId\" is required but got null");
            if (courtId != null && courtId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for courtId. Length must be greater than or equal to 18.");
            }

        return new ImportPacerCaseByCourtUsingCaseNumberGetRequestBuilder(pacerUserId, pacerClientCode, caseNumber, courtId);
    }
    private okhttp3.Call searchAllCourtsCasesCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/caseSearch/allCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAllCourtsCasesValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchAllCourtsCases(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchAllCourtsCases(Async)");
        }

        return searchAllCourtsCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLCase> searchAllCourtsCasesWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchAllCourtsCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAllCourtsCasesAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAllCourtsCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAllCourtsCasesRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchAllCourtsCasesRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchAllCourtsCasesRequestBuilder
         */
        public SearchAllCourtsCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchAllCourtsCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAllCourtsCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchAllCourtsCases request
         * @return PCLCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLCase execute() throws ApiException {
            ApiResponse<PCLCase> localVarResp = searchAllCourtsCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAllCourtsCases request with HTTP info returned
         * @return ApiResponse&lt;PCLCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLCase> executeWithHttpInfo() throws ApiException {
            return searchAllCourtsCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchAllCourtsCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLCase> _callback) throws ApiException {
            return searchAllCourtsCasesAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search all courts within the PACER system for a particular case.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchAllCourtsCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchAllCourtsCasesRequestBuilder searchAllCourtsCases(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchAllCourtsCasesRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchAllCourtsCases_0Call(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/partySearch/allCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (partyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyType", partyType));
        }

        if (partyExactNameMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyExactNameMatch", partyExactNameMatch));
        }

        if (partyRoleArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partyRoleArray", partyRoleArray));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseYearFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearFrom", caseYearFrom));
        }

        if (caseYearTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearTo", caseYearTo));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAllCourtsCases_0ValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchAllCourtsCases_0(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchAllCourtsCases_0(Async)");
        }

        return searchAllCourtsCases_0Call(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLParty> searchAllCourtsCases_0WithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchAllCourtsCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAllCourtsCases_0Async(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAllCourtsCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAllCourtsCases0RequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String lastName;
        private String firstName;
        private String middleName;
        private String generation;
        private String partyType;
        private Boolean partyExactNameMatch;
        private List<String> partyRoleArray;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private Integer caseYearFrom;
        private Integer caseYearTo;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchAllCourtsCases0RequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name (for an individual) or the entity name (for a business entity) of the target party. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the target party. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the target party. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set generation
         * @param generation The suffix (e.g., Jr., III) of the target party&#39;s name. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder generation(String generation) {
            this.generation = generation;
            return this;
        }
        
        /**
         * Set partyType
         * @param partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder partyType(String partyType) {
            this.partyType = partyType;
            return this;
        }
        
        /**
         * Set partyExactNameMatch
         * @param partyExactNameMatch Specify whether the search string must match the name of the target party exactly. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder partyExactNameMatch(Boolean partyExactNameMatch) {
            this.partyExactNameMatch = partyExactNameMatch;
            return this;
        }
        
        /**
         * Set partyRoleArray
         * @param partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder partyRoleArray(List<String> partyRoleArray) {
            this.partyRoleArray = partyRoleArray;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseYearFrom
         * @param caseYearFrom Limit the results of the search to those cases from the year specified or later (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseYearFrom(Integer caseYearFrom) {
            this.caseYearFrom = caseYearFrom;
            return this;
        }
        
        /**
         * Set caseYearTo
         * @param caseYearTo Limit the results of the search to those cases from the year specified or earlier (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseYearTo(Integer caseYearTo) {
            this.caseYearTo = caseYearTo;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchAllCourtsCases0RequestBuilder
         */
        public SearchAllCourtsCases0RequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchAllCourtsCases_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAllCourtsCases_0Call(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchAllCourtsCases_0 request
         * @return PCLParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLParty execute() throws ApiException {
            ApiResponse<PCLParty> localVarResp = searchAllCourtsCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAllCourtsCases_0 request with HTTP info returned
         * @return ApiResponse&lt;PCLParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLParty> executeWithHttpInfo() throws ApiException {
            return searchAllCourtsCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchAllCourtsCases_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLParty> _callback) throws ApiException {
            return searchAllCourtsCases_0Async(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for the specified party across all PACER case filings.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchAllCourtsCases0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchAllCourtsCases0RequestBuilder searchAllCourtsCases_0(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchAllCourtsCases0RequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchAppealCourtsCasesCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/caseSearch/appealCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (natureOfSuitsArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "natureOfSuitsArray", natureOfSuitsArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAppealCourtsCasesValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchAppealCourtsCases(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchAppealCourtsCases(Async)");
        }

        return searchAppealCourtsCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLCase> searchAppealCourtsCasesWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchAppealCourtsCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAppealCourtsCasesAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAppealCourtsCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAppealCourtsCasesRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> natureOfSuitsArray;
        private List<String> courtRegionIdArray;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchAppealCourtsCasesRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits). (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set natureOfSuitsArray
         * @param natureOfSuitsArray The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases in U.S. Courts of Appeals.    Scenario: When mulitple nature of suits needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the nature of suit 1110 (Insurance) and 1150 (Overpayments &amp; Enforc. of Judgments), My query in the request will look like the example mentioned below.    Example: natureOfSuitsArray&#x3D;1110&amp;natureOfSuitsArray&#x3D;1150 (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder natureOfSuitsArray(List<String> natureOfSuitsArray) {
            this.natureOfSuitsArray = natureOfSuitsArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchAppealCourtsCasesRequestBuilder
         */
        public SearchAppealCourtsCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchAppealCourtsCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAppealCourtsCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchAppealCourtsCases request
         * @return PCLCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLCase execute() throws ApiException {
            ApiResponse<PCLCase> localVarResp = searchAppealCourtsCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAppealCourtsCases request with HTTP info returned
         * @return ApiResponse&lt;PCLCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLCase> executeWithHttpInfo() throws ApiException {
            return searchAppealCourtsCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchAppealCourtsCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLCase> _callback) throws ApiException {
            return searchAppealCourtsCasesAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for PACER cases filed in U.S. Courts of Appeals.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchAppealCourtsCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchAppealCourtsCasesRequestBuilder searchAppealCourtsCases(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchAppealCourtsCasesRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchAppealCourtsCases_0Call(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/partySearch/appealCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (partyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyType", partyType));
        }

        if (partyExactNameMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyExactNameMatch", partyExactNameMatch));
        }

        if (partyRoleArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partyRoleArray", partyRoleArray));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseYearFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearFrom", caseYearFrom));
        }

        if (caseYearTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearTo", caseYearTo));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchAppealCourtsCases_0ValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchAppealCourtsCases_0(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchAppealCourtsCases_0(Async)");
        }

        return searchAppealCourtsCases_0Call(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLParty> searchAppealCourtsCases_0WithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchAppealCourtsCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchAppealCourtsCases_0Async(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchAppealCourtsCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchAppealCourtsCases0RequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String lastName;
        private String firstName;
        private String middleName;
        private String generation;
        private String partyType;
        private Boolean partyExactNameMatch;
        private List<String> partyRoleArray;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private Integer caseYearFrom;
        private Integer caseYearTo;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchAppealCourtsCases0RequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name (for an individual) or the entity name (for a business entity) of the target party. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the target party. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the target party. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set generation
         * @param generation The suffix (e.g., Jr., III) of the target party&#39;s name. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder generation(String generation) {
            this.generation = generation;
            return this;
        }
        
        /**
         * Set partyType
         * @param partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder partyType(String partyType) {
            this.partyType = partyType;
            return this;
        }
        
        /**
         * Set partyExactNameMatch
         * @param partyExactNameMatch Specify whether the search string must match the name of the target party exactly. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder partyExactNameMatch(Boolean partyExactNameMatch) {
            this.partyExactNameMatch = partyExactNameMatch;
            return this;
        }
        
        /**
         * Set partyRoleArray
         * @param partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder partyRoleArray(List<String> partyRoleArray) {
            this.partyRoleArray = partyRoleArray;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseYearFrom
         * @param caseYearFrom Limit the results of the search to those cases from the year specified or later (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseYearFrom(Integer caseYearFrom) {
            this.caseYearFrom = caseYearFrom;
            return this;
        }
        
        /**
         * Set caseYearTo
         * @param caseYearTo Limit the results of the search to those cases from the year specified or earlier (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseYearTo(Integer caseYearTo) {
            this.caseYearTo = caseYearTo;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchAppealCourtsCases0RequestBuilder
         */
        public SearchAppealCourtsCases0RequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchAppealCourtsCases_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchAppealCourtsCases_0Call(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchAppealCourtsCases_0 request
         * @return PCLParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLParty execute() throws ApiException {
            ApiResponse<PCLParty> localVarResp = searchAppealCourtsCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchAppealCourtsCases_0 request with HTTP info returned
         * @return ApiResponse&lt;PCLParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLParty> executeWithHttpInfo() throws ApiException {
            return searchAppealCourtsCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchAppealCourtsCases_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLParty> _callback) throws ApiException {
            return searchAppealCourtsCases_0Async(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for the specified party across all PACER appeals cases.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchAppealCourtsCases0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchAppealCourtsCases0RequestBuilder searchAppealCourtsCases_0(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchAppealCourtsCases0RequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchBankruptcyCasesCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> federalBankruptcyChapterArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/caseSearch/bankruptcyCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (federalBankruptcyChapterArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "federalBankruptcyChapterArray", federalBankruptcyChapterArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (caseDischargedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDischargedStartDate", caseDischargedStartDate));
        }

        if (caseDischargedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDischargedEndDate", caseDischargedEndDate));
        }

        if (caseDismissedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDismissedStartDate", caseDismissedStartDate));
        }

        if (caseDismissedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDismissedEndDate", caseDismissedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBankruptcyCasesValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> federalBankruptcyChapterArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchBankruptcyCases(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchBankruptcyCases(Async)");
        }

        return searchBankruptcyCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLCase> searchBankruptcyCasesWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> federalBankruptcyChapterArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchBankruptcyCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchBankruptcyCasesAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> federalBankruptcyChapterArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBankruptcyCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchBankruptcyCasesRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> federalBankruptcyChapterArray;
        private List<String> courtRegionIdArray;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private OffsetDateTime caseDischargedStartDate;
        private OffsetDateTime caseDischargedEndDate;
        private OffsetDateTime caseDismissedStartDate;
        private OffsetDateTime caseDismissedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchBankruptcyCasesRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set federalBankruptcyChapterArray
         * @param federalBankruptcyChapterArray The chapter of the U.S. Bankruptcy Code under which the target case was filed. Please see Appendix D for a list of valid chapter numbers.    Scenario: When mulitple Federal Bankruptcy Chapters needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the Federal Bankruptcy Chapters 7 (Chapter 7) and 11 (Chapter 11), My query in the request will look like the example mentioned below.    Example: federalBankruptcyChapterArray&#x3D;7&amp;federalBankruptcyChapterArray&#x3D;11 (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder federalBankruptcyChapterArray(List<String> federalBankruptcyChapterArray) {
            this.federalBankruptcyChapterArray = federalBankruptcyChapterArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set caseDischargedStartDate
         * @param caseDischargedStartDate The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseDischargedStartDate(OffsetDateTime caseDischargedStartDate) {
            this.caseDischargedStartDate = caseDischargedStartDate;
            return this;
        }
        
        /**
         * Set caseDischargedEndDate
         * @param caseDischargedEndDate The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseDischargedEndDate(OffsetDateTime caseDischargedEndDate) {
            this.caseDischargedEndDate = caseDischargedEndDate;
            return this;
        }
        
        /**
         * Set caseDismissedStartDate
         * @param caseDismissedStartDate The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseDismissedStartDate(OffsetDateTime caseDismissedStartDate) {
            this.caseDismissedStartDate = caseDismissedStartDate;
            return this;
        }
        
        /**
         * Set caseDismissedEndDate
         * @param caseDismissedEndDate The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseDismissedEndDate(OffsetDateTime caseDismissedEndDate) {
            this.caseDismissedEndDate = caseDismissedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchBankruptcyCasesRequestBuilder
         */
        public SearchBankruptcyCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchBankruptcyCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchBankruptcyCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchBankruptcyCases request
         * @return PCLCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLCase execute() throws ApiException {
            ApiResponse<PCLCase> localVarResp = searchBankruptcyCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchBankruptcyCases request with HTTP info returned
         * @return ApiResponse&lt;PCLCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLCase> executeWithHttpInfo() throws ApiException {
            return searchBankruptcyCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchBankruptcyCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLCase> _callback) throws ApiException {
            return searchBankruptcyCasesAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, federalBankruptcyChapterArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for Bankruptcy Courts.
     * Search for PACER cases filed in U.S. Bankruptcy Courts.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchBankruptcyCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchBankruptcyCasesRequestBuilder searchBankruptcyCases(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchBankruptcyCasesRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchBankruptcyCourtsCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, String ssnOrEin, String fourDigitSsn, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/partySearch/bankruptcyCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (partyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyType", partyType));
        }

        if (partyExactNameMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyExactNameMatch", partyExactNameMatch));
        }

        if (partyRoleArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partyRoleArray", partyRoleArray));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseYearFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearFrom", caseYearFrom));
        }

        if (caseYearTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearTo", caseYearTo));
        }

        if (ssnOrEin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ssnOrEin", ssnOrEin));
        }

        if (fourDigitSsn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fourDigitSsn", fourDigitSsn));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (caseDischargedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDischargedStartDate", caseDischargedStartDate));
        }

        if (caseDischargedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDischargedEndDate", caseDischargedEndDate));
        }

        if (caseDismissedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDismissedStartDate", caseDismissedStartDate));
        }

        if (caseDismissedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseDismissedEndDate", caseDismissedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchBankruptcyCourtsValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, String ssnOrEin, String fourDigitSsn, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchBankruptcyCourts(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchBankruptcyCourts(Async)");
        }

        return searchBankruptcyCourtsCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLParty> searchBankruptcyCourtsWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, String ssnOrEin, String fourDigitSsn, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchBankruptcyCourtsValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchBankruptcyCourtsAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, String ssnOrEin, String fourDigitSsn, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, OffsetDateTime caseDischargedStartDate, OffsetDateTime caseDischargedEndDate, OffsetDateTime caseDismissedStartDate, OffsetDateTime caseDismissedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchBankruptcyCourtsValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchBankruptcyCourtsRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String lastName;
        private String firstName;
        private String middleName;
        private String generation;
        private String partyType;
        private Boolean partyExactNameMatch;
        private List<String> partyRoleArray;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private Integer caseYearFrom;
        private Integer caseYearTo;
        private String ssnOrEin;
        private String fourDigitSsn;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private OffsetDateTime caseDischargedStartDate;
        private OffsetDateTime caseDischargedEndDate;
        private OffsetDateTime caseDismissedStartDate;
        private OffsetDateTime caseDismissedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchBankruptcyCourtsRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name (for an individual) or the entity name (for a business entity) of the target party. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the target party. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the target party. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set generation
         * @param generation The suffix (e.g., Jr., III) of the target party&#39;s name. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder generation(String generation) {
            this.generation = generation;
            return this;
        }
        
        /**
         * Set partyType
         * @param partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder partyType(String partyType) {
            this.partyType = partyType;
            return this;
        }
        
        /**
         * Set partyExactNameMatch
         * @param partyExactNameMatch Specify whether the search string must match the name of the target party exactly. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder partyExactNameMatch(Boolean partyExactNameMatch) {
            this.partyExactNameMatch = partyExactNameMatch;
            return this;
        }
        
        /**
         * Set partyRoleArray
         * @param partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder partyRoleArray(List<String> partyRoleArray) {
            this.partyRoleArray = partyRoleArray;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseYearFrom
         * @param caseYearFrom Limit the results of the search to those cases from the year specified or later (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseYearFrom(Integer caseYearFrom) {
            this.caseYearFrom = caseYearFrom;
            return this;
        }
        
        /**
         * Set caseYearTo
         * @param caseYearTo Limit the results of the search to those cases from the year specified or earlier (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseYearTo(Integer caseYearTo) {
            this.caseYearTo = caseYearTo;
            return this;
        }
        
        /**
         * Set ssnOrEin
         * @param ssnOrEin The Social Security number or the federal Employer Identification Number of the target party. Either number can be entered with or without dashes. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder ssnOrEin(String ssnOrEin) {
            this.ssnOrEin = ssnOrEin;
            return this;
        }
        
        /**
         * Set fourDigitSsn
         * @param fourDigitSsn The last four digits of the Social Security number of the target party.   Note: When specified, a last name/entity name must also be specified. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder fourDigitSsn(String fourDigitSsn) {
            this.fourDigitSsn = fourDigitSsn;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set caseDischargedStartDate
         * @param caseDischargedStartDate The date on which or after which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseDischargedStartDate(OffsetDateTime caseDischargedStartDate) {
            this.caseDischargedStartDate = caseDischargedStartDate;
            return this;
        }
        
        /**
         * Set caseDischargedEndDate
         * @param caseDischargedEndDate The date on which or before which the target case was marked as discharged within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseDischargedEndDate(OffsetDateTime caseDischargedEndDate) {
            this.caseDischargedEndDate = caseDischargedEndDate;
            return this;
        }
        
        /**
         * Set caseDismissedStartDate
         * @param caseDismissedStartDate The date on which or after which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00).    Note: This parameter is applicable since we only perform this search for Bankruptcy Court type. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseDismissedStartDate(OffsetDateTime caseDismissedStartDate) {
            this.caseDismissedStartDate = caseDismissedStartDate;
            return this;
        }
        
        /**
         * Set caseDismissedEndDate
         * @param caseDismissedEndDate The date on which or before which the target case was marked as dismissed within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseDismissedEndDate(OffsetDateTime caseDismissedEndDate) {
            this.caseDismissedEndDate = caseDismissedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchBankruptcyCourtsRequestBuilder
         */
        public SearchBankruptcyCourtsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchBankruptcyCourts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchBankruptcyCourtsCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchBankruptcyCourts request
         * @return PCLParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLParty execute() throws ApiException {
            ApiResponse<PCLParty> localVarResp = searchBankruptcyCourtsWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchBankruptcyCourts request with HTTP info returned
         * @return ApiResponse&lt;PCLParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLParty> executeWithHttpInfo() throws ApiException {
            return searchBankruptcyCourtsWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchBankruptcyCourts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLParty> _callback) throws ApiException {
            return searchBankruptcyCourtsAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, ssnOrEin, fourDigitSsn, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, caseDischargedStartDate, caseDischargedEndDate, caseDismissedStartDate, caseDismissedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for the specified party in PACER bankruptcy filings.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchBankruptcyCourtsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchBankruptcyCourtsRequestBuilder searchBankruptcyCourts(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchBankruptcyCourtsRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchCivilCasesCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/caseSearch/civilCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (natureOfSuitsArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "natureOfSuitsArray", natureOfSuitsArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCivilCasesValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchCivilCases(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchCivilCases(Async)");
        }

        return searchCivilCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLCase> searchCivilCasesWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchCivilCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchCivilCasesAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> natureOfSuitsArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCivilCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchCivilCasesRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> natureOfSuitsArray;
        private List<String> courtRegionIdArray;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchCivilCasesRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set natureOfSuitsArray
         * @param natureOfSuitsArray The PACER-assigned nature of suit classification of the target case. Please see Appendix E for valid nature-of-suit classifications for cases.    Scenario: When mulitple nature of suits needs to be requested.    Imagine for a given case number 12-1234 I would like to search with the nature of suit 110 (Insurance) and 140 (Negotiable Instrument), My query in the request will look like the example mentioned below.    Example: natureOfSuitsArray&#x3D;110&amp;natureOfSuitsArray&#x3D;140 (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder natureOfSuitsArray(List<String> natureOfSuitsArray) {
            this.natureOfSuitsArray = natureOfSuitsArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchCivilCasesRequestBuilder
         */
        public SearchCivilCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchCivilCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCivilCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchCivilCases request
         * @return PCLCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLCase execute() throws ApiException {
            ApiResponse<PCLCase> localVarResp = searchCivilCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchCivilCases request with HTTP info returned
         * @return ApiResponse&lt;PCLCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLCase> executeWithHttpInfo() throws ApiException {
            return searchCivilCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchCivilCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLCase> _callback) throws ApiException {
            return searchCivilCasesAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, natureOfSuitsArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for civil cases filed in PACER.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchCivilCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchCivilCasesRequestBuilder searchCivilCases(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchCivilCasesRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchCivilCasesInCourtsCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/partySearch/civilCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (partyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyType", partyType));
        }

        if (partyExactNameMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyExactNameMatch", partyExactNameMatch));
        }

        if (partyRoleArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partyRoleArray", partyRoleArray));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseYearFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearFrom", caseYearFrom));
        }

        if (caseYearTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearTo", caseYearTo));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCivilCasesInCourtsValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchCivilCasesInCourts(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchCivilCasesInCourts(Async)");
        }

        return searchCivilCasesInCourtsCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLParty> searchCivilCasesInCourtsWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchCivilCasesInCourtsValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchCivilCasesInCourtsAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCivilCasesInCourtsValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchCivilCasesInCourtsRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String lastName;
        private String firstName;
        private String middleName;
        private String generation;
        private String partyType;
        private Boolean partyExactNameMatch;
        private List<String> partyRoleArray;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private Integer caseYearFrom;
        private Integer caseYearTo;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchCivilCasesInCourtsRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name (for an individual) or the entity name (for a business entity) of the target party. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the target party. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the target party. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set generation
         * @param generation The name suffix (e.g., III, MD). (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder generation(String generation) {
            this.generation = generation;
            return this;
        }
        
        /**
         * Set partyType
         * @param partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder partyType(String partyType) {
            this.partyType = partyType;
            return this;
        }
        
        /**
         * Set partyExactNameMatch
         * @param partyExactNameMatch Specify whether the search string must match the name of the target party exactly. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder partyExactNameMatch(Boolean partyExactNameMatch) {
            this.partyExactNameMatch = partyExactNameMatch;
            return this;
        }
        
        /**
         * Set partyRoleArray
         * @param partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder partyRoleArray(List<String> partyRoleArray) {
            this.partyRoleArray = partyRoleArray;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseYearFrom
         * @param caseYearFrom Limit the results of the search to those cases from the year specified or later (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseYearFrom(Integer caseYearFrom) {
            this.caseYearFrom = caseYearFrom;
            return this;
        }
        
        /**
         * Set caseYearTo
         * @param caseYearTo Limit the results of the search to those cases from the year specified or earlier (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseYearTo(Integer caseYearTo) {
            this.caseYearTo = caseYearTo;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchCivilCasesInCourtsRequestBuilder
         */
        public SearchCivilCasesInCourtsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchCivilCasesInCourts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCivilCasesInCourtsCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchCivilCasesInCourts request
         * @return PCLParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLParty execute() throws ApiException {
            ApiResponse<PCLParty> localVarResp = searchCivilCasesInCourtsWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchCivilCasesInCourts request with HTTP info returned
         * @return ApiResponse&lt;PCLParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLParty> executeWithHttpInfo() throws ApiException {
            return searchCivilCasesInCourtsWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchCivilCasesInCourts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLParty> _callback) throws ApiException {
            return searchCivilCasesInCourtsAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for the specified party in civil cases filed in PACER.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchCivilCasesInCourtsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchCivilCasesInCourtsRequestBuilder searchCivilCasesInCourts(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchCivilCasesInCourtsRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchCriminalCasesCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/caseSearch/criminalCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCriminalCasesValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchCriminalCases(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchCriminalCases(Async)");
        }

        return searchCriminalCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLCase> searchCriminalCasesWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchCriminalCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchCriminalCasesAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCriminalCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchCriminalCasesRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchCriminalCasesRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchCriminalCasesRequestBuilder
         */
        public SearchCriminalCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchCriminalCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCriminalCasesCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchCriminalCases request
         * @return PCLCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLCase execute() throws ApiException {
            ApiResponse<PCLCase> localVarResp = searchCriminalCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchCriminalCases request with HTTP info returned
         * @return ApiResponse&lt;PCLCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLCase> executeWithHttpInfo() throws ApiException {
            return searchCriminalCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchCriminalCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLCase> _callback) throws ApiException {
            return searchCriminalCasesAsync(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for criminal cases in PACER.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchCriminalCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchCriminalCasesRequestBuilder searchCriminalCases(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchCriminalCasesRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchCriminalCases_0Call(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/partySearch/criminalCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (partyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyType", partyType));
        }

        if (partyExactNameMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyExactNameMatch", partyExactNameMatch));
        }

        if (partyRoleArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partyRoleArray", partyRoleArray));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseYearFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearFrom", caseYearFrom));
        }

        if (caseYearTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearTo", caseYearTo));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCriminalCases_0ValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchCriminalCases_0(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchCriminalCases_0(Async)");
        }

        return searchCriminalCases_0Call(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLParty> searchCriminalCases_0WithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchCriminalCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchCriminalCases_0Async(String pacerUserId, String pacerClientCode, String caseNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCriminalCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchCriminalCases0RequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer pacerCaseId;
        private String lastName;
        private String firstName;
        private String middleName;
        private String generation;
        private String partyType;
        private Boolean partyExactNameMatch;
        private List<String> partyRoleArray;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private Integer caseYearFrom;
        private Integer caseYearTo;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchCriminalCases0RequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name (for an individual) or the entity name (for a business entity) of the target party. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the target party. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the target party. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set generation
         * @param generation The suffix (e.g., Jr., III) of the target party&#39;s name. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder generation(String generation) {
            this.generation = generation;
            return this;
        }
        
        /**
         * Set partyType
         * @param partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder partyType(String partyType) {
            this.partyType = partyType;
            return this;
        }
        
        /**
         * Set partyExactNameMatch
         * @param partyExactNameMatch Specify whether the search string must match the name of the target party exactly. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder partyExactNameMatch(Boolean partyExactNameMatch) {
            this.partyExactNameMatch = partyExactNameMatch;
            return this;
        }
        
        /**
         * Set partyRoleArray
         * @param partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder partyRoleArray(List<String> partyRoleArray) {
            this.partyRoleArray = partyRoleArray;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseYearFrom
         * @param caseYearFrom Limit the results of the search to those cases from the year specified or later (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseYearFrom(Integer caseYearFrom) {
            this.caseYearFrom = caseYearFrom;
            return this;
        }
        
        /**
         * Set caseYearTo
         * @param caseYearTo Limit the results of the search to those cases from the year specified or earlier (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseYearTo(Integer caseYearTo) {
            this.caseYearTo = caseYearTo;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchCriminalCases0RequestBuilder
         */
        public SearchCriminalCases0RequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchCriminalCases_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchCriminalCases_0Call(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchCriminalCases_0 request
         * @return PCLParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLParty execute() throws ApiException {
            ApiResponse<PCLParty> localVarResp = searchCriminalCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchCriminalCases_0 request with HTTP info returned
         * @return ApiResponse&lt;PCLParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLParty> executeWithHttpInfo() throws ApiException {
            return searchCriminalCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchCriminalCases_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLParty> _callback) throws ApiException {
            return searchCriminalCases_0Async(pacerUserId, pacerClientCode, caseNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for the specified party in PACER criminal cases.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchCriminalCases0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchCriminalCases0RequestBuilder searchCriminalCases_0(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchCriminalCases0RequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchMultiDistrictCourtCasesCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/caseSearch/multiDistrictCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (jpmlNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jpmlNumber", jpmlNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMultiDistrictCourtCasesValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchMultiDistrictCourtCases(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchMultiDistrictCourtCases(Async)");
        }

        return searchMultiDistrictCourtCasesCall(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLCase> searchMultiDistrictCourtCasesWithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchMultiDistrictCourtCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchMultiDistrictCourtCasesAsync(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMultiDistrictCourtCasesValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchMultiDistrictCourtCasesRequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer jpmlNumber;
        private Integer pacerCaseId;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchMultiDistrictCourtCasesRequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set jpmlNumber
         * @param jpmlNumber Master JPML Case Number. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder jpmlNumber(Integer jpmlNumber) {
            this.jpmlNumber = jpmlNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchMultiDistrictCourtCasesRequestBuilder
         */
        public SearchMultiDistrictCourtCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchMultiDistrictCourtCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchMultiDistrictCourtCasesCall(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchMultiDistrictCourtCases request
         * @return PCLCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLCase execute() throws ApiException {
            ApiResponse<PCLCase> localVarResp = searchMultiDistrictCourtCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchMultiDistrictCourtCases request with HTTP info returned
         * @return ApiResponse&lt;PCLCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLCase> executeWithHttpInfo() throws ApiException {
            return searchMultiDistrictCourtCasesWithHttpInfo(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchMultiDistrictCourtCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLCase> _callback) throws ApiException {
            return searchMultiDistrictCourtCasesAsync(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for multidistrict litigation in PACER.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchMultiDistrictCourtCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchMultiDistrictCourtCasesRequestBuilder searchMultiDistrictCourtCases(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchMultiDistrictCourtCasesRequestBuilder(pacerUserId, pacerClientCode);
    }
    private okhttp3.Call searchMultiDistrictCourtCases_0Call(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pacerCaseLocator/partySearch/multiDistrictCourts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pacerUserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerUserId", pacerUserId));
        }

        if (pacerClientCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerClientCode", pacerClientCode));
        }

        if (caseNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseNumber", caseNumber));
        }

        if (jpmlNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jpmlNumber", jpmlNumber));
        }

        if (pacerCaseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pacerCaseId", pacerCaseId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (firstName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("firstName", firstName));
        }

        if (middleName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("middleName", middleName));
        }

        if (generation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("generation", generation));
        }

        if (partyType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyType", partyType));
        }

        if (partyExactNameMatch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyExactNameMatch", partyExactNameMatch));
        }

        if (partyRoleArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "partyRoleArray", partyRoleArray));
        }

        if (caseTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTitle", caseTitle));
        }

        if (caseOffice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseOffice", caseOffice));
        }

        if (caseSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseSequenceNumber", caseSequenceNumber));
        }

        if (caseYear != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYear", caseYear));
        }

        if (caseTypeArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "caseTypeArray", caseTypeArray));
        }

        if (courtRegionIdArray != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "courtRegionIdArray", courtRegionIdArray));
        }

        if (caseYearFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearFrom", caseYearFrom));
        }

        if (caseYearTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseYearTo", caseYearTo));
        }

        if (caseFiledStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledStartDate", caseFiledStartDate));
        }

        if (caseFiledEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseFiledEndDate", caseFiledEndDate));
        }

        if (caseTerminatedStartDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedStartDate", caseTerminatedStartDate));
        }

        if (caseTerminatedEndDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseTerminatedEndDate", caseTerminatedEndDate));
        }

        if (sortParameterQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortParameterQuery", sortParameterQuery));
        }

        if (caseStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("caseStatus", caseStatus));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchMultiDistrictCourtCases_0ValidateBeforeCall(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pacerUserId' is set
        if (pacerUserId == null) {
            throw new ApiException("Missing the required parameter 'pacerUserId' when calling searchMultiDistrictCourtCases_0(Async)");
        }

        // verify the required parameter 'pacerClientCode' is set
        if (pacerClientCode == null) {
            throw new ApiException("Missing the required parameter 'pacerClientCode' when calling searchMultiDistrictCourtCases_0(Async)");
        }

        return searchMultiDistrictCourtCases_0Call(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);

    }


    private ApiResponse<PCLParty> searchMultiDistrictCourtCases_0WithHttpInfo(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchMultiDistrictCourtCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, null);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchMultiDistrictCourtCases_0Async(String pacerUserId, String pacerClientCode, String caseNumber, Integer jpmlNumber, Integer pacerCaseId, String lastName, String firstName, String middleName, String generation, String partyType, Boolean partyExactNameMatch, List<String> partyRoleArray, String caseTitle, Integer caseOffice, Integer caseSequenceNumber, Integer caseYear, List<String> caseTypeArray, List<String> courtRegionIdArray, Integer caseYearFrom, Integer caseYearTo, OffsetDateTime caseFiledStartDate, OffsetDateTime caseFiledEndDate, OffsetDateTime caseTerminatedStartDate, OffsetDateTime caseTerminatedEndDate, String sortParameterQuery, String caseStatus, Integer pageNumber, final ApiCallback<PCLParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchMultiDistrictCourtCases_0ValidateBeforeCall(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PCLParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchMultiDistrictCourtCases0RequestBuilder {
        private final String pacerUserId;
        private final String pacerClientCode;
        private String caseNumber;
        private Integer jpmlNumber;
        private Integer pacerCaseId;
        private String lastName;
        private String firstName;
        private String middleName;
        private String generation;
        private String partyType;
        private Boolean partyExactNameMatch;
        private List<String> partyRoleArray;
        private String caseTitle;
        private Integer caseOffice;
        private Integer caseSequenceNumber;
        private Integer caseYear;
        private List<String> caseTypeArray;
        private List<String> courtRegionIdArray;
        private Integer caseYearFrom;
        private Integer caseYearTo;
        private OffsetDateTime caseFiledStartDate;
        private OffsetDateTime caseFiledEndDate;
        private OffsetDateTime caseTerminatedStartDate;
        private OffsetDateTime caseTerminatedEndDate;
        private String sortParameterQuery;
        private String caseStatus;
        private Integer pageNumber;

        private SearchMultiDistrictCourtCases0RequestBuilder(String pacerUserId, String pacerClientCode) {
            this.pacerUserId = pacerUserId;
            this.pacerClientCode = pacerClientCode;
        }

        /**
         * Set caseNumber
         * @param caseNumber The case number of the target case. You may use the following case-number formats:    yy-nnnnn    yy-tp-nnnnn    yy tp nnnnn    yytpnnnnn    o:yy-nnnnn    o:yy-tp-nnnnn    o:yy tp nnnnn    o:yytpnnnnn   where:   yy  case year (may be 2 or 4 digits)   nnnnn  case number (up to 5 digits)   tp  case type (up to 2 characters)   o  office where the case was filed (1 digit). (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseNumber(String caseNumber) {
            this.caseNumber = caseNumber;
            return this;
        }
        
        /**
         * Set jpmlNumber
         * @param jpmlNumber Master JPML Case Number. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder jpmlNumber(Integer jpmlNumber) {
            this.jpmlNumber = jpmlNumber;
            return this;
        }
        
        /**
         * Set pacerCaseId
         * @param pacerCaseId The PACER-assigned identifier of the target case. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder pacerCaseId(Integer pacerCaseId) {
            this.pacerCaseId = pacerCaseId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName The last name (for an individual) or the entity name (for a business entity) of the target party. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set firstName
         * @param firstName The first name of the target party. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder firstName(String firstName) {
            this.firstName = firstName;
            return this;
        }
        
        /**
         * Set middleName
         * @param middleName The middle name of the target party. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder middleName(String middleName) {
            this.middleName = middleName;
            return this;
        }
        
        /**
         * Set generation
         * @param generation The suffix (e.g., Jr., III) of the target party&#39;s name. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder generation(String generation) {
            this.generation = generation;
            return this;
        }
        
        /**
         * Set partyType
         * @param partyType The court-assigned party type for a party involved in a case. Party type codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder partyType(String partyType) {
            this.partyType = partyType;
            return this;
        }
        
        /**
         * Set partyExactNameMatch
         * @param partyExactNameMatch Specify whether the search string must match the name of the target party exactly. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder partyExactNameMatch(Boolean partyExactNameMatch) {
            this.partyExactNameMatch = partyExactNameMatch;
            return this;
        }
        
        /**
         * Set partyRoleArray
         * @param partyRoleArray The court-assigned role for a party to a case. Party role codes are created and assigned by individual courts, and as such, their meanings can vary from court to court. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder partyRoleArray(List<String> partyRoleArray) {
            this.partyRoleArray = partyRoleArray;
            return this;
        }
        
        /**
         * Set caseTitle
         * @param caseTitle The title of the target case.    Examples:    A search for case title john doe v will result in all cases with the case title John Doe v.    A search for case title Acme, Inc. will result in all case titles starting with Acme, Inc. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseTitle(String caseTitle) {
            this.caseTitle = caseTitle;
            return this;
        }
        
        /**
         * Set caseOffice
         * @param caseOffice The divisional office in which the case was filed. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseOffice(Integer caseOffice) {
            this.caseOffice = caseOffice;
            return this;
        }
        
        /**
         * Set caseSequenceNumber
         * @param caseSequenceNumber The PACER-assigned sequence number of the target case. Ex 12345 (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseSequenceNumber(Integer caseSequenceNumber) {
            this.caseSequenceNumber = caseSequenceNumber;
            return this;
        }
        
        /**
         * Set caseYear
         * @param caseYear The two- or four-digit year in which the target case was filed. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseYear(Integer caseYear) {
            this.caseYear = caseYear;
            return this;
        }
        
        /**
         * Set caseTypeArray
         * @param caseTypeArray The PACER-assigned case type of the target case. Please see Appendix A for valid case-type values.    Scenario: When mulitple case types needs to be requested.    Imagine for a given case number 12-1234 I would like to search only with the case type civil(cv) and criminal(cr), My query in the request will look like the example mentioned below.    Example: caseTypeArray&#x3D;cv&amp;caseTypeArray&#x3D;cr (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseTypeArray(List<String> caseTypeArray) {
            this.caseTypeArray = caseTypeArray;
            return this;
        }
        
        /**
         * Set courtRegionIdArray
         * @param courtRegionIdArray The PACER-assigned court region in which the target case was filed. Please see Appendix B for valid court-region values.    Scenario: When mulitple court region ids needs to be requested.    Imagine for a given case number 12-1234 I would like to search in the court regions California Central (cac) and California Eastern (cae), My query in the request will look like the example mentioned below.    Example: courtRegionIdArray&#x3D;cac&amp;courtRegionIdArray&#x3D;cae (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder courtRegionIdArray(List<String> courtRegionIdArray) {
            this.courtRegionIdArray = courtRegionIdArray;
            return this;
        }
        
        /**
         * Set caseYearFrom
         * @param caseYearFrom Limit the results of the search to those cases from the year specified or later (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseYearFrom(Integer caseYearFrom) {
            this.caseYearFrom = caseYearFrom;
            return this;
        }
        
        /**
         * Set caseYearTo
         * @param caseYearTo Limit the results of the search to those cases from the year specified or earlier (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseYearTo(Integer caseYearTo) {
            this.caseYearTo = caseYearTo;
            return this;
        }
        
        /**
         * Set caseFiledStartDate
         * @param caseFiledStartDate The date on which or after which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseFiledStartDate(OffsetDateTime caseFiledStartDate) {
            this.caseFiledStartDate = caseFiledStartDate;
            return this;
        }
        
        /**
         * Set caseFiledEndDate
         * @param caseFiledEndDate The date on which or before which the target case was filed. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseFiledEndDate(OffsetDateTime caseFiledEndDate) {
            this.caseFiledEndDate = caseFiledEndDate;
            return this;
        }
        
        /**
         * Set caseTerminatedStartDate
         * @param caseTerminatedStartDate The date on which or after which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseTerminatedStartDate(OffsetDateTime caseTerminatedStartDate) {
            this.caseTerminatedStartDate = caseTerminatedStartDate;
            return this;
        }
        
        /**
         * Set caseTerminatedEndDate
         * @param caseTerminatedEndDate The date on which or before which the target case was marked as terminated within PACER. The date format must be YYYY-MM-DDTHH:MM:SS+ZZ:zz, (e.g., 2017-12-20T12:54:24+00:00). (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseTerminatedEndDate(OffsetDateTime caseTerminatedEndDate) {
            this.caseTerminatedEndDate = caseTerminatedEndDate;
            return this;
        }
        
        /**
         * Set sortParameterQuery
         * @param sortParameterQuery How search results from PACER are to be sorted. Please see Appendix C for valid sort-related settings.    Scenario 1: When mulitple sort paramters needs to be requested.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of courtId and caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtId,ASC&amp;caseId,ASC    Scenario 2: When you want to sort the response using the case parameters in the party search.    Imagine for a given case number 12-1234 I would like to sort the results in the Ascending order of caseOffice and descending order of caseId, My query in the request will look like the example mentioned below.    Example: sortParameterQuery&#x3D;courtCase.caseOffice,ASC&amp;caseid,DESC (optional, default to sort&#x3D;caseYear,DESC)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder sortParameterQuery(String sortParameterQuery) {
            this.sortParameterQuery = sortParameterQuery;
            return this;
        }
        
        /**
         * Set caseStatus
         * @param caseStatus Whether the target case is marked as &#39;open&#39; or &#39;closed&#39; within PACER. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder caseStatus(String caseStatus) {
            this.caseStatus = caseStatus;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber The page number of the search results to be retrieved. (optional)
         * @return SearchMultiDistrictCourtCases0RequestBuilder
         */
        public SearchMultiDistrictCourtCases0RequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchMultiDistrictCourtCases_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchMultiDistrictCourtCases_0Call(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }


        /**
         * Execute searchMultiDistrictCourtCases_0 request
         * @return PCLParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PCLParty execute() throws ApiException {
            ApiResponse<PCLParty> localVarResp = searchMultiDistrictCourtCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchMultiDistrictCourtCases_0 request with HTTP info returned
         * @return ApiResponse&lt;PCLParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PCLParty> executeWithHttpInfo() throws ApiException {
            return searchMultiDistrictCourtCases_0WithHttpInfo(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber);
        }

        /**
         * Execute searchMultiDistrictCourtCases_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PCLParty> _callback) throws ApiException {
            return searchMultiDistrictCourtCases_0Async(pacerUserId, pacerClientCode, caseNumber, jpmlNumber, pacerCaseId, lastName, firstName, middleName, generation, partyType, partyExactNameMatch, partyRoleArray, caseTitle, caseOffice, caseSequenceNumber, caseYear, caseTypeArray, courtRegionIdArray, caseYearFrom, caseYearTo, caseFiledStartDate, caseFiledEndDate, caseTerminatedStartDate, caseTerminatedEndDate, sortParameterQuery, caseStatus, pageNumber, _callback);
        }
    }

    /**
     * PACER Case Locator Search API for All Courts.
     * Search for the specified party in multidistrict litigation in PACER.
     * @param pacerUserId The username of the PACER account under which the search is to be performed. (required)
     * @param pacerClientCode The PACER client code under which the search is to be performed. (required)
     * @return SearchMultiDistrictCourtCases0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public SearchMultiDistrictCourtCases0RequestBuilder searchMultiDistrictCourtCases_0(String pacerUserId, String pacerClientCode) throws IllegalArgumentException {
        if (pacerUserId == null) throw new IllegalArgumentException("\"pacerUserId\" is required but got null");
            if (pacerUserId != null && pacerUserId.length() < 6) {
              throw new IllegalArgumentException("Invalid value for pacerUserId. Length must be greater than or equal to 6.");
            }

        if (pacerClientCode == null) throw new IllegalArgumentException("\"pacerClientCode\" is required but got null");
            if (pacerClientCode != null && pacerClientCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for pacerClientCode. Length must be greater than or equal to 1.");
            }

        return new SearchMultiDistrictCourtCases0RequestBuilder(pacerUserId, pacerClientCode);
    }
}
