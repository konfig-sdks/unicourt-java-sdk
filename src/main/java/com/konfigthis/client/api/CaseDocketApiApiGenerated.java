/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Attorney;
import com.konfigthis.client.model.Attorneys;
import com.konfigthis.client.model.DocketEntries;
import com.konfigthis.client.model.DocketEntryPrimaryDocuments;
import com.konfigthis.client.model.DocketEntrySecondaryDocuments;
import com.konfigthis.client.model.Hearings;
import com.konfigthis.client.model.Judge;
import com.konfigthis.client.model.Judges;
import com.konfigthis.client.model.ModelCase;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Parties;
import com.konfigthis.client.model.Party;
import com.konfigthis.client.model.PartyAttorneyAssociations;
import com.konfigthis.client.model.RelatedCases;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CaseDocketApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CaseDocketApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CaseDocketApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssociatedAttorneyDetailsCall(String partyId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/party/{partyId}/associatedAttorneys"
            .replace("{" + "partyId" + "}", localVarApiClient.escapeString(partyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociatedAttorneyDetailsValidateBeforeCall(String partyId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling getAssociatedAttorneyDetails(Async)");
        }

        return getAssociatedAttorneyDetailsCall(partyId, pageNumber, _callback);

    }


    private ApiResponse<PartyAttorneyAssociations> getAssociatedAttorneyDetailsWithHttpInfo(String partyId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getAssociatedAttorneyDetailsValidateBeforeCall(partyId, pageNumber, null);
        Type localVarReturnType = new TypeToken<PartyAttorneyAssociations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssociatedAttorneyDetailsAsync(String partyId, Integer pageNumber, final ApiCallback<PartyAttorneyAssociations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociatedAttorneyDetailsValidateBeforeCall(partyId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PartyAttorneyAssociations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssociatedAttorneyDetailsRequestBuilder {
        private final String partyId;
        private Integer pageNumber;

        private GetAssociatedAttorneyDetailsRequestBuilder(String partyId) {
            this.partyId = partyId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetAssociatedAttorneyDetailsRequestBuilder
         */
        public GetAssociatedAttorneyDetailsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getAssociatedAttorneyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssociatedAttorneyDetailsCall(partyId, pageNumber, _callback);
        }


        /**
         * Execute getAssociatedAttorneyDetails request
         * @return PartyAttorneyAssociations
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PartyAttorneyAssociations execute() throws ApiException {
            ApiResponse<PartyAttorneyAssociations> localVarResp = getAssociatedAttorneyDetailsWithHttpInfo(partyId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssociatedAttorneyDetails request with HTTP info returned
         * @return ApiResponse&lt;PartyAttorneyAssociations&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartyAttorneyAssociations> executeWithHttpInfo() throws ApiException {
            return getAssociatedAttorneyDetailsWithHttpInfo(partyId, pageNumber);
        }

        /**
         * Execute getAssociatedAttorneyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartyAttorneyAssociations> _callback) throws ApiException {
            return getAssociatedAttorneyDetailsAsync(partyId, pageNumber, _callback);
        }
    }

    /**
     * Gets Associated Attorney details for a requested Party ID.
     * Retrieve the attorneys in the case with the specified partyId value.
     * @param partyId Retrieve the party with the specified partyId value. (required)
     * @return GetAssociatedAttorneyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssociatedAttorneyDetailsRequestBuilder getAssociatedAttorneyDetails(String partyId) throws IllegalArgumentException {
        if (partyId == null) throw new IllegalArgumentException("\"partyId\" is required but got null");
            if (partyId != null && partyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for partyId. Length must be greater than or equal to 18.");
            }

        return new GetAssociatedAttorneyDetailsRequestBuilder(partyId);
    }
    private okhttp3.Call getAssociatedPartiesCall(String attorneyId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attorney/{attorneyId}/associatedParties"
            .replace("{" + "attorneyId" + "}", localVarApiClient.escapeString(attorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociatedPartiesValidateBeforeCall(String attorneyId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attorneyId' is set
        if (attorneyId == null) {
            throw new ApiException("Missing the required parameter 'attorneyId' when calling getAssociatedParties(Async)");
        }

        return getAssociatedPartiesCall(attorneyId, pageNumber, _callback);

    }


    private ApiResponse<PartyAttorneyAssociations> getAssociatedPartiesWithHttpInfo(String attorneyId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getAssociatedPartiesValidateBeforeCall(attorneyId, pageNumber, null);
        Type localVarReturnType = new TypeToken<PartyAttorneyAssociations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssociatedPartiesAsync(String attorneyId, Integer pageNumber, final ApiCallback<PartyAttorneyAssociations> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociatedPartiesValidateBeforeCall(attorneyId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<PartyAttorneyAssociations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssociatedPartiesRequestBuilder {
        private final String attorneyId;
        private Integer pageNumber;

        private GetAssociatedPartiesRequestBuilder(String attorneyId) {
            this.attorneyId = attorneyId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetAssociatedPartiesRequestBuilder
         */
        public GetAssociatedPartiesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getAssociatedParties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssociatedPartiesCall(attorneyId, pageNumber, _callback);
        }


        /**
         * Execute getAssociatedParties request
         * @return PartyAttorneyAssociations
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public PartyAttorneyAssociations execute() throws ApiException {
            ApiResponse<PartyAttorneyAssociations> localVarResp = getAssociatedPartiesWithHttpInfo(attorneyId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssociatedParties request with HTTP info returned
         * @return ApiResponse&lt;PartyAttorneyAssociations&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartyAttorneyAssociations> executeWithHttpInfo() throws ApiException {
            return getAssociatedPartiesWithHttpInfo(attorneyId, pageNumber);
        }

        /**
         * Execute getAssociatedParties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartyAttorneyAssociations> _callback) throws ApiException {
            return getAssociatedPartiesAsync(attorneyId, pageNumber, _callback);
        }
    }

    /**
     * Gets Associated Party details for a requested Attorney ID.
     * Retrieve the parties represented by the attorney with the specified attorneyId value.
     * @param attorneyId Retrieve the parties represented by the attorney with the specified attorneyId value. (required)
     * @return GetAssociatedPartiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetAssociatedPartiesRequestBuilder getAssociatedParties(String attorneyId) throws IllegalArgumentException {
        if (attorneyId == null) throw new IllegalArgumentException("\"attorneyId\" is required but got null");
            if (attorneyId != null && attorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for attorneyId. Length must be greater than or equal to 18.");
            }

        return new GetAssociatedPartiesRequestBuilder(attorneyId);
    }
    private okhttp3.Call getAttorneyDetailsCall(String attorneyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attorney/{attorneyId}"
            .replace("{" + "attorneyId" + "}", localVarApiClient.escapeString(attorneyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttorneyDetailsValidateBeforeCall(String attorneyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attorneyId' is set
        if (attorneyId == null) {
            throw new ApiException("Missing the required parameter 'attorneyId' when calling getAttorneyDetails(Async)");
        }

        return getAttorneyDetailsCall(attorneyId, _callback);

    }


    private ApiResponse<Attorney> getAttorneyDetailsWithHttpInfo(String attorneyId) throws ApiException {
        okhttp3.Call localVarCall = getAttorneyDetailsValidateBeforeCall(attorneyId, null);
        Type localVarReturnType = new TypeToken<Attorney>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttorneyDetailsAsync(String attorneyId, final ApiCallback<Attorney> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttorneyDetailsValidateBeforeCall(attorneyId, _callback);
        Type localVarReturnType = new TypeToken<Attorney>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttorneyDetailsRequestBuilder {
        private final String attorneyId;

        private GetAttorneyDetailsRequestBuilder(String attorneyId) {
            this.attorneyId = attorneyId;
        }

        /**
         * Build call for getAttorneyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttorneyDetailsCall(attorneyId, _callback);
        }


        /**
         * Execute getAttorneyDetails request
         * @return Attorney
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Attorney execute() throws ApiException {
            ApiResponse<Attorney> localVarResp = getAttorneyDetailsWithHttpInfo(attorneyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttorneyDetails request with HTTP info returned
         * @return ApiResponse&lt;Attorney&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Attorney> executeWithHttpInfo() throws ApiException {
            return getAttorneyDetailsWithHttpInfo(attorneyId);
        }

        /**
         * Execute getAttorneyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Attorney> _callback) throws ApiException {
            return getAttorneyDetailsAsync(attorneyId, _callback);
        }
    }

    /**
     * Gets details for a requested Attorney ID.
     * Retrieve the attorney with the specified attorneyId value.
     * @param attorneyId Retrieve the attorney with the specified attorneyId value. (required)
     * @return GetAttorneyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetAttorneyDetailsRequestBuilder getAttorneyDetails(String attorneyId) throws IllegalArgumentException {
        if (attorneyId == null) throw new IllegalArgumentException("\"attorneyId\" is required but got null");
            if (attorneyId != null && attorneyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for attorneyId. Length must be greater than or equal to 18.");
            }

        return new GetAttorneyDetailsRequestBuilder(attorneyId);
    }
    private okhttp3.Call getAttorneysByCaseIdCall(String caseId, Boolean isVisible, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/attorneys"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isVisible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVisible", isVisible));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttorneysByCaseIdValidateBeforeCall(String caseId, Boolean isVisible, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getAttorneysByCaseId(Async)");
        }

        return getAttorneysByCaseIdCall(caseId, isVisible, pageNumber, _callback);

    }


    private ApiResponse<Attorneys> getAttorneysByCaseIdWithHttpInfo(String caseId, Boolean isVisible, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getAttorneysByCaseIdValidateBeforeCall(caseId, isVisible, pageNumber, null);
        Type localVarReturnType = new TypeToken<Attorneys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttorneysByCaseIdAsync(String caseId, Boolean isVisible, Integer pageNumber, final ApiCallback<Attorneys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttorneysByCaseIdValidateBeforeCall(caseId, isVisible, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<Attorneys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAttorneysByCaseIdRequestBuilder {
        private final String caseId;
        private Boolean isVisible;
        private Integer pageNumber;

        private GetAttorneysByCaseIdRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set isVisible
         * @param isVisible Retrieve attorneys in the case with the specified caseId value whose isVisible flag is set to the specified value. (optional)
         * @return GetAttorneysByCaseIdRequestBuilder
         */
        public GetAttorneysByCaseIdRequestBuilder isVisible(Boolean isVisible) {
            this.isVisible = isVisible;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetAttorneysByCaseIdRequestBuilder
         */
        public GetAttorneysByCaseIdRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getAttorneysByCaseId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttorneysByCaseIdCall(caseId, isVisible, pageNumber, _callback);
        }


        /**
         * Execute getAttorneysByCaseId request
         * @return Attorneys
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Attorneys execute() throws ApiException {
            ApiResponse<Attorneys> localVarResp = getAttorneysByCaseIdWithHttpInfo(caseId, isVisible, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAttorneysByCaseId request with HTTP info returned
         * @return ApiResponse&lt;Attorneys&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Attorneys> executeWithHttpInfo() throws ApiException {
            return getAttorneysByCaseIdWithHttpInfo(caseId, isVisible, pageNumber);
        }

        /**
         * Execute getAttorneysByCaseId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Attorneys> _callback) throws ApiException {
            return getAttorneysByCaseIdAsync(caseId, isVisible, pageNumber, _callback);
        }
    }

    /**
     * Gets Attorneys for a requested Case ID.
     * Retrieve the attorneys in the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetAttorneysByCaseIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetAttorneysByCaseIdRequestBuilder getAttorneysByCaseId(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetAttorneysByCaseIdRequestBuilder(caseId);
    }
    private okhttp3.Call getCaseInfoCall(String caseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCaseInfoValidateBeforeCall(String caseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getCaseInfo(Async)");
        }

        return getCaseInfoCall(caseId, _callback);

    }


    private ApiResponse<ModelCase> getCaseInfoWithHttpInfo(String caseId) throws ApiException {
        okhttp3.Call localVarCall = getCaseInfoValidateBeforeCall(caseId, null);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCaseInfoAsync(String caseId, final ApiCallback<ModelCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCaseInfoValidateBeforeCall(caseId, _callback);
        Type localVarReturnType = new TypeToken<ModelCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCaseInfoRequestBuilder {
        private final String caseId;

        private GetCaseInfoRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Build call for getCaseInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCaseInfoCall(caseId, _callback);
        }


        /**
         * Execute getCaseInfo request
         * @return ModelCase
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ModelCase execute() throws ApiException {
            ApiResponse<ModelCase> localVarResp = getCaseInfoWithHttpInfo(caseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseInfo request with HTTP info returned
         * @return ApiResponse&lt;ModelCase&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ModelCase> executeWithHttpInfo() throws ApiException {
            return getCaseInfoWithHttpInfo(caseId);
        }

        /**
         * Execute getCaseInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ModelCase> _callback) throws ApiException {
            return getCaseInfoAsync(caseId, _callback);
        }
    }

    /**
     * Gets case information for a requested Case ID.
     * Retrieve the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetCaseInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetCaseInfoRequestBuilder getCaseInfo(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetCaseInfoRequestBuilder(caseId);
    }
    private okhttp3.Call getCasePartiesCall(String caseId, Boolean isVisible, Integer pageNumber, String partyRoleId, String partyRoleGroupId, String attorneyRepresentationTypeId, String partyClassificationType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/parties"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isVisible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVisible", isVisible));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        if (partyRoleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyRoleId", partyRoleId));
        }

        if (partyRoleGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyRoleGroupId", partyRoleGroupId));
        }

        if (attorneyRepresentationTypeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attorneyRepresentationTypeId", attorneyRepresentationTypeId));
        }

        if (partyClassificationType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("partyClassificationType", partyClassificationType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCasePartiesValidateBeforeCall(String caseId, Boolean isVisible, Integer pageNumber, String partyRoleId, String partyRoleGroupId, String attorneyRepresentationTypeId, String partyClassificationType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getCaseParties(Async)");
        }

        return getCasePartiesCall(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType, _callback);

    }


    private ApiResponse<Parties> getCasePartiesWithHttpInfo(String caseId, Boolean isVisible, Integer pageNumber, String partyRoleId, String partyRoleGroupId, String attorneyRepresentationTypeId, String partyClassificationType) throws ApiException {
        okhttp3.Call localVarCall = getCasePartiesValidateBeforeCall(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType, null);
        Type localVarReturnType = new TypeToken<Parties>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getCasePartiesAsync(String caseId, Boolean isVisible, Integer pageNumber, String partyRoleId, String partyRoleGroupId, String attorneyRepresentationTypeId, String partyClassificationType, final ApiCallback<Parties> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCasePartiesValidateBeforeCall(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType, _callback);
        Type localVarReturnType = new TypeToken<Parties>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetCasePartiesRequestBuilder {
        private final String caseId;
        private Boolean isVisible;
        private Integer pageNumber;
        private String partyRoleId;
        private String partyRoleGroupId;
        private String attorneyRepresentationTypeId;
        private String partyClassificationType;

        private GetCasePartiesRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set isVisible
         * @param isVisible Retrieve parties in the case with the specified caseId value whose isVisible flag is set to the specified value. (optional)
         * @return GetCasePartiesRequestBuilder
         */
        public GetCasePartiesRequestBuilder isVisible(Boolean isVisible) {
            this.isVisible = isVisible;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetCasePartiesRequestBuilder
         */
        public GetCasePartiesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Set partyRoleId
         * @param partyRoleId Retrieve all parties with the specified partyRoleId value in the case with the specified caseId value. (optional)
         * @return GetCasePartiesRequestBuilder
         */
        public GetCasePartiesRequestBuilder partyRoleId(String partyRoleId) {
            this.partyRoleId = partyRoleId;
            return this;
        }
        
        /**
         * Set partyRoleGroupId
         * @param partyRoleGroupId Retrieve all parties with the specified partyRoleGroupId value in the case with the specified caseId value. (optional)
         * @return GetCasePartiesRequestBuilder
         */
        public GetCasePartiesRequestBuilder partyRoleGroupId(String partyRoleGroupId) {
            this.partyRoleGroupId = partyRoleGroupId;
            return this;
        }
        
        /**
         * Set attorneyRepresentationTypeId
         * @param attorneyRepresentationTypeId Retrieve all parties with the specified attorneyRepresentationTypeId value in the case with the specified caseId value. (optional)
         * @return GetCasePartiesRequestBuilder
         */
        public GetCasePartiesRequestBuilder attorneyRepresentationTypeId(String attorneyRepresentationTypeId) {
            this.attorneyRepresentationTypeId = attorneyRepresentationTypeId;
            return this;
        }
        
        /**
         * Set partyClassificationType
         * @param partyClassificationType Retrieve all parties with the specified partyClassificationType value in the case with the specified caseId value. (optional)
         * @return GetCasePartiesRequestBuilder
         */
        public GetCasePartiesRequestBuilder partyClassificationType(String partyClassificationType) {
            this.partyClassificationType = partyClassificationType;
            return this;
        }
        
        /**
         * Build call for getCaseParties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCasePartiesCall(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType, _callback);
        }


        /**
         * Execute getCaseParties request
         * @return Parties
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Parties execute() throws ApiException {
            ApiResponse<Parties> localVarResp = getCasePartiesWithHttpInfo(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getCaseParties request with HTTP info returned
         * @return ApiResponse&lt;Parties&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Parties> executeWithHttpInfo() throws ApiException {
            return getCasePartiesWithHttpInfo(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType);
        }

        /**
         * Execute getCaseParties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Parties> _callback) throws ApiException {
            return getCasePartiesAsync(caseId, isVisible, pageNumber, partyRoleId, partyRoleGroupId, attorneyRepresentationTypeId, partyClassificationType, _callback);
        }
    }

    /**
     * Gets Parties for a requested Case ID.
     * Retrieve the parties involved in the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetCasePartiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetCasePartiesRequestBuilder getCaseParties(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetCasePartiesRequestBuilder(caseId);
    }
    private okhttp3.Call getDocketEntriesCall(String caseId, Integer docketNumber, String sortBy, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/docketEntries"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (docketNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docketNumber", docketNumber));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDocketEntriesValidateBeforeCall(String caseId, Integer docketNumber, String sortBy, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getDocketEntries(Async)");
        }

        return getDocketEntriesCall(caseId, docketNumber, sortBy, pageNumber, _callback);

    }


    private ApiResponse<DocketEntries> getDocketEntriesWithHttpInfo(String caseId, Integer docketNumber, String sortBy, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getDocketEntriesValidateBeforeCall(caseId, docketNumber, sortBy, pageNumber, null);
        Type localVarReturnType = new TypeToken<DocketEntries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDocketEntriesAsync(String caseId, Integer docketNumber, String sortBy, Integer pageNumber, final ApiCallback<DocketEntries> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDocketEntriesValidateBeforeCall(caseId, docketNumber, sortBy, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<DocketEntries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDocketEntriesRequestBuilder {
        private final String caseId;
        private Integer docketNumber;
        private String sortBy;
        private Integer pageNumber;

        private GetDocketEntriesRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set docketNumber
         * @param docketNumber Retrieve the docket entry witih the specified docket number in the case with the specified caseId value. (optional)
         * @return GetDocketEntriesRequestBuilder
         */
        public GetDocketEntriesRequestBuilder docketNumber(Integer docketNumber) {
            this.docketNumber = docketNumber;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Sort the retrieved docket entries in ascending order or descending order of date. (optional)
         * @return GetDocketEntriesRequestBuilder
         */
        public GetDocketEntriesRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetDocketEntriesRequestBuilder
         */
        public GetDocketEntriesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getDocketEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDocketEntriesCall(caseId, docketNumber, sortBy, pageNumber, _callback);
        }


        /**
         * Execute getDocketEntries request
         * @return DocketEntries
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public DocketEntries execute() throws ApiException {
            ApiResponse<DocketEntries> localVarResp = getDocketEntriesWithHttpInfo(caseId, docketNumber, sortBy, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDocketEntries request with HTTP info returned
         * @return ApiResponse&lt;DocketEntries&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocketEntries> executeWithHttpInfo() throws ApiException {
            return getDocketEntriesWithHttpInfo(caseId, docketNumber, sortBy, pageNumber);
        }

        /**
         * Execute getDocketEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocketEntries> _callback) throws ApiException {
            return getDocketEntriesAsync(caseId, docketNumber, sortBy, pageNumber, _callback);
        }
    }

    /**
     * Gets Docket Entries for a requested Case ID.
     * Retrieve the docket entries in the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetDocketEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetDocketEntriesRequestBuilder getDocketEntries(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetDocketEntriesRequestBuilder(caseId);
    }
    private okhttp3.Call getHearingsForCaseCall(String caseId, String sortBy, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/hearings"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHearingsForCaseValidateBeforeCall(String caseId, String sortBy, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getHearingsForCase(Async)");
        }

        return getHearingsForCaseCall(caseId, sortBy, pageNumber, _callback);

    }


    private ApiResponse<Hearings> getHearingsForCaseWithHttpInfo(String caseId, String sortBy, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getHearingsForCaseValidateBeforeCall(caseId, sortBy, pageNumber, null);
        Type localVarReturnType = new TypeToken<Hearings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getHearingsForCaseAsync(String caseId, String sortBy, Integer pageNumber, final ApiCallback<Hearings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHearingsForCaseValidateBeforeCall(caseId, sortBy, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<Hearings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetHearingsForCaseRequestBuilder {
        private final String caseId;
        private String sortBy;
        private Integer pageNumber;

        private GetHearingsForCaseRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set sortBy
         * @param sortBy Specify the sort order of hearings in the case with the specified caseId. (optional)
         * @return GetHearingsForCaseRequestBuilder
         */
        public GetHearingsForCaseRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetHearingsForCaseRequestBuilder
         */
        public GetHearingsForCaseRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getHearingsForCase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getHearingsForCaseCall(caseId, sortBy, pageNumber, _callback);
        }


        /**
         * Execute getHearingsForCase request
         * @return Hearings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Hearings execute() throws ApiException {
            ApiResponse<Hearings> localVarResp = getHearingsForCaseWithHttpInfo(caseId, sortBy, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getHearingsForCase request with HTTP info returned
         * @return ApiResponse&lt;Hearings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Hearings> executeWithHttpInfo() throws ApiException {
            return getHearingsForCaseWithHttpInfo(caseId, sortBy, pageNumber);
        }

        /**
         * Execute getHearingsForCase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Hearings> _callback) throws ApiException {
            return getHearingsForCaseAsync(caseId, sortBy, pageNumber, _callback);
        }
    }

    /**
     * Gets Hearings for a requested Case ID.
     * Gets Hearings for a requested Case ID.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetHearingsForCaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetHearingsForCaseRequestBuilder getHearingsForCase(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetHearingsForCaseRequestBuilder(caseId);
    }
    private okhttp3.Call getJudgeDetailsCall(String judgeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/judge/{judgeId}"
            .replace("{" + "judgeId" + "}", localVarApiClient.escapeString(judgeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJudgeDetailsValidateBeforeCall(String judgeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'judgeId' is set
        if (judgeId == null) {
            throw new ApiException("Missing the required parameter 'judgeId' when calling getJudgeDetails(Async)");
        }

        return getJudgeDetailsCall(judgeId, _callback);

    }


    private ApiResponse<Judge> getJudgeDetailsWithHttpInfo(String judgeId) throws ApiException {
        okhttp3.Call localVarCall = getJudgeDetailsValidateBeforeCall(judgeId, null);
        Type localVarReturnType = new TypeToken<Judge>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJudgeDetailsAsync(String judgeId, final ApiCallback<Judge> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJudgeDetailsValidateBeforeCall(judgeId, _callback);
        Type localVarReturnType = new TypeToken<Judge>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJudgeDetailsRequestBuilder {
        private final String judgeId;

        private GetJudgeDetailsRequestBuilder(String judgeId) {
            this.judgeId = judgeId;
        }

        /**
         * Build call for getJudgeDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJudgeDetailsCall(judgeId, _callback);
        }


        /**
         * Execute getJudgeDetails request
         * @return Judge
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Judge execute() throws ApiException {
            ApiResponse<Judge> localVarResp = getJudgeDetailsWithHttpInfo(judgeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJudgeDetails request with HTTP info returned
         * @return ApiResponse&lt;Judge&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Judge> executeWithHttpInfo() throws ApiException {
            return getJudgeDetailsWithHttpInfo(judgeId);
        }

        /**
         * Execute getJudgeDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Judge> _callback) throws ApiException {
            return getJudgeDetailsAsync(judgeId, _callback);
        }
    }

    /**
     * Gets details for a requested Judge ID.
     * Retrieve the judge with the specified judgeId value.
     * @param judgeId Retrieve the judge with the specified judgeId value. (required)
     * @return GetJudgeDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetJudgeDetailsRequestBuilder getJudgeDetails(String judgeId) throws IllegalArgumentException {
        if (judgeId == null) throw new IllegalArgumentException("\"judgeId\" is required but got null");
            if (judgeId != null && judgeId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for judgeId. Length must be greater than or equal to 18.");
            }

        return new GetJudgeDetailsRequestBuilder(judgeId);
    }
    private okhttp3.Call getJudgesForCaseCall(String caseId, Boolean isVisible, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/judges"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (isVisible != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isVisible", isVisible));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJudgesForCaseValidateBeforeCall(String caseId, Boolean isVisible, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getJudgesForCase(Async)");
        }

        return getJudgesForCaseCall(caseId, isVisible, pageNumber, _callback);

    }


    private ApiResponse<Judges> getJudgesForCaseWithHttpInfo(String caseId, Boolean isVisible, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getJudgesForCaseValidateBeforeCall(caseId, isVisible, pageNumber, null);
        Type localVarReturnType = new TypeToken<Judges>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJudgesForCaseAsync(String caseId, Boolean isVisible, Integer pageNumber, final ApiCallback<Judges> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJudgesForCaseValidateBeforeCall(caseId, isVisible, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<Judges>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetJudgesForCaseRequestBuilder {
        private final String caseId;
        private Boolean isVisible;
        private Integer pageNumber;

        private GetJudgesForCaseRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set isVisible
         * @param isVisible Retrieve attorneys judges in the case with the specified caseId value whose isVisible flag is set to the specified value. (optional)
         * @return GetJudgesForCaseRequestBuilder
         */
        public GetJudgesForCaseRequestBuilder isVisible(Boolean isVisible) {
            this.isVisible = isVisible;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetJudgesForCaseRequestBuilder
         */
        public GetJudgesForCaseRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getJudgesForCase
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJudgesForCaseCall(caseId, isVisible, pageNumber, _callback);
        }


        /**
         * Execute getJudgesForCase request
         * @return Judges
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Judges execute() throws ApiException {
            ApiResponse<Judges> localVarResp = getJudgesForCaseWithHttpInfo(caseId, isVisible, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getJudgesForCase request with HTTP info returned
         * @return ApiResponse&lt;Judges&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Judges> executeWithHttpInfo() throws ApiException {
            return getJudgesForCaseWithHttpInfo(caseId, isVisible, pageNumber);
        }

        /**
         * Execute getJudgesForCase request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Judges> _callback) throws ApiException {
            return getJudgesForCaseAsync(caseId, isVisible, pageNumber, _callback);
        }
    }

    /**
     * Gets Judges for a requested Case ID.
     * Retrieve the judges involved in the specified case.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetJudgesForCaseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetJudgesForCaseRequestBuilder getJudgesForCase(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetJudgesForCaseRequestBuilder(caseId);
    }
    private okhttp3.Call getPartyDetailsCall(String partyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/party/{partyId}"
            .replace("{" + "partyId" + "}", localVarApiClient.escapeString(partyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartyDetailsValidateBeforeCall(String partyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partyId' is set
        if (partyId == null) {
            throw new ApiException("Missing the required parameter 'partyId' when calling getPartyDetails(Async)");
        }

        return getPartyDetailsCall(partyId, _callback);

    }


    private ApiResponse<Party> getPartyDetailsWithHttpInfo(String partyId) throws ApiException {
        okhttp3.Call localVarCall = getPartyDetailsValidateBeforeCall(partyId, null);
        Type localVarReturnType = new TypeToken<Party>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPartyDetailsAsync(String partyId, final ApiCallback<Party> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartyDetailsValidateBeforeCall(partyId, _callback);
        Type localVarReturnType = new TypeToken<Party>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPartyDetailsRequestBuilder {
        private final String partyId;

        private GetPartyDetailsRequestBuilder(String partyId) {
            this.partyId = partyId;
        }

        /**
         * Build call for getPartyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPartyDetailsCall(partyId, _callback);
        }


        /**
         * Execute getPartyDetails request
         * @return Party
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public Party execute() throws ApiException {
            ApiResponse<Party> localVarResp = getPartyDetailsWithHttpInfo(partyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPartyDetails request with HTTP info returned
         * @return ApiResponse&lt;Party&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Party> executeWithHttpInfo() throws ApiException {
            return getPartyDetailsWithHttpInfo(partyId);
        }

        /**
         * Execute getPartyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Party> _callback) throws ApiException {
            return getPartyDetailsAsync(partyId, _callback);
        }
    }

    /**
     * Gets details for a requested Party ID.
     * Retrieve the party with the specified partyId value.
     * @param partyId Retrieve the party with the specified partyId value. (required)
     * @return GetPartyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetPartyDetailsRequestBuilder getPartyDetails(String partyId) throws IllegalArgumentException {
        if (partyId == null) throw new IllegalArgumentException("\"partyId\" is required but got null");
            if (partyId != null && partyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for partyId. Length must be greater than or equal to 18.");
            }

        return new GetPartyDetailsRequestBuilder(partyId);
    }
    private okhttp3.Call getPrimaryDocumentsCall(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/docketEntries/primaryDocuments"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (docketNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docketNumber", docketNumber));
        }

        if (inLibrary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inLibrary", inLibrary));
        }

        if (afterFirstFetchDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterFirstFetchDate", afterFirstFetchDate));
        }

        if (libraryDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("libraryDate", libraryDate));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPrimaryDocumentsValidateBeforeCall(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getPrimaryDocuments(Async)");
        }

        // verify the required parameter 'docketNumber' is set
        if (docketNumber == null) {
            throw new ApiException("Missing the required parameter 'docketNumber' when calling getPrimaryDocuments(Async)");
        }

        return getPrimaryDocumentsCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);

    }


    private ApiResponse<DocketEntryPrimaryDocuments> getPrimaryDocumentsWithHttpInfo(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getPrimaryDocumentsValidateBeforeCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, null);
        Type localVarReturnType = new TypeToken<DocketEntryPrimaryDocuments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPrimaryDocumentsAsync(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber, final ApiCallback<DocketEntryPrimaryDocuments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPrimaryDocumentsValidateBeforeCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<DocketEntryPrimaryDocuments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPrimaryDocumentsRequestBuilder {
        private final String caseId;
        private final Integer docketNumber;
        private Boolean inLibrary;
        private OffsetDateTime afterFirstFetchDate;
        private OffsetDateTime libraryDate;
        private Integer pageNumber;

        private GetPrimaryDocumentsRequestBuilder(String caseId, Integer docketNumber) {
            this.caseId = caseId;
            this.docketNumber = docketNumber;
        }

        /**
         * Set inLibrary
         * @param inLibrary Retrieve the primary documents in the with the specified inLibrary flag in the case with the specified caseId value. (optional)
         * @return GetPrimaryDocumentsRequestBuilder
         */
        public GetPrimaryDocumentsRequestBuilder inLibrary(Boolean inLibrary) {
            this.inLibrary = inLibrary;
            return this;
        }
        
        /**
         * Set afterFirstFetchDate
         * @param afterFirstFetchDate Retrieve all primary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date. (optional)
         * @return GetPrimaryDocumentsRequestBuilder
         */
        public GetPrimaryDocumentsRequestBuilder afterFirstFetchDate(OffsetDateTime afterFirstFetchDate) {
            this.afterFirstFetchDate = afterFirstFetchDate;
            return this;
        }
        
        /**
         * Set libraryDate
         * @param libraryDate Retrieve all primary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date. (optional)
         * @return GetPrimaryDocumentsRequestBuilder
         */
        public GetPrimaryDocumentsRequestBuilder libraryDate(OffsetDateTime libraryDate) {
            this.libraryDate = libraryDate;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetPrimaryDocumentsRequestBuilder
         */
        public GetPrimaryDocumentsRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getPrimaryDocuments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPrimaryDocumentsCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);
        }


        /**
         * Execute getPrimaryDocuments request
         * @return DocketEntryPrimaryDocuments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public DocketEntryPrimaryDocuments execute() throws ApiException {
            ApiResponse<DocketEntryPrimaryDocuments> localVarResp = getPrimaryDocumentsWithHttpInfo(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPrimaryDocuments request with HTTP info returned
         * @return ApiResponse&lt;DocketEntryPrimaryDocuments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocketEntryPrimaryDocuments> executeWithHttpInfo() throws ApiException {
            return getPrimaryDocumentsWithHttpInfo(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber);
        }

        /**
         * Execute getPrimaryDocuments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocketEntryPrimaryDocuments> _callback) throws ApiException {
            return getPrimaryDocumentsAsync(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);
        }
    }

    /**
     * Gets Primary Documents of Docket Entries.
     * Retrieve the primary documents in the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @param docketNumber Retrieve the primary documents associated with the specified docket number in the case with the specified caseId value. (required)
     * @return GetPrimaryDocumentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetPrimaryDocumentsRequestBuilder getPrimaryDocuments(String caseId, Integer docketNumber) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        if (docketNumber == null) throw new IllegalArgumentException("\"docketNumber\" is required but got null");
        return new GetPrimaryDocumentsRequestBuilder(caseId, docketNumber);
    }
    private okhttp3.Call getRelatedCasesCall(String caseId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/relatedCases"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRelatedCasesValidateBeforeCall(String caseId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getRelatedCases(Async)");
        }

        return getRelatedCasesCall(caseId, pageNumber, _callback);

    }


    private ApiResponse<RelatedCases> getRelatedCasesWithHttpInfo(String caseId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getRelatedCasesValidateBeforeCall(caseId, pageNumber, null);
        Type localVarReturnType = new TypeToken<RelatedCases>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRelatedCasesAsync(String caseId, Integer pageNumber, final ApiCallback<RelatedCases> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRelatedCasesValidateBeforeCall(caseId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<RelatedCases>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRelatedCasesRequestBuilder {
        private final String caseId;
        private Integer pageNumber;

        private GetRelatedCasesRequestBuilder(String caseId) {
            this.caseId = caseId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetRelatedCasesRequestBuilder
         */
        public GetRelatedCasesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getRelatedCases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRelatedCasesCall(caseId, pageNumber, _callback);
        }


        /**
         * Execute getRelatedCases request
         * @return RelatedCases
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public RelatedCases execute() throws ApiException {
            ApiResponse<RelatedCases> localVarResp = getRelatedCasesWithHttpInfo(caseId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRelatedCases request with HTTP info returned
         * @return ApiResponse&lt;RelatedCases&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RelatedCases> executeWithHttpInfo() throws ApiException {
            return getRelatedCasesWithHttpInfo(caseId, pageNumber);
        }

        /**
         * Execute getRelatedCases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RelatedCases> _callback) throws ApiException {
            return getRelatedCasesAsync(caseId, pageNumber, _callback);
        }
    }

    /**
     * Gets Related Cases for a requested Case ID.
     * Retrieve cases that UniCourt has identified as related to the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @return GetRelatedCasesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetRelatedCasesRequestBuilder getRelatedCases(String caseId) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        return new GetRelatedCasesRequestBuilder(caseId);
    }
    private okhttp3.Call getSecondaryDocumentsForDocketEntriesCall(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/case/{caseId}/docketEntries/secondaryDocuments"
            .replace("{" + "caseId" + "}", localVarApiClient.escapeString(caseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (docketNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("docketNumber", docketNumber));
        }

        if (inLibrary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inLibrary", inLibrary));
        }

        if (afterFirstFetchDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("afterFirstFetchDate", afterFirstFetchDate));
        }

        if (libraryDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("libraryDate", libraryDate));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecondaryDocumentsForDocketEntriesValidateBeforeCall(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'caseId' is set
        if (caseId == null) {
            throw new ApiException("Missing the required parameter 'caseId' when calling getSecondaryDocumentsForDocketEntries(Async)");
        }

        // verify the required parameter 'docketNumber' is set
        if (docketNumber == null) {
            throw new ApiException("Missing the required parameter 'docketNumber' when calling getSecondaryDocumentsForDocketEntries(Async)");
        }

        return getSecondaryDocumentsForDocketEntriesCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);

    }


    private ApiResponse<DocketEntrySecondaryDocuments> getSecondaryDocumentsForDocketEntriesWithHttpInfo(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getSecondaryDocumentsForDocketEntriesValidateBeforeCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, null);
        Type localVarReturnType = new TypeToken<DocketEntrySecondaryDocuments>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSecondaryDocumentsForDocketEntriesAsync(String caseId, Integer docketNumber, Boolean inLibrary, OffsetDateTime afterFirstFetchDate, OffsetDateTime libraryDate, Integer pageNumber, final ApiCallback<DocketEntrySecondaryDocuments> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecondaryDocumentsForDocketEntriesValidateBeforeCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<DocketEntrySecondaryDocuments>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSecondaryDocumentsForDocketEntriesRequestBuilder {
        private final String caseId;
        private final Integer docketNumber;
        private Boolean inLibrary;
        private OffsetDateTime afterFirstFetchDate;
        private OffsetDateTime libraryDate;
        private Integer pageNumber;

        private GetSecondaryDocumentsForDocketEntriesRequestBuilder(String caseId, Integer docketNumber) {
            this.caseId = caseId;
            this.docketNumber = docketNumber;
        }

        /**
         * Set inLibrary
         * @param inLibrary Retrieve the secondary documents in the with the specified inLibrary flag in the case with the specified caseId value. (optional)
         * @return GetSecondaryDocumentsForDocketEntriesRequestBuilder
         */
        public GetSecondaryDocumentsForDocketEntriesRequestBuilder inLibrary(Boolean inLibrary) {
            this.inLibrary = inLibrary;
            return this;
        }
        
        /**
         * Set afterFirstFetchDate
         * @param afterFirstFetchDate Retrieve all secondary documents in the case with the specified caseId value that were first fetched by UniCourt on the specified date or within the specified date. (optional)
         * @return GetSecondaryDocumentsForDocketEntriesRequestBuilder
         */
        public GetSecondaryDocumentsForDocketEntriesRequestBuilder afterFirstFetchDate(OffsetDateTime afterFirstFetchDate) {
            this.afterFirstFetchDate = afterFirstFetchDate;
            return this;
        }
        
        /**
         * Set libraryDate
         * @param libraryDate Retrieve all secondary documents in the case with the specified caseId value that were added to the Crowdsourced Library on the specified date or within the specified date. (optional)
         * @return GetSecondaryDocumentsForDocketEntriesRequestBuilder
         */
        public GetSecondaryDocumentsForDocketEntriesRequestBuilder libraryDate(OffsetDateTime libraryDate) {
            this.libraryDate = libraryDate;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. (optional)
         * @return GetSecondaryDocumentsForDocketEntriesRequestBuilder
         */
        public GetSecondaryDocumentsForDocketEntriesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getSecondaryDocumentsForDocketEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSecondaryDocumentsForDocketEntriesCall(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);
        }


        /**
         * Execute getSecondaryDocumentsForDocketEntries request
         * @return DocketEntrySecondaryDocuments
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public DocketEntrySecondaryDocuments execute() throws ApiException {
            ApiResponse<DocketEntrySecondaryDocuments> localVarResp = getSecondaryDocumentsForDocketEntriesWithHttpInfo(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSecondaryDocumentsForDocketEntries request with HTTP info returned
         * @return ApiResponse&lt;DocketEntrySecondaryDocuments&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DocketEntrySecondaryDocuments> executeWithHttpInfo() throws ApiException {
            return getSecondaryDocumentsForDocketEntriesWithHttpInfo(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber);
        }

        /**
         * Execute getSecondaryDocumentsForDocketEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DocketEntrySecondaryDocuments> _callback) throws ApiException {
            return getSecondaryDocumentsForDocketEntriesAsync(caseId, docketNumber, inLibrary, afterFirstFetchDate, libraryDate, pageNumber, _callback);
        }
    }

    /**
     * Gets Secondary Documents of Docket Entries.
     * Retrieve the secondary documents in the case with the specified caseId value.
     * @param caseId Retrieve the case with the specified caseId value. (required)
     * @param docketNumber Retrieve the secondary documents associated with the specified docket number in the case with the specified caseId value. (required)
     * @return GetSecondaryDocumentsForDocketEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request is recieved. </td><td>  -  </td></tr>
     </table>
     */
    public GetSecondaryDocumentsForDocketEntriesRequestBuilder getSecondaryDocumentsForDocketEntries(String caseId, Integer docketNumber) throws IllegalArgumentException {
        if (caseId == null) throw new IllegalArgumentException("\"caseId\" is required but got null");
            if (caseId != null && caseId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for caseId. Length must be greater than or equal to 18.");
            }

        if (docketNumber == null) throw new IllegalArgumentException("\"docketNumber\" is required but got null");
        return new GetSecondaryDocumentsForDocketEntriesRequestBuilder(caseId, docketNumber);
    }
}
