/*
 * UniCourt Enterprise APIs
 * <button><a href=\"/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml\" >Download UniCourt Enterprise APIs Specification</a></button> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AssociatedNormAttorneyResponse;
import com.konfigthis.client.model.AssociatedNormJudgeResponse;
import com.konfigthis.client.model.AssociatedNormLawFirmResponse;
import com.konfigthis.client.model.NormParty;
import com.konfigthis.client.model.NormPartySearchResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PartyAnalyticsApiApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PartyAnalyticsApiApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PartyAnalyticsApiApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAssociatedNormAttorneysCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normParty/{normPartyId}/associatedNormAttorneys"
            .replace("{" + "normPartyId" + "}", localVarApiClient.escapeString(normPartyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAssociatedNormAttorneysValidateBeforeCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normPartyId' is set
        if (normPartyId == null) {
            throw new ApiException("Missing the required parameter 'normPartyId' when calling getAssociatedNormAttorneys(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling getAssociatedNormAttorneys(Async)");
        }

        return getAssociatedNormAttorneysCall(normPartyId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormAttorneyResponse> getAssociatedNormAttorneysWithHttpInfo(String normPartyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = getAssociatedNormAttorneysValidateBeforeCall(normPartyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormAttorneyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAssociatedNormAttorneysAsync(String normPartyId, Integer pageNumber, String q, final ApiCallback<AssociatedNormAttorneyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAssociatedNormAttorneysValidateBeforeCall(normPartyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormAttorneyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAssociatedNormAttorneysRequestBuilder {
        private final String normPartyId;
        private final Integer pageNumber;
        private String q;

        private GetAssociatedNormAttorneysRequestBuilder(String normPartyId, Integer pageNumber) {
            this.normPartyId = normPartyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return GetAssociatedNormAttorneysRequestBuilder
         */
        public GetAssociatedNormAttorneysRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for getAssociatedNormAttorneys
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAssociatedNormAttorneysCall(normPartyId, pageNumber, q, _callback);
        }


        /**
         * Execute getAssociatedNormAttorneys request
         * @return AssociatedNormAttorneyResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormAttorneyResponse execute() throws ApiException {
            ApiResponse<AssociatedNormAttorneyResponse> localVarResp = getAssociatedNormAttorneysWithHttpInfo(normPartyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAssociatedNormAttorneys request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormAttorneyResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormAttorneyResponse> executeWithHttpInfo() throws ApiException {
            return getAssociatedNormAttorneysWithHttpInfo(normPartyId, pageNumber, q);
        }

        /**
         * Execute getAssociatedNormAttorneys request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormAttorneyResponse> _callback) throws ApiException {
            return getAssociatedNormAttorneysAsync(normPartyId, pageNumber, q, _callback);
        }
    }

    /**
     * Attorneys that represented the Party.
     * Returns a list of  Attorneys the Party has been represented by. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTV4vCEaKrhystBz\&quot;,\&quot;CORTYsomR6GiiiPovp\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all attorneys associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normPartyId Norm ID of the Party.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return GetAssociatedNormAttorneysRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetAssociatedNormAttorneysRequestBuilder getAssociatedNormAttorneys(String normPartyId, Integer pageNumber) throws IllegalArgumentException {
        if (normPartyId == null) throw new IllegalArgumentException("\"normPartyId\" is required but got null");
            if (normPartyId != null && normPartyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new GetAssociatedNormAttorneysRequestBuilder(normPartyId, pageNumber);
    }
    private okhttp3.Call getNormPartyDetailsCall(String normPartyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normParty/{normPartyId}"
            .replace("{" + "normPartyId" + "}", localVarApiClient.escapeString(normPartyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormPartyDetailsValidateBeforeCall(String normPartyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normPartyId' is set
        if (normPartyId == null) {
            throw new ApiException("Missing the required parameter 'normPartyId' when calling getNormPartyDetails(Async)");
        }

        return getNormPartyDetailsCall(normPartyId, _callback);

    }


    private ApiResponse<NormParty> getNormPartyDetailsWithHttpInfo(String normPartyId) throws ApiException {
        okhttp3.Call localVarCall = getNormPartyDetailsValidateBeforeCall(normPartyId, null);
        Type localVarReturnType = new TypeToken<NormParty>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormPartyDetailsAsync(String normPartyId, final ApiCallback<NormParty> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormPartyDetailsValidateBeforeCall(normPartyId, _callback);
        Type localVarReturnType = new TypeToken<NormParty>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormPartyDetailsRequestBuilder {
        private final String normPartyId;

        private GetNormPartyDetailsRequestBuilder(String normPartyId) {
            this.normPartyId = normPartyId;
        }

        /**
         * Build call for getNormPartyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormPartyDetailsCall(normPartyId, _callback);
        }


        /**
         * Execute getNormPartyDetails request
         * @return NormParty
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public NormParty execute() throws ApiException {
            ApiResponse<NormParty> localVarResp = getNormPartyDetailsWithHttpInfo(normPartyId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormPartyDetails request with HTTP info returned
         * @return ApiResponse&lt;NormParty&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormParty> executeWithHttpInfo() throws ApiException {
            return getNormPartyDetailsWithHttpInfo(normPartyId);
        }

        /**
         * Execute getNormPartyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormParty> _callback) throws ApiException {
            return getNormPartyDetailsAsync(normPartyId, _callback);
        }
    }

    /**
     * Norm Party Details.
     * The Party Details API allows you to look up Parties by normPartyId. 
     * @param normPartyId Norm ID of the Party.   - minimum: 18   - maximum: 18  (required)
     * @return GetNormPartyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetNormPartyDetailsRequestBuilder getNormPartyDetails(String normPartyId) throws IllegalArgumentException {
        if (normPartyId == null) throw new IllegalArgumentException("\"normPartyId\" is required but got null");
            if (normPartyId != null && normPartyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
            }

        return new GetNormPartyDetailsRequestBuilder(normPartyId);
    }
    private okhttp3.Call getNormPartySearchResultsByIdCall(String normPartySearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normPartySearch/{normPartySearchId}"
            .replace("{" + "normPartySearchId" + "}", localVarApiClient.escapeString(normPartySearchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getNormPartySearchResultsByIdValidateBeforeCall(String normPartySearchId, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normPartySearchId' is set
        if (normPartySearchId == null) {
            throw new ApiException("Missing the required parameter 'normPartySearchId' when calling getNormPartySearchResultsById(Async)");
        }

        return getNormPartySearchResultsByIdCall(normPartySearchId, pageNumber, _callback);

    }


    private ApiResponse<NormPartySearchResponse> getNormPartySearchResultsByIdWithHttpInfo(String normPartySearchId, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = getNormPartySearchResultsByIdValidateBeforeCall(normPartySearchId, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormPartySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getNormPartySearchResultsByIdAsync(String normPartySearchId, Integer pageNumber, final ApiCallback<NormPartySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getNormPartySearchResultsByIdValidateBeforeCall(normPartySearchId, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormPartySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetNormPartySearchResultsByIdRequestBuilder {
        private final String normPartySearchId;
        private Integer pageNumber;

        private GetNormPartySearchResultsByIdRequestBuilder(String normPartySearchId) {
            this.normPartySearchId = normPartySearchId;
        }

        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return GetNormPartySearchResultsByIdRequestBuilder
         */
        public GetNormPartySearchResultsByIdRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for getNormPartySearchResultsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getNormPartySearchResultsByIdCall(normPartySearchId, pageNumber, _callback);
        }


        /**
         * Execute getNormPartySearchResultsById request
         * @return NormPartySearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormPartySearchResponse execute() throws ApiException {
            ApiResponse<NormPartySearchResponse> localVarResp = getNormPartySearchResultsByIdWithHttpInfo(normPartySearchId, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getNormPartySearchResultsById request with HTTP info returned
         * @return ApiResponse&lt;NormPartySearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormPartySearchResponse> executeWithHttpInfo() throws ApiException {
            return getNormPartySearchResultsByIdWithHttpInfo(normPartySearchId, pageNumber);
        }

        /**
         * Execute getNormPartySearchResultsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormPartySearchResponse> _callback) throws ApiException {
            return getNormPartySearchResultsByIdAsync(normPartySearchId, pageNumber, _callback);
        }
    }

    /**
     * Norm party search results for a given normPartySearchId.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormPartySearchQueryObject 
     * @param normPartySearchId Norm Party Search information for the given normPartySearchId. (required)
     * @return GetNormPartySearchResultsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public GetNormPartySearchResultsByIdRequestBuilder getNormPartySearchResultsById(String normPartySearchId) throws IllegalArgumentException {
        if (normPartySearchId == null) throw new IllegalArgumentException("\"normPartySearchId\" is required but got null");
            if (normPartySearchId != null && normPartySearchId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normPartySearchId. Length must be greater than or equal to 18.");
            }

        return new GetNormPartySearchResultsByIdRequestBuilder(normPartySearchId);
    }
    private okhttp3.Call listAssociatedNormLawFirmsCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normParty/{normPartyId}/associatedNormLawFirms"
            .replace("{" + "normPartyId" + "}", localVarApiClient.escapeString(normPartyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAssociatedNormLawFirmsValidateBeforeCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normPartyId' is set
        if (normPartyId == null) {
            throw new ApiException("Missing the required parameter 'normPartyId' when calling listAssociatedNormLawFirms(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listAssociatedNormLawFirms(Async)");
        }

        return listAssociatedNormLawFirmsCall(normPartyId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormLawFirmResponse> listAssociatedNormLawFirmsWithHttpInfo(String normPartyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listAssociatedNormLawFirmsValidateBeforeCall(normPartyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormLawFirmResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAssociatedNormLawFirmsAsync(String normPartyId, Integer pageNumber, String q, final ApiCallback<AssociatedNormLawFirmResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAssociatedNormLawFirmsValidateBeforeCall(normPartyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormLawFirmResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAssociatedNormLawFirmsRequestBuilder {
        private final String normPartyId;
        private final Integer pageNumber;
        private String q;

        private ListAssociatedNormLawFirmsRequestBuilder(String normPartyId, Integer pageNumber) {
            this.normPartyId = normPartyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListAssociatedNormLawFirmsRequestBuilder
         */
        public ListAssociatedNormLawFirmsRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listAssociatedNormLawFirms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAssociatedNormLawFirmsCall(normPartyId, pageNumber, q, _callback);
        }


        /**
         * Execute listAssociatedNormLawFirms request
         * @return AssociatedNormLawFirmResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormLawFirmResponse execute() throws ApiException {
            ApiResponse<AssociatedNormLawFirmResponse> localVarResp = listAssociatedNormLawFirmsWithHttpInfo(normPartyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAssociatedNormLawFirms request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormLawFirmResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormLawFirmResponse> executeWithHttpInfo() throws ApiException {
            return listAssociatedNormLawFirmsWithHttpInfo(normPartyId, pageNumber, q);
        }

        /**
         * Execute listAssociatedNormLawFirms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormLawFirmResponse> _callback) throws ApiException {
            return listAssociatedNormLawFirmsAsync(normPartyId, pageNumber, q, _callback);
        }
    }

    /**
     * Law Firms that represented the Party.
     * Returns a list of Law Firms the Party has been represented by. ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTV4vCEaKrhystBz\&quot;,\&quot;CORTYsomR6GiiiPovp\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:\&quot;PTYRiP8nMgPxBsPc5i\&quot;** | | **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:\&quot;PTYGBnjxbx6tKNfVEP\&quot;** | | **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all lawfirms associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] 
     * @param normPartyId Norm ID of the Party.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListAssociatedNormLawFirmsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListAssociatedNormLawFirmsRequestBuilder listAssociatedNormLawFirms(String normPartyId, Integer pageNumber) throws IllegalArgumentException {
        if (normPartyId == null) throw new IllegalArgumentException("\"normPartyId\" is required but got null");
            if (normPartyId != null && normPartyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListAssociatedNormLawFirmsRequestBuilder(normPartyId, pageNumber);
    }
    private okhttp3.Call listJudgesAssociatedWithNormPartyCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normParty/{normPartyId}/associatedNormJudges"
            .replace("{" + "normPartyId" + "}", localVarApiClient.escapeString(normPartyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listJudgesAssociatedWithNormPartyValidateBeforeCall(String normPartyId, Integer pageNumber, String q, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'normPartyId' is set
        if (normPartyId == null) {
            throw new ApiException("Missing the required parameter 'normPartyId' when calling listJudgesAssociatedWithNormParty(Async)");
        }

        // verify the required parameter 'pageNumber' is set
        if (pageNumber == null) {
            throw new ApiException("Missing the required parameter 'pageNumber' when calling listJudgesAssociatedWithNormParty(Async)");
        }

        return listJudgesAssociatedWithNormPartyCall(normPartyId, pageNumber, q, _callback);

    }


    private ApiResponse<AssociatedNormJudgeResponse> listJudgesAssociatedWithNormPartyWithHttpInfo(String normPartyId, Integer pageNumber, String q) throws ApiException {
        okhttp3.Call localVarCall = listJudgesAssociatedWithNormPartyValidateBeforeCall(normPartyId, pageNumber, q, null);
        Type localVarReturnType = new TypeToken<AssociatedNormJudgeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listJudgesAssociatedWithNormPartyAsync(String normPartyId, Integer pageNumber, String q, final ApiCallback<AssociatedNormJudgeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listJudgesAssociatedWithNormPartyValidateBeforeCall(normPartyId, pageNumber, q, _callback);
        Type localVarReturnType = new TypeToken<AssociatedNormJudgeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListJudgesAssociatedWithNormPartyRequestBuilder {
        private final String normPartyId;
        private final Integer pageNumber;
        private String q;

        private ListJudgesAssociatedWithNormPartyRequestBuilder(String normPartyId, Integer pageNumber) {
            this.normPartyId = normPartyId;
            this.pageNumber = pageNumber;
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters. All options are documented above. (optional)
         * @return ListJudgesAssociatedWithNormPartyRequestBuilder
         */
        public ListJudgesAssociatedWithNormPartyRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Build call for listJudgesAssociatedWithNormParty
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listJudgesAssociatedWithNormPartyCall(normPartyId, pageNumber, q, _callback);
        }


        /**
         * Execute listJudgesAssociatedWithNormParty request
         * @return AssociatedNormJudgeResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AssociatedNormJudgeResponse execute() throws ApiException {
            ApiResponse<AssociatedNormJudgeResponse> localVarResp = listJudgesAssociatedWithNormPartyWithHttpInfo(normPartyId, pageNumber, q);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listJudgesAssociatedWithNormParty request with HTTP info returned
         * @return ApiResponse&lt;AssociatedNormJudgeResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AssociatedNormJudgeResponse> executeWithHttpInfo() throws ApiException {
            return listJudgesAssociatedWithNormPartyWithHttpInfo(normPartyId, pageNumber, q);
        }

        /**
         * Execute listJudgesAssociatedWithNormParty request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AssociatedNormJudgeResponse> _callback) throws ApiException {
            return listJudgesAssociatedWithNormPartyAsync(normPartyId, pageNumber, q, _callback);
        }
    }

    /**
     * Judges Faced By the Party.
     * Returns a list of Judges the party has faced. &lt;br&gt;&lt;br&gt; ## Terms and Connectors | Connector | Schema   | Description  | Example | | ------| ------| ------|------| | **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:\&quot;CORTV4vCEaKrhystBz\&quot; AND courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;**| | **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN (\&quot;CORTV4vCEaKrhystBz\&quot;,\&quot;CORTYsomR6GiiiPovp\&quot;)**| | **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:\&quot;CORTV4vCEaKrhystBz\&quot;** | | **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:\&quot;COSYACHBdMewtaG5DY\&quot;** | | **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:\&quot;COTPm8jjc2PAydpFhq\&quot;** | | **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:\&quot;COLO6b82CkRqS846hx\&quot;** | | **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot;** | | **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:\&quot;CTYG8gZ6hPRKhhYi4Y\&quot;** | | **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:\&quot;AOFL2UxEWfVmTPMyqf\&quot;** | | **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:\&quot;CSCLNjbKTN7Yfo2wdb\&quot;** | | **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** | | **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:\&quot;California\&quot;))** | | **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore:[0.5 TO \\*]** | | **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** | &lt;br&gt; ## Example Query Query to get all judges associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021&lt;br&gt; q&#x3D;caseTypeId:\&quot;CTYPATMYyaJekdgj2c\&quot; AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00] &lt;br&gt;&lt;br&gt; 
     * @param normPartyId Norm ID of the Party.   - minimum: 18   - maximum: 18  (required)
     * @param pageNumber Page number. - minimum: 1  (required)
     * @return ListJudgesAssociatedWithNormPartyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListJudgesAssociatedWithNormPartyRequestBuilder listJudgesAssociatedWithNormParty(String normPartyId, Integer pageNumber) throws IllegalArgumentException {
        if (normPartyId == null) throw new IllegalArgumentException("\"normPartyId\" is required but got null");
            if (normPartyId != null && normPartyId.length() < 18) {
              throw new IllegalArgumentException("Invalid value for normPartyId. Length must be greater than or equal to 18.");
            }

        if (pageNumber == null) throw new IllegalArgumentException("\"pageNumber\" is required but got null");
        return new ListJudgesAssociatedWithNormPartyRequestBuilder(normPartyId, pageNumber);
    }
    private okhttp3.Call searchNormPartiesCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/normPartySearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNumber", pageNumber));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchNormPartiesValidateBeforeCall(String q, Integer pageNumber, final ApiCallback _callback) throws ApiException {
        return searchNormPartiesCall(q, pageNumber, _callback);

    }


    private ApiResponse<NormPartySearchResponse> searchNormPartiesWithHttpInfo(String q, Integer pageNumber) throws ApiException {
        okhttp3.Call localVarCall = searchNormPartiesValidateBeforeCall(q, pageNumber, null);
        Type localVarReturnType = new TypeToken<NormPartySearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchNormPartiesAsync(String q, Integer pageNumber, final ApiCallback<NormPartySearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchNormPartiesValidateBeforeCall(q, pageNumber, _callback);
        Type localVarReturnType = new TypeToken<NormPartySearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SearchNormPartiesRequestBuilder {
        private String q;
        private Integer pageNumber;

        private SearchNormPartiesRequestBuilder() {
        }

        /**
         * Set q
         * @param q The URL encoded query you are searching for. The query can be as simple as a keyword, but supports many additional options and filters.&lt;/a&gt;  (optional)
         * @return SearchNormPartiesRequestBuilder
         */
        public SearchNormPartiesRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set pageNumber
         * @param pageNumber Query parameter specifying the page number of the search results to be retrieved. - Minimum: 1 - Maximum: 1000  (optional)
         * @return SearchNormPartiesRequestBuilder
         */
        public SearchNormPartiesRequestBuilder pageNumber(Integer pageNumber) {
            this.pageNumber = pageNumber;
            return this;
        }
        
        /**
         * Build call for searchNormParties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchNormPartiesCall(q, pageNumber, _callback);
        }


        /**
         * Execute searchNormParties request
         * @return NormPartySearchResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public NormPartySearchResponse execute() throws ApiException {
            ApiResponse<NormPartySearchResponse> localVarResp = searchNormPartiesWithHttpInfo(q, pageNumber);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute searchNormParties request with HTTP info returned
         * @return ApiResponse&lt;NormPartySearchResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NormPartySearchResponse> executeWithHttpInfo() throws ApiException {
            return searchNormPartiesWithHttpInfo(q, pageNumber);
        }

        /**
         * Execute searchNormParties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NormPartySearchResponse> _callback) throws ApiException {
            return searchNormPartiesAsync(q, pageNumber, _callback);
        }
    }

    /**
     * Party search.
     * ### All query parameters supported for this API can be found in below schema section. Schema --&gt; NormPartySearchQueryObject 
     * @return SearchNormPartiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public SearchNormPartiesRequestBuilder searchNormParties() throws IllegalArgumentException {
        return new SearchNormPartiesRequestBuilder();
    }
}
